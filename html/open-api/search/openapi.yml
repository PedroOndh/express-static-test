openapi: 3.0.3
info:
  title: Empathy Search Plugin
  description: API specification for all endpoints in the Empathy Search Plugin
  version: 1.0.0
servers:
  - url: https://search.internal.test.empathy.co/query/empathy
    description: Integration environment
  - url: https://search.internal.staging.empathy.co/query/empathy
    description: Staging environment
  - url: http://localhost:8080/query/empathy
    description: Local environment
paths:
  /search:
    get:
      tags:
        - Search service
      summary: Search endpoint
      description: Retrieves documents matching a query
      parameters:
        - name: query
          in: query
          description: Query to send to the search engine
          required: true
          schema:
            type: string
        - name: lang
          in: query
          description: Language
          required: true
          schema:
            type: string
            example: en
        - name: device
          in: query
          description: Device
          required: false
          schema:
            type: string
            example: mobile
        - name: gender
          in: query
          description: Value of gender to filter by
          required: false
          schema:
            type: string
            example: Men
        - name: season
          in: query
          description: Value of season to filter by
          required: false
          schema:
            type: string
            example: Summer
        - name: usage
          in: query
          description: Value of usage to filter by
          required: false
          schema:
            type: string
            example: Formal
        - name: price
          in: query
          description: Value of price to filter by
          required: false
          schema:
            type: string
            example: 20.0-30.0
        - name: categoryIds
          in: query
          description: Value of categoryIds to filter by
          required: false
          schema:
            type: string
            example: e5eef62d8
        - name: equalize
          in: query
          description: Value of fields to equalize in json format. Fields must be declared as searchable.
          required: false
          schema:
            type: string
            example: equalize={name:8}
        - name: start
          in: query
          description: Position in the result set of the first document that will be returned
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 1000
        - name: rows
          in: query
          description: Size of a page of results
          required: false
          schema:
            type: integer
            minimum: 1
        - name: returnableFields
          in: query
          description: Set of fields separated by comma to be returnable in the response
          required: false
          schema:
            type: string
          example: returnableFields=id,name
        - name: sort
          in: query
          description: Sorting field and optional order
          required: false
          schema:
            type: string
          examples:
            no-order:
              value: price
              summary: No order specified
            with-order:
              value: price asc
              summary: Order specified
        - name: filter
          in: query
          description: Filter to apply to the query
          required: false
          schema:
            type: string
          examples:
            value-filter:
              value: season:fall
              summary: A value filter
            range-filter:
              value: price:5-7.99
              summary: A range filter
        - name: facet
          in: query
          description: Facet fields that will be returned
          required: false
          schema:
            type: string
          example: facet=brand,gender
        - name: facets
          in: query
          description: Enable or disable facets in the response.
          required: false
          schema:
            type: boolean
        - name: f.{FACET_FIELD}.boosts
          in: query
          description: Boost facet values from facet {FACET_FIELD}. {FACET_FIELD} must be a value of 'Facet' parameter and 'Facet' parameter is required to work. Values must be informed separated by commas and the order of them will be reflected in the response. First informed, first returned in response.
          required: false
          schema:
            type: string
          example: f.brand.boosts=nike,addidas
        - name: f.{FACET_FIELD}.buries
          in: query
          description: Bury facet values from facet {FACET_FIELD}. {FACET_FIELD} must be a value of 'Facet' parameter and 'Facet' parameter is required to work. Values must be informed separated by commas and the order of them will be reflected in the response. First informed, last returned in response.
          required: false
          schema:
            type: string
          example: f.gender.buries=sales,kids
        - name: f.{FACET_FIELD}.sort
          in: query
          description: Sort facet values. Values available are 'ALPHABETYCALLY' or 'RESULTS_NUMBER'. {FACET_FIELD} must be a value of 'Facet' parameter and 'Facet' parameter is required to work.
          required: false
          schema:
            type: string
          example: f.gender.sort=ALPHABETICALLY
        - name: productsRankingField
          in: query
          description: Field for product boosting
          required: false
          schema:
            type: string
          example: id
        - name: productsRankingBoostsIds
          in: query
          description: List of comma-separated ids for products to apply boosting to
          required: false
          schema:
            type: array
            items:
              type: string
          example: 15972-U,8872-U
        - name: productsRankingBuriesIds
          in: query
          description: List of comma-separated ids for products to apply buries to
          required: false
          schema:
            type: string
          example: 15972-U,8872-U
        - name: attributesRankingBoosts
          in: query
          description: List of comma-separated pairs of 'field:value' for attributes to apply boosts to
          required: false
          schema:
            type: string
          example: season:fall,color:blue
        - name: attributesRankingBuries
          in: query
          description: List of comma-separated pairs of 'field:value' for attributes to apply buries to
          required: false
          schema:
            type: string
          example: season:fall,color:blue
        - name: contextualizeQueryFields
          in: query
          description: Object with attributes to boost
          required: false
          schema:
            $ref: '#/components/schemas/ContextualizeQueryFields'
        - name: contextualizeQueryProducts
          in: query
          description: Object with products to boost
          required: false
          schema:
            $ref: '#/components/schemas/ContextualizeQueryProducts'
        - name: groupEnabled
          in: query
          description: Enable or disable grouping feature
          required: false
          schema:
            type: boolean
        - name: fieldValueFactorEnabled
          in: query
          description: Enable or disable function score feature
          required: false
          schema:
            type: boolean
        - name: fieldValueFactorFieldName
          in: query
          description: Name of field to apply function score
          required: false
          schema:
            type: string
          example: popularity
        - name: fieldValueFactorValue
          in: query
          description: Factor to multiply the field value with. Must be float.
          required: false
          schema:
            type: number
          example: 2
        - name: fieldValueFactorModifier
          in: query
          description: Modifier to apply to the field value of the function score. Available values are 'none', 'log', 'log1p', 'log2p', 'ln', 'ln1p', 'ln2p', 'square', 'sqrt', 'reciprocal'
          required: false
          schema:
            type: string
          example: none
        - name: functionScoreBoostMode
          in: query
          description: How to compute score with the function value result. Available values are 'multiply', 'replace', 'sum', 'avg', 'max' and 'min'
          required: false
          schema:
            type: string
          example: sum
        - name: debugEnabled
          in: query
          description: Enable debug mode to include detailed info about the query and about how products have matched in the response
          required: false
          schema:
            type: boolean
        - name: debugRankingDetails
          in: query
          description: Enable debug details to add an explanation of the score to each product
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogTagging'
        400:
          description: Invalid parameter in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        418:
          description: Server took too long to respond
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /empathize:
    get:
      tags:
        - Search service
      summary: Empathize endpoint
      description: Retrieves top trends for a given query
      parameters:
        - name: query
          in: query
          description: Query to retrieve top trends from
          required: false
          schema:
            type: string
        - name: lang
          in: query
          description: Language
          required: true
          schema:
            type: string
        - name: scope
          in: query
          description: Scope
          required: true
          schema:
            type: string
          example: en
        - name: filter
          in: query
          description: Filter to apply to the query
          required: false
          schema:
            type: string
          examples:
            value-filter:
              value: season:fall
              summary: A value filter
            range-filter:
              value: price:5-7.99
              summary: A range filter
        - name: start
          in: query
          description: Position in the result set of the first document that will be returned
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 1000
        - name: rows
          in: query
          description: Size of a page of results
          required: false
          schema:
            type: integer
            minimum: 1
        - name: returnableFields
          in: query
          description: Set of fields separated by comma to be returnable in the response
          required: false
          schema:
            type: string
          example: returnableFields=id,name
        - name: sort
          in: query
          description: Sorting field and optional order
          required: false
          schema:
            type: string
        - name: groupEnabled
          in: query
          description: Enable or disable grouping feature
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmpathizeData'
        400:
          description: Invalid parameter in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /nextqueries:
    get:
      tags:
        - Search service
      summary: Next Queries endpoint
      description: Retrieves next queries for a given query
      parameters:
        - name: query
          in: query
          description: Query to retrieve next queries from
          required: true
          schema:
            type: string
        - name: lang
          in: query
          description: Language
          required: true
          schema:
            type: string
          example: en
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NextQueriesData'
        400:
          description: Invalid parameter in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /relatedtags:
    get:
      tags:
        - Search service
      summary: Related Tags endpoint
      description: Retrieve related tags for a given query
      parameters:
        - name: query
          in: query
          description: Query to retrieve related tags from
          required: true
          schema:
            type: string
        - name: lang
          in: query
          description: Language
          required: true
          schema:
            type: string
          example: en
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelatedTagsData'
        400:
          description: Invalid parameter in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /keywords:
    get:
      tags:
        - Search service
      summary: Keywords endpoint
      description: Retrieves documents exactly matching a a term
      parameters:
        - name: query
          in: query
          description: Query to send to the search engine
          required: true
          schema:
            type: string
        - name: lang
          in: query
          description: Language
          required: true
          schema:
            type: string
            example: en
        - name: device
          in: query
          description: Device
          required: false
          schema:
            type: string
            example: mobile
        - name: gender
          in: query
          description: Value of gender to filter by
          required: false
          schema:
            type: string
            example: Men
        - name: season
          in: query
          description: Value of season to filter by
          required: false
          schema:
            type: string
            example: Summer
        - name: usage
          in: query
          description: Value of usage to filter by
          required: false
          schema:
            type: string
            example: Formal
        - name: price
          in: query
          description: Value of price to filter by
          required: false
          schema:
            type: string
            example: 20.0-30.0
        - name: categoryIds
          in: query
          description: Value of categoryIds to filter by
          required: false
          schema:
            type: string
            example: e5eef62d8
        - name: start
          in: query
          description: Position in the result set of the first document that will be returned
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 1000
        - name: rows
          in: query
          description: Size of a page of results
          required: false
          schema:
            type: integer
            minimum: 1
        - name: returnableFields
          in: query
          description: Set of fields separated by comma to be returnable in the response
          required: false
          schema:
            type: string
          example: returnableFields=id,name
        - name: sort
          in: query
          description: Sorting field and optional order
          required: false
          schema:
            type: string
        - name: filter
          in: query
          description: Filter to apply to the query
          required: false
          schema:
            type: string
          examples:
            value-filter:
              value: season:fall
              summary: A value filter
            range-filter:
              value: price:5-7.99
              summary: A range filter
        - name: facet
          in: query
          description: Facet fields that will be returned
          required: false
          schema:
            type: string
          example: facet=brand,gender
        - name: facets
          in: query
          description: Enable or disable facets in the response.
          required: false
          schema:
            type: boolean
        - name: f.{FACET_FIELD}.boosts
          in: query
          description: Boost facet values from facet {FACET_FIELD}. {FACET_FIELD} must be a value of 'Facet' parameter and 'Facet' parameter is required to work. Values must be informed separated by commas and the order of them will be reflected in the response. First informed, first returned in response.
          required: false
          schema:
            type: string
          example: f.brand.boosts=nike,addidas
        - name: f.{FACET_FIELD}.buries
          in: query
          description: Bury facet values from facet {FACET_FIELD}. {FACET_FIELD} must be a value of 'Facet' parameter and 'Facet' parameter is required to work. Values must be informed separated by commas and the order of them will be reflected in the response. First informed, last returned in response.
          required: false
          schema:
            type: string
          example: f.gender.buries=sales,kids
        - name: f.{FACET_FIELD}.sort
          in: query
          description: Sort facet values. Values available are 'ALPHABETYCALLY' or 'RESULTS_NUMBER'. {FACET_FIELD} must be a value of 'Facet' parameter and 'Facet' parameter is required to work.
          required: false
          schema:
            type: string
          example: f.gender.sort=ALPHABETICALLY
        - name: debugEnabled
          in: query
          description: Enable debug mode to include detailed info about the query and about how products have matched in the response
          required: false
          schema:
            type: boolean
        - name: debugRankingDetails
          in: query
          description: Enable debug details to add an explanation of the score to each product
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordsAndBrowsingData'
        400:
          description: Invalid parameter in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        418:
          description: Server took too long to respond
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /topclicked:
    get:
      tags:
        - Search service
      summary: Top Clicked endpoint
      description: Retrieves the most clicked documents (max number of documents returned is 1000)
      parameters:
        - name: lang
          in: query
          description: Language
          required: true
          schema:
            type: string
            example: en
        - name: scope
          in: query
          description: Scope
          required: false
          schema:
            type: string
            example: mobile
        - name: start
          in: query
          description: Position in the result set of the first document that will be returned
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 1000
        - name: rows
          in: query
          description: Size of a page of results
          required: false
          schema:
            type: integer
            minimum: 1
        - name: groupEnabled
          in: query
          description: Enable or disable grouping feature
          required: false
          schema:
            type: boolean
        - name: debugEnabled
          in: query
          description: Enable debug mode to include detailed info about the query and about how products have matched in the response
          required: false
          schema:
            type: boolean
        - name: debugRankingDetails
          in: query
          description: Enable debug details to add an explanation of the score to each product
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopClickedCatalog'
        400:
          description: Invalid parameter in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        418:
          description: Server took too long to respond
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /browse:
    get:
      tags:
        - Search service
      summary: Browse endpoint
      description: Retrieves all documents filtering at least from one category id ('categoryIds' field).
      parameters:
        - name: browseField
          in: query
          description: Field to browse over
          required: true
          schema:
            type: string
        - name: browseValue
          in: query
          description: Browse field value
          required: true
          schema:
            type: string
        - name: lang
          in: query
          description: Language
          required: true
          schema:
            type: string
            example: en
        - name: device
          in: query
          description: Device
          required: false
          schema:
            type: string
            example: mobile
        - name: gender
          in: query
          description: Value of gender to filter by
          required: false
          schema:
            type: string
            example: Men
        - name: season
          in: query
          description: Value of season to filter by
          required: false
          schema:
            type: string
            example: Summer
        - name: usage
          in: query
          description: Value of usage to filter by
          required: false
          schema:
            type: string
            example: Formal
        - name: price
          in: query
          description: Value of price to filter by
          required: false
          schema:
            type: string
            example: 20.0-30.0
        - name: categoryIds
          in: query
          description: Value of categoryIds to filter by
          required: false
          schema:
            type: string
            example: e5eef62d8
        - name: start
          in: query
          description: Position in the result set of the first document that will be returned
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 1000
        - name: rows
          in: query
          description: Size of a page of results
          required: false
          schema:
            type: integer
            minimum: 1
        - name: returnableFields
          in: query
          description: Set of fields separated by comma to be returnable in the response
          required: false
          schema:
            type: string
          example: returnableFields=id,name
        - name: sort
          in: query
          description: Sorting field and optional order
          required: false
          schema:
            type: string
          examples:
            no-order:
              value: price
              summary: No order specified
            with-order:
              value: price asc
              summary: Order specified
        - name: filter
          in: query
          description: Filter to apply to the query
          required: false
          schema:
            type: string
          examples:
            value-filter:
              value: season:fall
              summary: A value filter
            range-filter:
              value: price:5-7.99
              summary: A range filter
        - name: facet
          in: query
          description: Facet fields that will be returned
          required: false
          schema:
            type: string
          example: facet=brand,gender
        - name: facets
          in: query
          description: Enable or disable facets in the response.
          required: false
          schema:
            type: boolean
        - name: f.{FACET_FIELD}.boosts
          in: query
          description: Boost facet values from facet {FACET_FIELD}. {FACET_FIELD} must be a value of 'Facet' parameter and 'Facet' parameter is required to work. Values must be informed separated by commas and the order of them will be reflected in the response. First informed, first returned in response.
          required: false
          schema:
            type: string
          example: f.brand.boosts=nike,addidas
        - name: f.{FACET_FIELD}.buries
          in: query
          description: Bury facet values from facet {FACET_FIELD}. {FACET_FIELD} must be a value of 'Facet' parameter and 'Facet' parameter is required to work. Values must be informed separated by commas and the order of them will be reflected in the response. First informed, last returned in response.
          required: false
          schema:
            type: string
          example: f.gender.buries=sales,kids
        - name: f.{FACET_FIELD}.sort
          in: query
          description: Sort facet values. Values available are 'ALPHABETYCALLY' or 'RESULTS_NUMBER'. {FACET_FIELD} must be a value of 'Facet' parameter and 'Facet' parameter is required to work.
          required: false
          schema:
            type: string
          example: f.gender.sort=ALPHABETICALLY
        - name: groupEnabled
          in: query
          description: Enable or disable grouping feature
          required: false
          schema:
            type: boolean
        - name: debugEnabled
          in: query
          description: Enable debug mode to include detailed info about the query and about how products have matched in the response
          required: false
          schema:
            type: boolean
        - name: debugRankingDetails
          in: query
          description: Enable debug details to add an explanation of the score to each product
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordsAndBrowsingData'
        400:
          description: Invalid parameter in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        418:
          description: Server took too long to respond
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /field-values:
    get:
      tags:
        - Search service
      summary: Field values endpoint
      description: Retrieves all existing values for a given field (fields currently supported are 'category' and 'gender')
      parameters:
        - name: attribute
          in: query
          description: Name of the field which values will be listed
          required: true
          schema:
            type: string
            example: category
        - name: lang
          in: query
          description: Language
          required: true
          schema:
            type: string
            example: en
        - name: debugEnabled
          in: query
          description: Enable debug mode to include detailed info about the query and about how products have matched in the response
          required: false
          schema:
            type: boolean
        - name: debugRankingDetails
          in: query
          description: Enable debug details to add an explanation of the score to each product
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fields'
        400:
          description: Invalid parameter in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        418:
          description: Server took too long to respond
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /skusearch:
    get:
      tags:
        - Search service
      summary: Sku search endpoint
      description: Retrieves documents matching a sku
      parameters:
        - name: query
          in: query
          description: Query to send to the search engine
          required: true
          schema:
            type: string
        - name: lang
          in: query
          description: Language
          required: true
          schema:
            type: string
            example: en
        - name: equalize
          in: query
          description: Value of fields to equalize in json format. Fields must be declared as searchable.
          required: false
          schema:
            type: string
            example: equalize={name:8}
        - name: returnableFields
          in: query
          description: Set of fields separated by comma to be returnable in the response
          required: false
          schema:
            type: string
          example: returnableFields=id,name
        - name: groupEnabled
          in: query
          description: Enable or disable grouping feature
          required: false
          schema:
            type: boolean
        - name: debugEnabled
          in: query
          description: Enable debug mode to include detailed info about the query and about how products have matched in the response
          required: false
          schema:
            type: boolean
        - name: debugRankingDetails
          in: query
          description: Enable debug details to add an explanation of the score to each product
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogSkuSearch'
        400:
          description: Invalid parameter in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        418:
          description: Server took too long to respond
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    Catalog:
      type: object
      properties:
        catalog:
          type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/Document'
            numFound:
              type: integer
            facets:
              type: array
              items:
                $ref: '#/components/schemas/Facet'
            spellchecked:
              type: string
            debug:
              type: object
              properties:
                query:
                  type: object
                internalQuery:
                  type: object
        direct:
          type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/DirectDocument'
        promoted:
          type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/PromotedAndBannerDocument'
        banner:
          type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/PromotedAndBannerDocument'
    CatalogTagging:
      type: object
      properties:
        catalog:
          type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/DocumentTagging'
            numFound:
              type: integer
            facets:
              type: array
              items:
                $ref: '#/components/schemas/Facet'
            spellchecked:
              type: string
            tagging:
              $ref: '#/components/schemas/Tagging'
            debug:
              type: object
              properties:
                query:
                  type: object
                internalQuery:
                  type: object
        direct:
          type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/DirectDocument'
        promoted:
          type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/PromotedAndBannerDocument'
        banner:
          type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/PromotedAndBannerDocument'
    CatalogSkuSearch:
      type: object
      properties:
        catalog:
          type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/DocumentSkuSearch'
            debug:
              type: object
              properties:
                query:
                  type: object
                internalQuery:
                  type: object
    KeywordsAndBrowsingData:
      type: object
      properties:
        catalog:
          type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/NoRankingDetailsDocument'
            numFound:
              type: integer
            facets:
              type: array
              items:
                $ref: '#/components/schemas/Facet'
            debug:
              type: object
              properties:
                query:
                  type: object
                internalQuery:
                  type: object
    Document:
      type: object
      properties:
        id:
          type: string
        groupId:
          type: string
        name:
          type: string
        gender:
          type: string
        color:
          type: string
        year:
          type: string
        usage:
          type: string
        type:
          type: string
        size:
          type: string
        price:
          type: number
          format: double
        season:
          type: string
        image:
          type: string
        url:
          type: string
        score:
          type: number
          format: double
        categoryPaths:
          type: array
          items:
            type: string
        categoryIds:
          type: array
          items:
            type: string
        categories:
          type: array
          items:
            type: string
        debugProperties:
          $ref: '#/components/schemas/DebugProperties'
        indexMetrics:
          type: object
          properties:
            generatedTime:
              type: string
            readTime:
              type: string
            transformedTime:
              type: string
            deploymentTime:
              type: string
        _jobProperties:
          type: object
          properties:
            jobId:
              type: string
            _eb_date_:
              type: string
    NoRankingDetailsDocument:
      type: object
      properties:
        id:
          type: string
        groupId:
          type: string
        name:
          type: string
        gender:
          type: string
        color:
          type: string
        year:
          type: string
        usage:
          type: string
        type:
          type: string
        size:
          type: string
        price:
          type: number
          format: double
        season:
          type: string
        image:
          type: string
        url:
          type: string
        score:
          type: number
          format: double
        categoryPaths:
          type: array
          items:
            type: string
        categoryIds:
          type: array
          items:
            type: string
        categories:
          type: array
          items:
            type: string
        indexMetrics:
          type: object
          properties:
            generatedTime:
              type: string
            readTime:
              type: string
            transformedTime:
              type: string
            deploymentTime:
              type: string
        _jobProperties:
          type: object
          properties:
            jobId:
              type: string
            _eb_date_:
              type: string
    DocumentTagging:
      type: object
      properties:
        id:
          type: string
        groupId:
          type: string
        name:
          type: string
        gender:
          type: string
        color:
          type: string
        year:
          type: string
        usage:
          type: string
        type:
          type: string
        size:
          type: string
        price:
          type: number
          format: double
        season:
          type: string
        image:
          type: string
        url:
          type: string
        score:
          type: number
          format: double
        categoryPaths:
          type: array
          items:
            type: string
        categoryIds:
          type: array
          items:
            type: string
        categories:
          type: array
          items:
            type: string
        debugProperties:
          $ref: '#/components/schemas/DebugProperties'
        tagging:
          $ref: '#/components/schemas/TaggingDocument'
        indexMetrics:
          type: object
          properties:
            generatedTime:
              type: string
            readTime:
              type: string
            transformedTime:
              type: string
            deploymentTime:
              type: string
        _jobProperties:
          type: object
          properties:
            jobId:
              type: string
            _eb_date_:
              type: string
    DocumentSkuSearch:
      type: object
      properties:
        id:
          type: string
        groupId:
          type: string
        name:
          type: string
        image:
          type: string
        score:
          type: number
          format: double
    DirectDocument:
      type: object
      properties:
        id:
          type: string
        title_raw:
          type: string
        title:
          type: string
        url:
          type: string
    PromotedAndBannerDocument:
      type: object
      properties:
        id:
          type: string
        title_raw:
          type: string
        title:
          type: string
        url:
          type: string
        image_url:
          type: string
    Facet:
      type: object
      properties:
        facet:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/FacetCount'
    FacetCount:
      type: object
      properties:
        value:
          type: string
        count:
          type: integer
        filter:
          type: string
    Tagging:
      type: object
      properties:
        query:
          type: string
    DebugProperties:
      type: object
      properties:
        sort:
          type: object
          properties:
            criteriaId:
              type: string
            order:
              type: string
            value:
              type: string
            details:
              $ref: '#/components/schemas/DebugDetails'
    DebugDetails:
      type: object
      properties:
        configuration:
          type: object
        organic:
          type: object
    TaggingDocument:
      type: object
      properties:
        click:
          type: string
        add2cart:
          type: string
        checkout:
          type: string
    EmpathizeData:
      type: object
      properties:
        topTrends:
          type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/Empathize'
    Empathize:
      type: object
      properties:
        title_raw:
          type: string
    NextQueriesData:
      type: object
      properties:
        data:
          type: object
          properties:
            nextQueries:
              type: array
              items:
                $ref: '#/components/schemas/NextQuery'
    NextQuery:
      type: object
      properties:
        query:
          type: string
    RelatedTagsData:
      type: object
      properties:
        data:
          type: object
          properties:
            relatedTags:
              type: array
              items:
                $ref: '#/components/schemas/RelatedTag'
    RelatedTag:
      type: object
      properties:
        query:
          type: string
    ContextualizeQueryFields:
      type: object
      properties:
        topAttributes:
          type: array
          items:
            $ref: '#/components/schemas/ContextualizeAttrWeight'
    ContextualizeQueryProducts:
      type: object
      properties:
        topProducts:
          type: array
          items:
            $ref: '#/components/schemas/ContextualizeProductWeight'
    ContextualizeAttrWeight:
      type: object
      properties:
        field:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/ContextualizeProductWeight'
    ContextualizeProductWeight:
      type: object
      properties:
        value:
          type: string
        weight:
          type: integer
    TopClickedCatalog:
      type: object
      properties:
        catalog:
          type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/NoRankingDetailsDocument'
            numFound:
              type: integer
            debug:
              type: object
              properties:
                query:
                  type: object
                internalQuery:
                  type: object
    Fields:
      type: object
      properties:
        attributes:
          type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/Field'
            debug:
              type: object
              properties:
                query:
                  type: object
                internalQuery:
                  type: object
    Field:
      type: object
      properties:
        name:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/FieldValue'
        debugProperties:
          $ref: '#/components/schemas/DebugProperties'
    FieldValue:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        externalId:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/FieldValue'
    SuccessResponse:
      type: object
      properties:
        catalog:
          type: object
          $ref: '#/components/schemas/Catalog'
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
        error:
          type: string
