openapi: 3.0.1
info:
  title: Beacon API
  description: Beacon - Related Tags Management
  version: "0.0"
paths:
  /manage/relatedtags/indexed:
    get:
      operationId: getIndexedRelatedTags
      parameters:
      - name: query
        in: query
        required: true
        schema:
          type: string
      - name: lang
        in: query
        required: false
        schema:
          type: string
      - name: division
        in: query
        required: false
        schema:
          type: string
      - name: store
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: getIndexedRelatedTags 200 response
          content:
            application/json:
              schema:
                type: string
  /manage/relatedtags/edited/{instance}/{lang}:
    get:
      operationId: getEditedTagsForActiveQueryContext
      parameters:
      - name: instance
        in: path
        required: true
        schema:
          type: string
      - name: lang
        in: path
        required: true
        schema:
          type: string
      - name: query
        in: query
        required: true
        schema:
          type: string
      - name: division
        in: query
        required: false
        schema:
          type: string
      - name: store
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: getEditedTagsForActiveQueryContext 200 response
          content:
            application/json:
              schema:
                type: string
  /manage/relatedtags/merged/{instance}/{lang}:
    get:
      summary: "NOTE: this is an exact copy of the get call in RelatedTagsController,\
        \ while this one here is for usage by e.g\n play, using the normal data key\
        \ \"result\", while the public-facing endpoint in RelatedTagsController can\
        \ be\n adjusted to fit different needs (e.g in kroger its A-Layer requirement\
        \ to have \"data\" as data-key. This is\n different in SAAS. This duplication\
        \ is unfortunate."
      description: "NOTE: this is an exact copy of the get call in RelatedTagsController,\
        \ while this one here is for usage by e.g\n play, using the normal data key\
        \ \"result\", while the public-facing endpoint in RelatedTagsController can\
        \ be\n adjusted to fit different needs (e.g in kroger its A-Layer requirement\
        \ to have \"data\" as data-key. This is\n different in SAAS. This duplication\
        \ is unfortunate."
      operationId: getMergedRelatedTags
      parameters:
      - name: instance
        in: path
        required: true
        schema:
          type: string
      - name: lang
        in: path
        required: true
        schema:
          type: string
      - name: query
        in: query
        required: true
        schema:
          type: string
      - name: division
        in: query
        required: false
        schema:
          type: string
      - name: store
        in: query
        required: false
        schema:
          type: string
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
  /manage/relatedtags/{instance}/{lang}:
    get:
      summary: |-
        Right now we only allow one query context per query. We return a list anyways to provide the correct format
         already when we switch to multiple query contexts per query.
      description: |-
        Right now we only allow one query context per query. We return a list anyways to provide the correct format
         already when we switch to multiple query contexts per query.
      operationId: getRelatedTagsContext
      parameters:
      - name: instance
        in: path
        required: true
        schema:
          type: string
      - name: lang
        in: path
        required: true
        schema:
          type: string
      - name: query
        in: query
        required: true
        schema:
          type: string
      - name: division
        in: query
        required: false
        schema:
          type: string
      - name: store
        in: query
        required: false
        schema:
          type: string
      - name: indexedLimit
        in: query
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
  /manage/relatedtags:
    post:
      summary: "Persist a given context state. Note that right now save and update\
        \ are distinguished by whether the passed\n RelatedTagsContextWrapper contains\
        \ an id on top level (used as queryContextId) and/or on rules level (used\
        \ as ids\n for the distinct edits). Meaning: if id passed on top level but\
        \ not on rule level, assumes queryContext is\n updated and all the passed\
        \ elements are saved. After save or update returns the full RelatedTagsContextWrapper\
        \ as\n response. TODO: when partial persistence fails, provide some type of\
        \ \"info\" field providing this information"
      description: "Persist a given context state. Note that right now save and update\
        \ are distinguished by whether the passed\n RelatedTagsContextWrapper contains\
        \ an id on top level (used as queryContextId) and/or on rules level (used\
        \ as ids\n for the distinct edits). Meaning: if id passed on top level but\
        \ not on rule level, assumes queryContext is\n updated and all the passed\
        \ elements are saved. After save or update returns the full RelatedTagsContextWrapper\
        \ as\n response. TODO: when partial persistence fails, provide some type of\
        \ \"info\" field providing this information"
      operationId: saveOrUpdate
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelatedTagsContextWrapper'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
  /manage/relatedtags/overview/{instance}:
    get:
      operationId: getQueryContextWrappersByInstanceAndLang
      parameters:
      - name: instance
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: getQueryContextWrappersByInstanceAndLang 200 response
          content:
            application/json:
              schema:
                type: string
  /manage/relatedtags/{id}:
    get:
      operationId: getQueryContextWrapperByQueryContextId
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getQueryContextWrapperByQueryContextId 200 response
          content:
            application/json:
              schema:
                type: string
  /manage/relatedtags/{queryContextId}:
    delete:
      summary: "Delete the context with the provided id and return the deleted full\
        \ context (RelatedTagsContextWrapper) If does\n not exist, provide error response"
      description: "Delete the context with the provided id and return the deleted\
        \ full context (RelatedTagsContextWrapper) If does\n not exist, provide error\
        \ response"
      operationId: deleteAndReturnContext
      parameters:
      - name: queryContextId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
  /querycontext/{instance}/{lang}:
    get:
      operationId: getByInstanceAndLang
      parameters:
      - name: instance
        in: path
        required: true
        schema:
          type: string
      - name: lang
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: division
        in: query
        required: false
        schema:
          type: string
      - name: store
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: getByInstanceAndLang 200 response
          content:
            application/json:
              schema:
                type: string
  /querycontext/query/{instance}/{lang}:
    get:
      operationId: getByInstanceAndLangAndQuery
      parameters:
      - name: instance
        in: path
        required: true
        schema:
          type: string
      - name: lang
        in: path
        required: true
        schema:
          type: string
      - name: query
        in: query
        required: true
        schema:
          type: string
      - name: division
        in: query
        required: false
        schema:
          type: string
      - name: store
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: getByInstanceAndLangAndQuery 200 response
          content:
            application/json:
              schema:
                type: string
  /querycontext/count/{instance}:
    get:
      operationId: getCountByInstance
      parameters:
      - name: instance
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getCountByInstance 200 response
          content:
            application/json:
              schema:
                type: string
  /querycontext/{contextId}:
    delete:
      operationId: deleteRTEntry
      parameters:
      - name: contextId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: deleteRTEntry 200 response
          content:
            application/json:
              schema:
                type: string
  /querycontext:
    post:
      summary: "curl -XPOST -H 'Content-Type: application/json' --data '\"testInst\"\
        , \"lang\":\n \"testLang\",\"addedContext\": \"\", \"query\": \"testquery\"\
        , \"active\": true' localhost:8080/querycontext?user=awagen"
      description: "curl -XPOST -H 'Content-Type: application/json' --data '\"testInst\"\
        , \"lang\":\n \"testLang\",\"addedContext\": \"\", \"query\": \"testquery\"\
        , \"active\": true' localhost:8080/querycontext?user=awagen"
      operationId: saveOrUpdate
      parameters:
      - name: user
        in: query
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryContext'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
  /rtag_edit/getAll:
    get:
      operationId: getAll
      parameters: []
      responses:
        "200":
          description: getAll 200 response
          content:
            application/json:
              schema:
                type: string
  /rtag_edit/{instance}/{lang}:
    get:
      operationId: find
      parameters:
      - name: instance
        in: path
        required: true
        schema:
          type: string
      - name: lang
        in: path
        required: true
        schema:
          type: string
      - name: query
        in: query
        required: true
        schema:
          type: string
      - name: originalTagQuery
        in: query
        required: false
        schema:
          type: string
      - name: division
        in: query
        required: false
        schema:
          type: string
      - name: store
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: find 200 response
          content:
            application/json:
              schema:
                type: string
  /rtag_edit/find/{instance}/{lang}:
    get:
      operationId: find
      parameters:
      - name: instance
        in: path
        required: true
        schema:
          type: string
      - name: lang
        in: path
        required: true
        schema:
          type: string
      - name: query
        in: query
        required: true
        schema:
          type: string
      - name: tagQuery
        in: query
        required: true
        schema:
          type: string
      - name: division
        in: query
        required: false
        schema:
          type: string
      - name: store
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: find 200 response
          content:
            application/json:
              schema:
                type: string
  /rtag_edit:
    post:
      operationId: saveOrUpdate
      parameters:
      - name: user
        in: query
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelatedTagEdit'
        required: true
      responses:
        "200":
          description: saveOrUpdate 200 response
          content:
            application/json:
              schema:
                type: string
  /rtag_edit/{editID}:
    delete:
      operationId: deleteRTEntry
      parameters:
      - name: editID
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: deleteRTEntry 200 response
          content:
            application/json:
              schema:
                type: string
  /relatedtags/{instance}:
    get:
      summary: |-
        Retrieves the sorted merged data of persisted tags and indexed tags and wraps the List in a
         RelatedTagResponse
      description: |-
        Retrieves the sorted merged data of persisted tags and indexed tags and wraps the List in a
         RelatedTagResponse
      operationId: getMergedRelatedTags
      parameters:
      - name: instance
        in: path
        required: true
        schema:
          type: string
      - name: lang
        in: query
        required: true
        schema:
          type: string
      - name: query
        in: query
        required: true
        schema:
          type: string
      - name: division
        in: query
        required: false
        schema:
          type: string
      - name: store
        in: query
        required: false
        schema:
          type: string
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
  /storecontext/{instance}:
    get:
      operationId: getAll
      parameters:
      - name: instance
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getAll 200 response
          content:
            application/json:
              schema:
                type: string
  /storecontext/{instance}/{lang}:
    get:
      operationId: getAll
      parameters:
      - name: instance
        in: path
        required: true
        schema:
          type: string
      - name: lang
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getAll 200 response
          content:
            application/json:
              schema:
                type: string
  /storecontext/{instance}/{lang}/pivots/:
    get:
      operationId: getWithAddedContext
      parameters:
      - name: instance
        in: path
        required: true
        schema:
          type: string
      - name: lang
        in: path
        required: true
        schema:
          type: string
      - name: division
        in: query
        required: false
        schema:
          type: string
      - name: store
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: getWithAddedContext 200 response
          content:
            application/json:
              schema:
                type: string
  /storecontext:
    post:
      summary: "Sample curl: curl -XPOST -H 'Content-Type: application/json' --data\
        \ '\"testInst\", \"lang\":\n \"testLang\",\"addedContext\": \"\"' localhost:8080/storecontext?user=awagen\
        \ We are not updating, a store context can\n only be created and deleted"
      description: "Sample curl: curl -XPOST -H 'Content-Type: application/json' --data\
        \ '\"testInst\", \"lang\":\n \"testLang\",\"addedContext\": \"\"' localhost:8080/storecontext?user=awagen\
        \ We are not updating, a store context can\n only be created and deleted"
      operationId: save
      parameters:
      - name: user
        in: query
        description: ""
        required: true
        schema:
          type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreContext'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
components:
  schemas:
    RelatedTagsContextWrapper:
      type: object
      properties:
        related-tags:
          $ref: '#/components/schemas/RelatedTagsContextWrapper.RelatedTagsOverview'
        meta-data:
          $ref: '#/components/schemas/RelatedTagsContextWrapper.MetaData'
        context:
          type: object
          additionalProperties:
            type: string
      description: "Communication object for api to store and retrieve full related\
        \ tag contexts Keep fields public final, otherwise\n jackson serializer will\
        \ fail."
    RelatedTagsContextWrapper.RelatedTagsOverview:
      type: object
    RelatedTagsContextWrapper.MetaData:
      type: object
      properties:
        user:
          type: string
        created-on:
          type: string
        updated-on:
          type: string
    QueryContext:
      type: object
      properties:
        store-context-id:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
          nullable: true
        store-context:
          $ref: '#/components/schemas/StoreContext'
        query:
          type: string
        active:
          type: boolean
        created_at:
          $ref: '#/components/schemas/Timestamp'
        updated_at:
          $ref: '#/components/schemas/Timestamp'
        updated_by:
          type: string
    StoreContext:
      type: object
      properties:
        created-at:
          $ref: '#/components/schemas/Timestamp'
        created-by:
          type: string
        id:
          type: integer
          format: int64
          nullable: true
        instance:
          type: string
        lang:
          type: string
        added-context:
          type: string
    Timestamp:
      allOf:
      - $ref: '#/components/schemas/Date'
      - type: object
        properties:
          time:
            type: integer
            format: int64
          nanos:
            type: integer
            format: int32
    RelatedTagEdit:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/RelatedTagEdit.RuleType'
        updated-by:
          type: string
        query-context-id:
          type: integer
          format: int64
        position:
          type: integer
          format: int32
        created-at:
          $ref: '#/components/schemas/Timestamp'
        updated-at:
          $ref: '#/components/schemas/Timestamp'
        id:
          type: integer
          format: int64
          nullable: true
        query-context:
          $ref: '#/components/schemas/QueryContext'
        tag:
          type: string
        query:
          type: string
        original-query:
          type: string
    RelatedTagEdit.RuleType:
      type: string
      enum:
      - ADD
      - EDIT
      - REMOVE