(window.webpackJsonp=window.webpackJsonp||[]).push([[759],{1047:function(n,e){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"global-x-bus.vue.js","sources":["../../../src/components/global-x-bus.vue"],"sourcesContent":["<script lang=\\"ts\\">\\n  import { Component } from \'vue-property-decorator\';\\n  import { Subscription } from \'rxjs\';\\n  import { reduce } from \'../utils/object\';\\n  import { XEventListeners } from \'../x-installer/api/api.types\';\\n  import { NoElement } from \'./no-element\';\\n\\n  /**\\n   * This component helps subscribing to any {@link XEvent} with custom callbacks using Vue\\n   * listeners API.\\n   *\\n   * @public\\n   */\\n  @Component\\n  export default class GlobalXBus extends NoElement {\\n    /**\\n     * Object with the {@link XEvent} listeners.\\n     *\\n     * @internal\\n     */\\n    public $listeners!: XEventListeners;\\n\\n    created(): void {\\n      this.handleXEventSubscription();\\n    }\\n\\n    /**\\n     * Handles a subscription to all the events provided in the listeners with the function that\\n     * will execute the callback. Also unsubscribes on beforeDestroy.\\n     *\\n     * @internal\\n     */\\n    protected handleXEventSubscription(): void {\\n      const subscription = reduce(\\n        this.$listeners,\\n        (subscription, eventName, callback) => {\\n          subscription.add(\\n            this.$x.on(eventName, true).subscribe(({ eventPayload, metadata }) => {\\n              callback(eventPayload as never, metadata);\\n            })\\n          );\\n          return subscription;\\n        },\\n        new Subscription()\\n      );\\n\\n      this.$on(\'hook:beforeDestroy\', () => {\\n        subscription.unsubscribe();\\n      });\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Events\\n\\nThis component emits no own events, but you can subscribe to any X Event using Vue listeners\\n\\n## See it in action\\n\\nThis component does not render anything. Its only responsibility is to facilitate listening to any X\\nEvent by using Vue component listeners.\\n\\n```vue\\n<template>\\n  <GlobalXBus @UserAcceptedAQuery=\\"printQuery\\" />\\n</template>\\n\\n<script>\\n  import { GlobalXBus } from \'@empathyco/x-components\';\\n  export default {\\n    name: \'GlobalXBusTest\',\\n    components: {\\n      GlobalXBus\\n    },\\n    methods: {\\n      printQuery(query, metadata) {\\n        console.log(\'My new query is:\', query);\\n        console.log(\'And has been triggered by this DOM element:\', metadata.target);\\n      }\\n    }\\n  };\\n<\/script>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);