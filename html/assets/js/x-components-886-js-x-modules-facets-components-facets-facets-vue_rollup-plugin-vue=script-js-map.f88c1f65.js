(window.webpackJsonp=window.webpackJsonp||[]).push([[1010],{1279:function(A,e){throw new Error("Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {\"version\":3,\"file\":\"facets.vue_rollup-plugin-vue=script.js\",\"sources\":[\"../../../../../../src/x-modules/facets/components/facets/facets.vue?rollup-plugin-vue=script.ts\"],\"sourcesContent\":[\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nimport { Facet } from '@empathyco/x-types';\\nimport { Component, Prop, Vue } from 'vue-property-decorator';\\nimport { Getter } from '../../../../components/decorators/store.decorators';\\nimport { xComponentMixin } from '../../../../components/x-component.mixin';\\nimport { toKebabCase } from '../../../../utils/string';\\nimport { map, objectFilter } from '../../../../utils/object';\\nimport { Dictionary } from '../../../../utils/types';\\nimport { FiltersByFacet } from '../../store/types';\\nimport { facetsXModule } from '../../x-module';\\n\\n/**\\n * Custom interface to provide a slot name to a Facet.\\n *\\n * @internal\\n */\\ninterface RenderFacet {\\n  slotName: string;\\n  facet: Facet;\\n}\\n\\n/**\\n * This component renders the list of facets stored in the Facets module. Facets can be rendered\\n * differently based on their purpose and this can be achieved using the exposed slots:\\n * - A default and required slot.\\n * - A custom slot for each facet with the facetId as its name. This allows each facet to be\\n * rendered differently based on its needs.\\n *\\n * @public\\n */\\n@Component({\\n  mixins: [xComponentMixin(facetsXModule)]\\n})\\nexport default class Facets extends Vue {\\n  /**\\n   * Animation component that will be used to animate the facets.\\n   *\\n   * @public\\n   */\\n  @Prop({ default: 'ul' })\\n  public animation!: Vue | string;\\n\\n  /**\\n   * Discriminates the facets rendered by this component. It expects a string containing facets\\n   * ids, comma separated. This property will include or exclude facets based on its value.\\n   * The default value is an empty string and the component will render all existing facets.\\n   *\\n   * @remarks\\n   * To behave as a `include`, simply set the facets ids, comma separated:\\n   * `existingFacets=[{ brand: ... }, category: { ... }, color: { ... }, price: { ... }]`\\n   * `renderableFacets=\\\"brand, category\\\"`\\n   *\\n   * The component will render brand and category facets.\\n   *\\n   * On the other hand, to simulate an `exclude` behaviour and exclude a facet from being\\n   * rendered, append a '!' before its id:\\n   * `existingFacets=[{ brand: ... }, category: { ... }, color: { ... }, price: { ... }]`\\n   * `renderableFacets=\\\"!brand,!price\\\"`\\n   *\\n   * The component will render category and color facets.\\n   *\\n   * @public\\n   */\\n  @Prop()\\n  public renderableFacets!: string | undefined;\\n\\n  /**\\n   * Array of selected filters from every facet.\\n   *\\n   * @internal\\n   */\\n  @Getter('facets', 'selectedFiltersByFacet')\\n  public selectedFiltersByFacet!: FiltersByFacet;\\n\\n  /**\\n   * Dictionary of facets in the state.\\n   *\\n   * @internal\\n   */\\n  @Getter('facets', 'facets')\\n  public facets!: Record<Facet['id'], Facet>;\\n\\n  /**\\n   * Transforms a dictionary of Facets including the slot name.\\n   *\\n   * @returns A dictionary of facets with the slot name.\\n   *\\n   * @internal\\n   */\\n  protected get mappedFacets(): Dictionary<RenderFacet> {\\n    return map(this.facetsToRender, (facetId, facet) => ({\\n      slotName: toKebabCase(facetId),\\n      facet\\n    }));\\n  }\\n\\n  /**\\n   * The facets to be rendered after filtering {@link Facets.facets} by\\n   * {@link Facets.renderableFacets} content.\\n   *\\n   * @returns The list of facets to be rendered.\\n   *\\n   * @internal\\n   */\\n  protected get facetsToRender(): Dictionary<Facet> {\\n    if (!this.renderableFacets) {\\n      return this.facets;\\n    } else {\\n      const excludedRegExp = /^!/;\\n      const facetIds: string[] = this.renderableFacets.split(',').map(facetId => facetId.trim());\\n      const included: string[] = [];\\n      const excluded: string[] = [];\\n      facetIds.forEach(facetId => {\\n        if (excludedRegExp.test(facetId)) {\\n          excluded.push(facetId.replace(excludedRegExp, ''));\\n        } else {\\n          included.push(facetId);\\n        }\\n      });\\n\\n      return this.filterFacetsToRender(included, excluded);\\n    }\\n  }\\n\\n  /**\\n   * Indicates if there are facets available to show.\\n   *\\n   * @returns True if there are facets available and false otherwise.\\n   * @internal\\n   */\\n  protected get hasFacets(): boolean {\\n    return !!Object.keys(this.facetsToRender).length;\\n  }\\n\\n  /**\\n   * Filter facets dictionary retrieving those included and/or removing excluded.\\n   *\\n   * @param included - List of facets to render.\\n   * @param excluded - List of not renderable facets.\\n   *\\n   * @returns The filtered list of facets to render.\\n   *\\n   * @internal\\n   */\\n  private filterFacetsToRender(included: string[], excluded: string[]): Dictionary<Facet> {\\n    const hasAnyFacetIncluded = included.length > 0;\\n    return objectFilter(this.facets, facetKey => {\\n      const isIncluded = included.includes(String(facetKey));\\n      const isExcluded = excluded.includes(String(facetKey));\\n\\n      return hasAnyFacetIncluded ? isIncluded && !isExcluded : !isExcluded;\\n    });\\n  }\\n}\\n\"],\"names\":[],\"mappings\":\";;;;;;;;AAkEA;;;;;;;;;AAYA;IAAoC,0BAAG;IAAvC;;KAwHC;IAhEC,sBAAc,gCAAY;;;;;;;;aAA1B;YACE,OAAO,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,UAAC,OAAO,EAAE,KAAK,IAAK,QAAC;gBACnD,QAAQ,EAAE,WAAW,CAAC,OAAO,CAAC;gBAC9B,KAAK,OAAA;aACN,IAAC,CAAC,CAAC;SACL;;;OAAA;IAUD,sBAAc,kCAAc;;;;;;;;;aAA5B;YACE,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;gBAC1B,OAAO,IAAI,CAAC,MAAM,CAAC;aACpB;iBAAM;gBACL,IAAM,gBAAc,GAAG,IAAI,CAAC;gBAC5B,IAAM,QAAQ,GAAa,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,IAAI,EAAE,GAAA,CAAC,CAAC;gBAC3F,IAAM,UAAQ,GAAa,EAAE,CAAC;gBAC9B,IAAM,UAAQ,GAAa,EAAE,CAAC;gBAC9B,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO;oBACtB,IAAI,gBAAc,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;wBAChC,UAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAc,EAAE,EAAE,CAAC,CAAC,CAAC;qBACpD;yBAAM;wBACL,UAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;qBACxB;iBACF,CAAC,CAAC;gBAEH,OAAO,IAAI,CAAC,oBAAoB,CAAC,UAAQ,EAAE,UAAQ,CAAC,CAAC;aACtD;SACF;;;OAAA;IAQD,sBAAc,6BAAS;;;;;;;aAAvB;YACE,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC;SAClD;;;OAAA;;;;;;;;;;;IAYO,qCAAoB,GAA5B,UAA6B,QAAkB,EAAE,QAAkB;QACjE,IAAM,mBAAmB,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;QAChD,OAAO,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,UAAA,QAAQ;YACvC,IAAM,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;YACvD,IAAM,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;YAEvD,OAAO,mBAAmB,GAAG,UAAU,IAAI,CAAC,UAAU,GAAG,CAAC,UAAU,CAAC;SACtE,CAAC,CAAC;KACJ;IAhHD;QADC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;6CACQ;IAwBhC;QADC,IAAI,EAAE;oDACsC;IAQ7C;QADC,MAAM,CAAC,QAAQ,EAAE,wBAAwB,CAAC;0DACI;IAQ/C;QADC,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC;0CACgB;IA/CxB,MAAM;QAH1B,SAAS,CAAC;YACT,MAAM,EAAE,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;SACzC,CAAC;OACmB,MAAM,CAwH1B;IAAD,aAAC;CAAA,CAxHmC,GAAG;;;;\"}")}}]);