(window.webpackJsonp=window.webpackJsonp||[]).push([[689],{1462:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"sort-dropdown.vue.js","sources":["../../../../../src/x-modules/search/components/sort-dropdown.vue"],"sourcesContent":["<template>\\n  <BaseDropdown\\n    @change=\\"emitUserClickedASort\\"\\n    :animation=\\"animation\\"\\n    :items=\\"items\\"\\n    :value=\\"selectedSort\\"\\n    class=\\"x-sort-dropdown\\"\\n    data-test=\\"sort-dropdown\\"\\n  >\\n    <template #toggle=\\"{ isOpen, item }\\">\\n      \x3c!--\\n       @slot Used to render the contents of the dropdown toggle button. If not provided, it uses\\n       the item slot as fallback.\\n       @binding {Sort} item - The sort data to render.\\n       @binding {boolean} isOpen - True if the dropdown is opened, and false if it is closed.\\n      --\x3e\\n      <slot v-bind=\\"{ isOpen, item }\\" name=\\"toggle\\">{{ item }}</slot>\\n    </template>\\n    <template #item=\\"{ item, isHighlighted, isSelected }\\">\\n      \x3c!--\\n        @slot (required) Used to render each one of the items content, and as fallback\\n        for the toggle button content slot if it is not provided.\\n        @binding {Sort} item - Sort to render\\n        @binding {boolean} isHighlighted - True when the item has the focus.\\n        @binding {boolean} isSelected - True when the item is selected.\\n      --\x3e\\n      <slot v-bind=\\"{ item, isHighlighted, isSelected }\\" name=\\"item\\">{{ item }}</slot>\\n    </template>\\n  </BaseDropdown>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { Sort } from \'@empathyco/x-types\';\\n  import Vue from \'vue\';\\n  import { mixins } from \'vue-class-component\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import BaseDropdown from \'../../../components/base-dropdown.vue\';\\n  import { xComponentMixin } from \'../../../components/x-component.mixin\';\\n  import { searchXModule } from \'../x-module\';\\n  import SortMixin from \'./sort.mixin\';\\n\\n  /**\\n   * The `SortDropdown` component allows user to select the search results order. This component\\n   * also allows to change the selected sort programmatically.\\n   *\\n   * @remarks It extends {@link SortMixin}.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    mixins: [xComponentMixin(searchXModule)],\\n    components: { BaseDropdown },\\n    model: {\\n      event: \'change\'\\n    }\\n  })\\n  export default class SortDropdown extends mixins(SortMixin) {\\n    /**\\n     * The transition to use for opening and closing the dropdown.\\n     *\\n     * @public\\n     */\\n    @Prop()\\n    public animation?: string | typeof Vue;\\n    /**\\n     * Emits the events related to the selection of a sort value.\\n     *\\n     * @param sort - The selected sort.\\n     * @internal\\n     */\\n    protected emitUserClickedASort(sort: Sort): void {\\n      this.$x.emit(\'UserClickedASort\', sort, { target: this.$el as HTMLElement });\\n      this.$emit(\'change\', sort);\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Sort Dropdown\\n\\nThe `SortDropdown` component can be used to change the way the search results are ordered.\\n\\nTo do so, the list of valid sort values has to be provided using the `items` prop. These are the\\nvalues that can be received then in the `SearchAdapter`.\\n\\nThe component also optionally accepts the selected sort, which can be set using the `value` prop.\\nThis prop allows changing programmatically the selected sort, as it will be synced with the store\\nimmediately. If this prop is not provided, the first item from the `items` prop will be the one\\nselected by default.\\n\\nThis component also allows customizing both the toggle button and each one of the possible sort\\nvalues. This can be done with the`toggle` and `item` slots.\\n\\n## Examples\\n\\n### Only providing the list of items\\n\\n```vue\\n<template>\\n  <SortDropdown :items=\\"sortValues\\">\\n    <template #toggle=\\"{ item, isOpen }\\">{{ item }} {{ isOpen ? \'ðŸ”¼\' : \'ðŸ”½\' }}</template>\\n    <template #item=\\"{ item, isHighlighted, isSelected }\\">\\n      <span v-if=\\"isSelected\\">âœ…</span>\\n      <span v-if=\\"isHighlighted\\">ðŸŸ¢</span>\\n      {{ item }}\\n    </template>\\n  </SortDropdown>\\n</template>\\n\\n<script>\\n  import { SortDropdown } from \'@empathyco/x-components/search\';\\n\\n  export default {\\n    components: {\\n      SortDropdown\\n    },\\n    data() {\\n      return { sortValues: [\'Relevance\', \'Price asc\', \'Price desc\'] };\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Providing also the selected value\\n\\n```vue\\n<template>\\n  <SortDropdown v-model=\\"selectedSort\\" :items=\\"sortValues\\">\\n    <template #toggle=\\"{ item, isOpen }\\">{{ item }} {{ isOpen ? \'ðŸ”¼\' : \'ðŸ”½\' }}</template>\\n    <template #item=\\"{ item, isHighlighted, isSelected }\\">\\n      <span v-if=\\"isSelected\\">âœ…</span>\\n      <span v-if=\\"isHighlighted\\">ðŸŸ¢</span>\\n      {{ item }}\\n    </template>\\n  </SortDropdown>\\n</template>\\n\\n<script>\\n  import { SortDropdown } from \'@empathyco/x-components/search\';\\n\\n  export default {\\n    components: {\\n      SortDropdown\\n    },\\n    data() {\\n      return {\\n        selectedSort: \'Price asc\',\\n        sortValues: [\'Relevance\', \'Price asc\', \'Price desc\']\\n      };\\n    }\\n  };\\n<\/script>\\n```\\n\\n## Events\\n\\nThis component emits 2 different events:\\n\\n- SelectedSortProvided: To sync the selected sort with the store state value. This event is emitted\\n  as soon as the list of items is received, whenever this list changes if there is no provided\\n  value, and when the provided value changes.\\n- UserClickedASort: As its name suggest, the event is emitted after the user clicks one of the sort\\n  options. This does not mean that the sort has changed, only that the user has clicked it.\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);