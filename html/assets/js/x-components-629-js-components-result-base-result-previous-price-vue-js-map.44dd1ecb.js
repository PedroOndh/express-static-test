(window.webpackJsonp=window.webpackJsonp||[]).push([[916],{1194:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"base-result-previous-price.vue.js","sources":["../../../../src/components/result/base-result-previous-price.vue"],"sourcesContent":["<template>\\n  <div\\n    v-if=\\"result.price.hasDiscount\\"\\n    class=\\"x-result-previous-price\\"\\n    data-test=\\"result-previous-price\\"\\n  >\\n    \x3c!--\\n      @slot Base currency item\\n         @binding {result} result - Result data\\n    --\x3e\\n    <slot :result=\\"result\\">\\n      <BaseCurrency :value=\\"result.price.originalValue\\" :format=\\"format\\" />\\n    </slot>\\n  </div>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { Result } from \'@empathyco/x-types\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import Vue from \'vue\';\\n  import BaseCurrency from \'../currency/base-currency.vue\';\\n\\n  /**\\n   * Component that renders the {@link @empathyco/x-types#Result | result} previous price.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: { BaseCurrency }\\n  })\\n  export default class BaseResultPreviousPrice extends Vue {\\n    /**\\n     * (Required) The {@link @empathyco/x-types#Result | result} information.\\n     *\\n     * @public\\n     */\\n    @Prop({ required: true })\\n    protected result!: Result;\\n\\n    /**\\n     * Format or mask to be defined as string.\\n     * - Use \'i\' to define integer numbers.\\n     * - Use \'d\' to define decimal numbers. You can define the length of the decimal part. If the\\n     * doesn\'t include decimals, it is filled with zeros until reach the length defined with \'d\'s.\\n     * - Integer separator must be defined between the 3rd and the 4th integer \'i\' of a group.\\n     * - Decimal separator must be defined between the last \'i\' and the first \'d\'. It can be more\\n     * than one character.\\n     * - Set whatever you need around the integers and decimals marks.\\n     * - Default mask: \'i.iii,dd\' which returns \'1.345,67\'.\\n     *\\n     * @remarks The number of \'d\', which is the maximum decimal length, MUST match with the length\\n     * of decimals provided from the adapter. Otherwise, when the component truncate the decimal\\n     * part, delete significant digits.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: \'i.iii,dd\' })\\n    protected format!: string;\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\n### Basic example\\n\\nThis component shows the previous price formatted if it has discount. The component has two optional\\nprops. `format` to select the currency format to be applied.\\n\\n```vue\\n<BaseResultPreviousPrice :value=\\"result\\" :format=\\"\'i.iii,ddd â‚¬\'\\" />\\n```\\n\\n### Overriding default slot\\n\\n```vue\\n<BaseResultPreviousPrice :result=\\"result\\">\\n  <span class=\\"custom-base-result-previous-price\\">{{ result.price.originalValue }}</span>\\n</BaseResultPreviousPrice>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);