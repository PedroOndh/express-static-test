(window.webpackJsonp=window.webpackJsonp||[]).push([[1039],{1305:function(e,t){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"sliced-filters.vue.js","sources":["../../../../../../src/x-modules/facets/components/lists/sliced-filters.vue"],"sourcesContent":["<template>\\n  <div class=\\"x-sliced-filters\\" :class=\\"cssClasses\\" data-test=\\"filters-show-more\\">\\n    \x3c!--\\n      @slot (Required) Sliced filters content.\\n        @binding {Filter[]} slicedFilters - Sliced filters..\\n    --\x3e\\n    <slot :slicedFilters=\\"slicedFilters\\" />\\n    <template v-if=\\"showButton\\">\\n      <button\\n        v-if=\\"showMoreFilters\\"\\n        @click=\\"toggleShowMoreFilters\\"\\n        class=\\"x-filter x-sliced-filters__button x-sliced-filters__button--show-more\\"\\n        data-test=\\"sliced-filters-show-more-button\\"\\n      >\\n        \x3c!--\\n          @slot Button show more filters.\\n            @binding {number} difference - The difference between the filters and max to show.\\n        --\x3e\\n        <slot name=\\"show-more\\" :difference=\\"difference\\">\\n          Show\\n          <span data-test=\\"show-more-amount\\">{{ difference }}</span>\\n          more filters\\n        </slot>\\n      </button>\\n      <button\\n        v-else\\n        @click=\\"toggleShowMoreFilters\\"\\n        class=\\"x-filter x-sliced-filters__button x-sliced-filters__button--show-less\\"\\n        data-test=\\"sliced-filters-show-less-button\\"\\n      >\\n        \x3c!--\\n          @slot Button show less filters.\\n            @binding {number} difference - The difference between the filters and max to show.\\n        --\x3e\\n        <slot name=\\"show-less\\" :difference=\\"difference\\">\\n          Show\\n          <span data-test=\\"show-less-amount\\">{{ difference }}</span>\\n          less filters\\n        </slot>\\n      </button>\\n    </template>\\n  </div>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { Filter } from \'@empathyco/x-types\';\\n  import { mixins } from \'vue-class-component\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import { xComponentMixin, XProvide } from \'../../../../components\';\\n  import { VueCSSClasses } from \'../../../../utils\';\\n  import { facetsXModule } from \'../../x-module\';\\n  import FiltersInjectionMixin from \'./filters-injection.mixin\';\\n\\n  /**\\n   * Component that slices a list of filters and returns them using the default scoped slot,\\n   * allowing the user to show the full list of them or slicing them again using the\\n   * show more/less buttons.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    mixins: [xComponentMixin(facetsXModule)]\\n  })\\n  export default class SlicedFilters extends mixins(FiltersInjectionMixin) {\\n    /** The maximum number of filters to show.\\n     *\\n     * @public\\n     * */\\n    @Prop({ required: true })\\n    protected max!: number;\\n\\n    /** For showing the remaining filters. */\\n    public showMoreFilters = true;\\n\\n    /**\\n     * Show the buttons template when length filters is greater than property max.\\n     *\\n     * @returns Boolean if length filters is greater than property max.\\n     * @internal\\n     */\\n    protected get showButton(): boolean {\\n      return this.renderedFilters.length > this.max;\\n    }\\n\\n    /**\\n     * Sliced the array of filters depends on click button show more.\\n     *\\n     * @returns Array of sliced filters or all filters.\\n     * @internal\\n     */\\n    @XProvide(\'filters\')\\n    public get slicedFilters(): Filter[] {\\n      return this.showMoreFilters ? this.renderedFilters.slice(0, this.max) : this.renderedFilters;\\n    }\\n\\n    /**\\n     * The difference between length filters and max to show.\\n     *\\n     * @returns Number of remaining filters to show.\\n     * @internal\\n     */\\n    protected get difference(): number {\\n      return this.renderedFilters.length - this.max;\\n    }\\n\\n    /**\\n     * Show or hide the remaining filters. It also emits a Vue event based on the clicked button.\\n     *\\n     * @param event - The click event.\\n     *\\n     * @internal\\n     */\\n    protected toggleShowMoreFilters(event: MouseEvent): void {\\n      this.showMoreFilters = !this.showMoreFilters;\\n      this.$emit(this.showMoreFilters ? \'click:show-less\' : \'click:show-more\', event);\\n    }\\n\\n    /**\\n     * Adds the dynamic css classes to the component.\\n     *\\n     * @returns The classes to be added to the component.\\n     * @internal\\n     */\\n    protected get cssClasses(): VueCSSClasses {\\n      return {\\n        \'x-sliced-filters--is-sliced\': this.showButton\\n      };\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Example\\n\\nThe sliced filters component, takes a list of filters, and the maximum number of filters to render\\nas prop. Then, it slices the list of filters using the `max` prop, and returns this new filters list\\nusing the default scoped slot.\\n\\nThe user can click the show more button if he wants to see the full list of filters, or the show\\nless button when he wants to reset the filters. This buttons text or icons can be configured via\\nslot too. They receive a `difference` prop which can be useful for writing friendlier messages.\\n\\nThis component is usually integrated with the `Facets` and `Filters` component. It is useful when\\nthere are lots of available filters for a single facet, helping to improve the app performance, as\\nless nodes are rendered.\\n\\n### Important\\n\\nThe component has two ways of receive the filters list, it can be injected by another component or\\nbe send it as a prop. If the component doesnt have a parent component that receive and exposed a\\nfilters list to their children, it is mandatory to send it as prop.\\n\\n### Basic usage\\n\\n```vue\\n<template>\\n  <Facets v-slot=\\"{ facet }\\">\\n    <SlicedFilters :filters=\\"facet.filters\\" :max=\\"4\\">\\n      <template #default=\\"{ slicedFilters }\\">\\n        <Filters :items=\\"slicedFilters\\" v-slot=\\"{ filter }\\">\\n          <SimpleFilter :filter=\\"filter\\" />\\n        </Filters>\\n      </template>\\n      <template #show-more=\\"{ difference }\\">\\n        Show\\n        <span data-test=\\"show-more-amount\\">{{ difference }}</span>\\n        more filters\\n      </template>\\n      <template #show-less=\\"{ difference }\\">\\n        Show\\n        <span data-test=\\"show-less-amount\\">{{ difference }}</span>\\n        less filters\\n      </template>\\n    </SlicedFilters>\\n  </Facets>\\n</template>\\n<script>\\n  import { BaseShowMoreFilters } from \'@empathyco/x-components\';\\n  import { Facets, SimpleFilter, Filters } from \'@empathyco/x-components\';\\n\\n  export default {\\n    components: {\\n      Facets,\\n      BaseShowMoreFilters,\\n      Filters,\\n      SimpleFilter\\n    }\\n  };\\n<\/script>\\n```\\n\\n> **Using injection**: It can receive the filters list by injection. It only works if it has a\\n> parent component that receives and exposes the filters list. Using the injection, It is not\\n> necessary to send the prop to the child components, it has to be send it in the parent component ,\\n> the rest of components will inject this list.\\n\\n```vue\\n<Facets v-slot=\\"{ facet }\\">\\n  <SlicedFilters :filters=\\"facet.filters\\" :max=\\"4\\">\\n      <Filters v-slot=\\"{ filter }\\">\\n        <SimpleFilter :filter=\\"filter\\"/>\\n      </Filters>\\n    <template #show-more=\\"{ difference }\\">Show {{ difference }} more filters</template>\\n    <template #show-less=\\"{ difference }\\">Show {{ difference }} less filters</template>\\n  </SlicedFilters>\\n</Facets>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);