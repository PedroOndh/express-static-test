(window.webpackJsonp=window.webpackJsonp||[]).push([[586],{1369:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"next-query.vue.js","sources":["../../../../../src/x-modules/next-queries/components/next-query.vue"],"sourcesContent":["<template>\\n  <BaseSuggestion\\n    class=\\"x-next-query\\"\\n    :suggestion=\\"suggestion\\"\\n    :suggestionSelectedEvents=\\"events\\"\\n    data-test=\\"next-query\\"\\n    feature=\\"next_query\\"\\n    :class=\\"{ \'x-next-query--is-curated\': shouldHighlightCurated }\\"\\n  >\\n    <template #default=\\"{ suggestion }\\">\\n      \x3c!--\\n        @slot Next Query content\\n            @binding {Suggestion} suggestion - Next Query suggestion data\\n            @binding {boolean} shouldHighlightCurated - True if the curated NQ should be highlighted\\n      --\x3e\\n      <slot v-bind=\\"{ suggestion, shouldHighlightCurated }\\">{{ suggestion.query }}</slot>\\n    </template>\\n  </BaseSuggestion>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { NextQuery as NextQueryModel } from \'@empathyco/x-types\';\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import BaseSuggestion from \'../../../components/suggestions/base-suggestion.vue\';\\n  import { xComponentMixin } from \'../../../components/x-component.mixin\';\\n  import { XEventsTypes } from \'../../../wiring/events.types\';\\n  import { nextQueriesXModule } from \'../x-module\';\\n\\n  /**\\n   * Renders a next query item which receives the suggestion that will be rendered as a prop. It\\n   * exposes a default slot to change the next query content. If the slot is not overridden,\\n   * it will render the suggestion query by default.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: { BaseSuggestion },\\n    mixins: [xComponentMixin(nextQueriesXModule)]\\n  })\\n  export default class NextQuery extends Vue {\\n    /**\\n     * The suggestion to render and use in the default slot.\\n     *\\n     * @public\\n     */\\n    @Prop({ required: true })\\n    protected suggestion!: NextQueryModel;\\n\\n    /**\\n     * Indicates if the curated next query should be highlighted.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: false, type: Boolean })\\n    protected highlightCurated!: boolean;\\n\\n    /**\\n     * Events list which are going to be emitted when a next query is selected.\\n     *\\n     * @returns The {@link XEvent | XEvents} to emit.\\n     * @public\\n     */\\n    protected get events(): Partial<XEventsTypes> {\\n      return {\\n        UserSelectedANextQuery: this.suggestion\\n      };\\n    }\\n\\n    /**\\n     * Checks if the next query is curated and if it should be highlighted.\\n     *\\n     * @returns True if the next query is curated and should be highlighted.\\n     *\\n     * @internal\\n     */\\n    protected get shouldHighlightCurated(): boolean {\\n      return this.highlightCurated && (this.suggestion.isCurated ?? false);\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\nThis components expects just a suggestion as a prop to be rendered. It has a slot to override the\\ncontent. By default, it renders the suggestion query of the next query. It also has an optional\\nprop, `highlightCurated`, to indicate if the curated Next Queries should be differentiated with a\\nCSS class.\\n\\n### Basic Usage\\n\\nUsing default slot:\\n\\n```vue\\n<NextQuery :suggestion=\\"suggestion\\" />\\n```\\n\\n### Overriding default slot.\\n\\nThe default slot allows you to replace the content of the suggestion button.\\n\\n```vue\\n<NextQuery :suggestion=\\"suggestion\\">\\n  <template #default=\\"{ suggestion }\\">\\n    <img class=\\"x-next-query__icon\\" src=\\"./next-query.svg\\" />\\n    <span class=\\"x-next-query__query\\" :aria-label=\\"suggestion.query\\">{{ suggestion.query }}</span>\\n  </template>\\n</NextQuery>\\n```\\n\\n## Dynamic Classes\\n\\n`NextQuery` uses the following dynamic CSS classes so you can style it when is:\\n\\n- Curated: `x-next-query--is-curated`.\\n\\n## Events\\n\\nA list of events that the component will emit:\\n\\n- `UserSelectedANextQuery`: the event is emitted after the user clicks the button. The event payload\\n  is the next query data.\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);