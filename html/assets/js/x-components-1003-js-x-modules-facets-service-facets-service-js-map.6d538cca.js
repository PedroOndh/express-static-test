(window.webpackJsonp=window.webpackJsonp||[]).push([[530],{1318:function(A,e){throw new Error("Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {\"version\":3,\"file\":\"facets.service.js\",\"sources\":[\"../../../../../src/x-modules/facets/service/facets.service.ts\"],\"sourcesContent\":[\"import { Facet, Filter, isFacetFilter } from '@empathyco/x-types';\\nimport { Store } from 'vuex';\\nimport { XPlugin } from '../../../plugins/index';\\nimport { RootXStoreState } from '../../../store/index';\\nimport { arrayToObject, groupItemsBy, isArrayEmpty } from '../../../utils/index';\\nimport { FilterEntityFactory } from '../entities/filter-entity.factory';\\nimport { FilterEntity } from '../entities/types';\\nimport { FacetGroupEntry, FacetsGetters } from '../store/types';\\nimport { FacetsGroup, FacetsService } from './types';\\n\\n/**\\n * Default implementation for the {@link FacetsService}.\\n *\\n * @public\\n */\\nexport class DefaultFacetsService implements FacetsService {\\n  /**\\n   * Global instance of the {@link FacetsService}.\\n   */\\n  public static instance: FacetsService = new DefaultFacetsService();\\n\\n  public constructor(\\n    protected filterEntityFactory: FilterEntityFactory = FilterEntityFactory.instance\\n  ) {}\\n\\n  /**\\n   * The {@link https://vuex.vuejs.org/ | Vuex} store to use in the service.\\n   *\\n   * @returns The store.\\n   * @internal\\n   */\\n  protected get store(): Store<RootXStoreState> {\\n    return XPlugin.store;\\n  }\\n\\n  setFacets(facetsGroup: FacetsGroup): void {\\n    const newFilters = this.updateStore(facetsGroup);\\n    /* Ensures that filters are selected with valid values. For example, you can't set a single\\n     select facet with 2 or more selected filters */\\n    this.updateFiltersSelectedState(newFilters);\\n  }\\n\\n  updateFacets(facetsGroup: FacetsGroup): void {\\n    const selectedFilters = this.getSelectedFilters();\\n    const newFilters = this.updateStore(facetsGroup);\\n    this.updateFiltersSelectedState(newFilters, selectedFilters);\\n  }\\n\\n  clearFilters(facetIds?: Array<Facet['id']>): void {\\n    this.getSelectedFilters()\\n      .filter(filter => !facetIds || (isFacetFilter(filter) && facetIds.includes(filter.facetId)))\\n      .forEach(this.deselect.bind(this));\\n  }\\n\\n  deselect(filter: Filter): void {\\n    this.getFilterEntity(filter).deselect(filter);\\n  }\\n\\n  select(filterOrFilters: Filter | Filter[]): void {\\n    const filters = Array.isArray(filterOrFilters) ? filterOrFilters : [filterOrFilters];\\n    filters.forEach(filter => this.getFilterEntity(filter).select(filter));\\n  }\\n\\n  toggle(filter: Filter): void {\\n    if (filter.selected) {\\n      this.deselect(filter);\\n    } else {\\n      this.select(filter);\\n    }\\n  }\\n\\n  /**\\n   * Creates an entity from a filter DTO.\\n   *\\n   * @param filter - The filter to create an entity from.\\n   * @returns The filter entity.\\n   * @internal\\n   */\\n  protected getFilterEntity(filter: Filter): FilterEntity {\\n    return this.filterEntityFactory.getFilterEntity(this.store, filter);\\n  }\\n\\n  /**\\n   * Sets in the store the Facets, the Filters and the FacetsGroup, without applying any logic\\n   * to the selected state.\\n   *\\n   * @param facetsGroup - The {@link FacetsGroup} to set into the store state.\\n   * @returns An array with the new filters.\\n   * @internal\\n   */\\n  protected updateStore(facetsGroup: FacetsGroup): Filter[] {\\n    this.removeGroupFacets(facetsGroup.id);\\n    this.removeGroupFilters(facetsGroup.id);\\n    facetsGroup.facets.forEach(facet => {\\n      this.setFacetGroup({ facetId: facet.id, groupId: facetsGroup.id });\\n      this.setFacet(facet);\\n    });\\n    const newFilters = facetsGroup.facets.flatMap(facet => facet.filters);\\n    this.setFilters(newFilters);\\n    return newFilters;\\n  }\\n\\n  /**\\n   * Retrieves the selected filters from the store.\\n   *\\n   * @returns The list of selected filters of the store.\\n   * @internal\\n   */\\n  protected getSelectedFilters(): FacetsGetters['selectedFilters'] {\\n    return this.store.getters['x/facets/selectedFilters'];\\n  }\\n\\n  /**\\n   * Changes the filters selection state to match the store.\\n   *\\n   * @param newFilters - The list of filters to save.\\n   * @param previousFilters - (Optional) The list of old filters, used to set the `newFilters`\\n   * selected state.\\n   */\\n  protected updateFiltersSelectedState(newFilters: Filter[], previousFilters?: Filter[]): void {\\n    if (!isArrayEmpty(newFilters)) {\\n      const newStateFiltersMap = arrayToObject(previousFilters ?? newFilters, 'id');\\n      newFilters.forEach(filter => {\\n        const filterEntity = this.getFilterEntity(filter);\\n        if (newStateFiltersMap[filter.id]?.selected) {\\n          filterEntity.select(filter);\\n        } else {\\n          filterEntity.deselect(filter);\\n        }\\n      });\\n    }\\n  }\\n\\n  /**\\n   * Removes the filters that belong to the given group.\\n   *\\n   * @param groupId - The id of the group from whom remove the filters that are in the store.\\n   *\\n   * @returns The removed filters.\\n   *\\n   * @internal\\n   */\\n  protected removeGroupFilters(groupId: FacetsGroup['id']): Filter[] {\\n    const filtersToRemove =\\n      groupItemsBy(Object.values(this.store.state.x.facets.filters), filter =>\\n        isFacetFilter(filter)\\n          ? this.store.state.x.facets.groups[filter.facetId]\\n          : '__unknown-group__'\\n      )[groupId] ?? [];\\n    this.removeFilters(filtersToRemove);\\n    return filtersToRemove;\\n  }\\n  /**\\n   * Removes the facets that belong to the given group.\\n   *\\n   * @param groupId - The id of the group from whom remove the facets that are in the store.\\n   * @returns The removed facets.\\n   * @internal\\n   */\\n  protected removeGroupFacets(groupId: FacetsGroup['id']): Omit<Facet, 'filters'>[] {\\n    const facetsToRemove = Object.values(this.store.state.x.facets.facets).filter(\\n      facet => this.store.state.x.facets.groups[facet.id] === groupId\\n    );\\n    facetsToRemove.forEach(this.removeFacet.bind(this));\\n    return facetsToRemove;\\n  }\\n\\n  /**\\n   * Sets the group that a facet belongs to.\\n   *\\n   * @param facetGroup - The id of the facet, and the group it belongs to.\\n   * @internal\\n   */\\n  protected setFacetGroup(facetGroup: FacetGroupEntry): void {\\n    this.store.commit('x/facets/setFacetGroup', facetGroup);\\n  }\\n\\n  /**\\n   * Sets the Facet to the store facets record.\\n   *\\n   * @param facet - The facet to store.\\n   *\\n   * @internal\\n   */\\n  protected setFacet({ filters, ...restFacet }: Facet): void {\\n    this.store.commit('x/facets/setFacet', restFacet);\\n  }\\n\\n  /**\\n   * Removes a facet from the store.\\n   *\\n   * @param facet - The facet to remove.\\n   * @internal\\n   */\\n  protected removeFacet(facet: Omit<Facet, 'filters'>): void {\\n    this.store.commit('x/facets/removeFacet', facet);\\n  }\\n\\n  /**\\n   * Saves a list of filters to the store without any state change logic applied.\\n   *\\n   * @param filters - The filters to save.\\n   * @internal\\n   */\\n  protected setFilters(filters: Filter[]): void {\\n    this.store.commit('x/facets/setFilters', filters);\\n  }\\n\\n  /**\\n   * Removes a list of filters from the store.\\n   *\\n   * @param filters - The filters to remove.\\n   * @internal\\n   */\\n  protected removeFilters(filters: Filter[]): void {\\n    this.store.commit('x/facets/removeFilters', filters);\\n  }\\n}\\n\"],\"names\":[],\"mappings\":\"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\"}")}}]);