(window.webpackJsonp=window.webpackJsonp||[]).push([[555],{1020:function(A,e){throw new Error("Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {\"version\":3,\"file\":\"base-dropdown.vue_rollup-plugin-vue=script.js\",\"sources\":[\"../../../src/components/base-dropdown.vue?rollup-plugin-vue=script.ts\"],\"sourcesContent\":[\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nimport { Identifiable } from '@empathyco/x-types';\\nimport { Component, Prop, Watch } from 'vue-property-decorator';\\nimport Vue from 'vue';\\nimport { normalizeString } from '../utils/normalize';\\nimport { isInRange } from '../utils/number';\\nimport { debounce } from '../utils/debounce';\\nimport { VueCSSClasses } from '../utils/types';\\nimport { NoElement } from './no-element';\\n\\ntype DropdownItem = string | number | Identifiable;\\n\\n/**\\n * Dropdown component that mimics a Select element behavior, but with the option\\n * to customize the toggle button and each item contents.\\n *\\n * @public\\n */\\n@Component({\\n  components: {\\n    NoElement\\n  },\\n  model: {\\n    event: 'change'\\n  }\\n})\\nexport default class BaseDropdown extends Vue {\\n  /**\\n   * List of items to display.\\n   *\\n   * @public\\n   */\\n  @Prop({ required: true })\\n  public items!: DropdownItem[];\\n\\n  /**\\n   * The selected item.\\n   *\\n   * @public\\n   */\\n  @Prop({ required: true })\\n  public value!: DropdownItem | null;\\n\\n  /**\\n   * Animation component to use for expanding the dropdown. This is a single element animation,\\n   * so only `<transition>` components are allowed.\\n   *\\n   * @public\\n   */\\n  @Prop({ default: 'NoElement' })\\n  public animation!: typeof Vue | string;\\n\\n  /**\\n   * Time to wait without receiving any keystroke before resetting the items search query.\\n   *\\n   * @public\\n   */\\n  @Prop({ default: 1000 })\\n  public searchTimeoutMs!: number;\\n\\n  public $refs!: {\\n    /** Array containing the dropdown list buttons HTMLElements. */\\n    itemButtons: HTMLButtonElement[];\\n  };\\n\\n  /**\\n   * Property to track whether the dropdown is expanded and displaying the full\\n   * list of items, or closed.\\n   *\\n   * @internal\\n   */\\n  protected isOpen = false;\\n\\n  /**\\n   * Index of the element that has the focus in the list. -1 means no element has focus.\\n   *\\n   * @internal\\n   */\\n  protected highlightedItemIndex = -1;\\n\\n  /**\\n   * String to search for the first element that starts with it.\\n   *\\n   * @internal\\n   */\\n  protected searchBuffer = '';\\n\\n  /**\\n   * Resets the search buffer after a certain time has passed.\\n   *\\n   * @internal\\n   */\\n  protected restartResetSearchTimeout!: () => void;\\n\\n  /**\\n   * Dynamic CSS classes to add to the dropdown root element.\\n   *\\n   * @returns An object containing the CSS classes to add to the dropdown root element.\\n   * @internal\\n   */\\n  protected get dropdownCSSClasses(): VueCSSClasses {\\n    return {\\n      'x-dropdown--is-open': this.isOpen\\n    };\\n  }\\n\\n  /**\\n   * Dynamic CSS classes to add to each one of the items.\\n   *\\n   * @returns An object containing the CSS classes to add to each item.\\n   * @internal\\n   */\\n  protected get itemsCSSClasses(): VueCSSClasses[] {\\n    return this.items.map((item, index) => {\\n      return {\\n        'x-dropdown__item--is-selected': this.value === item,\\n        'x-dropdown__item--is-highlighted': this.highlightedItemIndex === index\\n      };\\n    });\\n  }\\n\\n  /**\\n   * If the dropdown is destroyed before removing the document listeners, it ensures that they\\n   * are removed too.\\n   *\\n   * @internal\\n   */\\n  protected beforeDestroy(): void {\\n    this.removeDocumentCloseListeners();\\n  }\\n\\n  /**\\n   * Opens the dropdown.\\n   *\\n   * @internal\\n   */\\n  protected open(): void {\\n    this.isOpen = true;\\n  }\\n\\n  /**\\n   * Closes the dropdown.\\n   *\\n   * @internal\\n   */\\n  protected close(): void {\\n    this.isOpen = false;\\n  }\\n\\n  /**\\n   * If the dropdown is opened it closes it. If it is closed it opens it.\\n   *\\n   * @internal\\n   */\\n  protected toggle(): void {\\n    this.isOpen = !this.isOpen;\\n  }\\n\\n  /**\\n   * Emits the event that the selected item has changed.\\n   *\\n   * @param item - The new selected item.\\n   * @internal\\n   */\\n  protected emitSelectedItemChanged(item: DropdownItem): void {\\n    this.$emit('change', item);\\n    this.close();\\n  }\\n\\n  /**\\n   * Highlights the item after the one that is currently highlighted.\\n   *\\n   * @internal\\n   */\\n  protected highlightNextItem(): void {\\n    this.open();\\n    this.highlightedItemIndex = (this.highlightedItemIndex + 1) % this.items.length;\\n  }\\n\\n  /**\\n   * Highlights the item before the one that is currently highlighted.\\n   *\\n   * @internal\\n   */\\n  protected highlightPreviousItem(): void {\\n    this.open();\\n    this.highlightedItemIndex =\\n      this.highlightedItemIndex > 0 ? this.highlightedItemIndex - 1 : this.items.length - 1;\\n  }\\n\\n  /**\\n   * Highlights the first of the provided items.\\n   *\\n   * @internal\\n   */\\n  protected highlightFirstItem(): void {\\n    this.highlightedItemIndex = 0;\\n  }\\n\\n  /**\\n   * Highlights the last of the provided items.\\n   *\\n   * @internal\\n   */\\n  protected highlightLastItem(): void {\\n    this.highlightedItemIndex = this.items.length - 1;\\n  }\\n\\n  /**\\n   * Updates the variable that is used to search in the filters.\\n   *\\n   * @param event - The event coming from the user typing.\\n   * @internal\\n   */\\n  protected updateSearchBuffer(event: KeyboardEvent): void {\\n    if (/^\\\\w$/.test(event.key)) {\\n      const key = event.key;\\n      this.searchBuffer += key;\\n      this.restartResetSearchTimeout();\\n    }\\n  }\\n\\n  /**\\n   * Highlights the item that matches the search buffer. To do so it checks the list buttons\\n   * text content. It highlights items folowing this priority:\\n   * - If an element is already highlighted, it starts searching from that element.\\n   * - If no element is found starting from the previously highlighted, it returns the first one.\\n   * - If no element is found matching the search query it highlights the first element.\\n   *\\n   * @param search - The search string to find in the HTML.\\n   * @internal\\n   */\\n  @Watch('searchBuffer')\\n  protected highlightMatchingItem(search: string): void {\\n    if (search) {\\n      const normalizedSearch = normalizeString(search);\\n      const matchingIndices = this.$refs.itemButtons.reduce<number[]>(\\n        (matchingIndices, button, index) => {\\n          const safeButtonWordCharacters = button.textContent!.replace(/[^\\\\w]/g, '');\\n          const normalizedButtonText = normalizeString(safeButtonWordCharacters);\\n          if (normalizedButtonText.startsWith(normalizedSearch)) {\\n            matchingIndices.push(index);\\n          }\\n          return matchingIndices;\\n        },\\n        []\\n      );\\n      this.highlightedItemIndex =\\n        // First matching item starting to search from the current highlighted element\\n        matchingIndices.find(index => index >= this.highlightedItemIndex) ??\\n        // First matching item\\n        matchingIndices[0] ??\\n        // First item\\n        0;\\n    }\\n  }\\n\\n  /**\\n   * Resets the search buffer.\\n   *\\n   * @internal\\n   */\\n  protected resetSearch(): void {\\n    this.searchBuffer = '';\\n  }\\n\\n  /** Updates the debounced function to reset the search.\\n   *\\n   * @param searchTimeoutMs - The new milliseconds that have to pass without typing before\\n   * resetting the search.\\n   * @internal\\n   */\\n  @Watch('searchTimeoutMs', { immediate: true })\\n  protected updateSearchTimeout(searchTimeoutMs: number): void {\\n    // eslint-disable-next-line @typescript-eslint/unbound-method\\n    this.restartResetSearchTimeout = debounce(this.resetSearch, searchTimeoutMs);\\n  }\\n\\n  /**\\n   * Focuses the DOM element which matches the `highlightedItemIndex`.\\n   *\\n   * @param highlightedItemIndex - The index of the HTML element to focus.\\n   * @internal\\n   */\\n  @Watch('highlightedItemIndex', { immediate: true })\\n  protected focusHighlightedItem(highlightedItemIndex: number): void {\\n    this.$nextTick(() => {\\n      if (this.$refs.itemButtons && isInRange(highlightedItemIndex, [0, this.items.length - 1])) {\\n        const newItem = this.$refs.itemButtons[this.highlightedItemIndex];\\n        newItem.focus();\\n      }\\n    });\\n  }\\n\\n  /**\\n   * When the dropdown is open it sets the focused element to the one that is selected.\\n   *\\n   * @param isOpen - True if the dropdown is open, false otherwise.\\n   * @internal\\n   */\\n  @Watch('isOpen')\\n  protected updateHighlightedItem(isOpen: boolean): void {\\n    if (isOpen) {\\n      this.highlightedItemIndex = this.value === null ? 0 : this.items.indexOf(this.value);\\n    } else {\\n      this.highlightedItemIndex = -1;\\n    }\\n  }\\n\\n  /**\\n   * Adds and removes listeners to close the dropdown when it loses the focus.\\n   *\\n   * @param isOpen - True if the dropdown is open, false otherwise.\\n   * @internal\\n   */\\n  @Watch('isOpen')\\n  protected syncCloseListeners(isOpen: boolean): void {\\n    /*\\n     * Because there is an issue with Firefox in macOS and Safari that doesn't focus the target\\n     * element of the `mousedown` events, the `focusout` event `relatedTarget` property can't be\\n     * used to detect whether or not the user has blurred the dropdown. The hack here is to use\\n     * document listeners that have the side effect of losing the focus.\\n     */\\n    if (isOpen) {\\n      this.addDocumentCloseListeners();\\n    } else {\\n      this.removeDocumentCloseListeners();\\n    }\\n  }\\n\\n  /**\\n   * Adds listeners to the document element to detect if the focus has moved out from the\\n   * dropdown.\\n   *\\n   * @internal\\n   */\\n  protected addDocumentCloseListeners(): void {\\n    /* eslint-disable @typescript-eslint/unbound-method */\\n    document.addEventListener('mousedown', this.closeIfEventIsOutOfDropdown);\\n    document.addEventListener('touchstart', this.closeIfEventIsOutOfDropdown);\\n    document.addEventListener('focusin', this.closeIfEventIsOutOfDropdown);\\n    /* eslint-enable @typescript-eslint/unbound-method */\\n  }\\n\\n  /**\\n   * Removes the listeners of the document element to detect if the focus has moved out from the\\n   * dropdown.\\n   *\\n   * @internal\\n   */\\n  protected removeDocumentCloseListeners(): void {\\n    /* eslint-disable @typescript-eslint/unbound-method */\\n    document.removeEventListener('mousedown', this.closeIfEventIsOutOfDropdown);\\n    document.removeEventListener('touchstart', this.closeIfEventIsOutOfDropdown);\\n    document.removeEventListener('focusin', this.closeIfEventIsOutOfDropdown);\\n    /* eslint-enable @typescript-eslint/unbound-method */\\n  }\\n\\n  /**\\n   * Closes the dropdown if the passed event has happened on an element out of the dropdown.\\n   *\\n   * @param event - The event to check if it has happen out of the dropdown component.\\n   */\\n  protected closeIfEventIsOutOfDropdown(event: MouseEvent | TouchEvent | FocusEvent): void {\\n    if (!this.$el.contains(event.target as HTMLElement)) {\\n      this.close();\\n    }\\n  }\\n}\\n\"],\"names\":[],\"mappings\":\"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\"}")}}]);