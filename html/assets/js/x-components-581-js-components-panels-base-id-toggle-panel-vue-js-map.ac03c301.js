(window.webpackJsonp=window.webpackJsonp||[]).push([[898],{1178:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"base-id-toggle-panel.vue.js","sources":["../../../../src/components/panels/base-id-toggle-panel.vue"],"sourcesContent":["<template>\\n  <BaseTogglePanel :open=\\"isOpen\\" :animation=\\"animation\\">\\n    \x3c!-- @slot (Required) Default content --\x3e\\n    <slot />\\n  </BaseTogglePanel>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import Vue from \'vue\';\\n  import { Component, Prop, Watch } from \'vue-property-decorator\';\\n  import { XOn } from \'../decorators/bus.decorators\';\\n  import { NoElement } from \'../no-element\';\\n  import BaseTogglePanel from \'./base-toggle-panel.vue\';\\n\\n  /**\\n   * Simple panel that could receives its initial open state via prop, if not the default is opens\\n   * and a required prop, named `panelId`, which are responsible of rendering default slot\\n   * inside a configurable transition.\\n   *\\n   * It reacts to `UserClickedPanelToggleButton` event, when their payload matches the component\'s\\n   * \'panelId\' prop, to handle its open/close state.\\n   *\\n   * The default slot offers the possibility to customise the modal content.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: {\\n      BaseTogglePanel\\n    }\\n  })\\n  export default class BaseIdTogglePanel extends Vue {\\n    /**\\n     * Shows the panel open at the beginning or not, depending on its state.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: true })\\n    protected startOpen!: boolean;\\n\\n    /** Whether the toggle panel is open or not. */\\n    protected isOpen = this.startOpen;\\n\\n    /**\\n     * Animation component that will be used to animate the panel content.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: () => NoElement })\\n    protected animation!: Vue;\\n\\n    /**\\n     * The id to link with the BaseIdTogglePanelButton.\\n     * Both components must use the same Id to make them interact.\\n     */\\n    @Prop({ required: true })\\n    public panelId!: string;\\n\\n    /**\\n     * Method to subscribe to the {@link XEventsTypes.UserClickedPanelToggleButton} event.\\n     *\\n     * @param panelId - The payload of the {@link XEventsTypes.UserClickedPanelToggleButton} event.\\n     *\\n     * @public\\n     */\\n    @XOn(\'UserClickedPanelToggleButton\')\\n    togglePanel(panelId: string): void {\\n      if (this.panelId === panelId) {\\n        this.isOpen = !this.isOpen;\\n      }\\n    }\\n\\n    /**\\n     * Emits the {@link XEventsTypes.TogglePanelStateChanged} event, when the internal state\\n     * changes.\\n     *\\n     * @remarks This event is necessary to link the state with the {@link BaseIdTogglePanelButton}\\n     * component.\\n     * @public\\n     */\\n    @Watch(\'isOpen\', { immediate: true })\\n    emitStateEvent(): void {\\n      this.$x.emit(\'TogglePanelStateChanged\', this.isOpen, {\\n        id: this.panelId,\\n        target: this.$el as HTMLElement\\n      });\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\n### Basic usage\\n\\nUsing default slot:\\n\\n```vue\\n<template>\\n  <div>\\n    <BaseIdTogglePanelButton panelId=\\"myToggle\\">\\n      <img src=\\"./open-button-icon.svg\\" />\\n      <span>Toggle Aside</span>\\n    </BaseIdTogglePanelButton>\\n    <BaseIdTogglePanel :startOpen=\\"true\\" :animation=\\"animation\\" panelId=\\"myToggle\\">\\n      <div class=\\"x-text\\">My toggle</div>\\n    </BaseIdTogglePanel>\\n  </div>\\n</template>\\n\\n<script>\\n  import {\\n    BaseIdTogglePanel,\\n    BaseIdTogglePanelButton,\\n    CollapseFromTop\\n  } from \'@empathyco/x-components\';\\n\\n  export default {\\n    components: {\\n      BaseIdTogglePanel,\\n      BaseIdTogglePanelButton,\\n      CollapseFromTop\\n    },\\n    data: function () {\\n      return {\\n        animation: CollapseFromTop\\n      };\\n    }\\n  };\\n<\/script>\\n```\\n\\n## Events\\n\\nA list of events that the component will watch:\\n\\n- `UserClickedPanelToggleButton`: the event is emitted after the user clicks the button. The event\\n  payload is the id of the panelId that is going to be toggled.\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);