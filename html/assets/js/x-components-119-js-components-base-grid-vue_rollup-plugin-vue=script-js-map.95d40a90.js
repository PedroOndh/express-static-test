(window.webpackJsonp=window.webpackJsonp||[]).push([[599],{1024:function(n,e){throw new Error("Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {\"version\":3,\"file\":\"base-grid.vue_rollup-plugin-vue=script.js\",\"sources\":[\"../../../src/components/base-grid.vue?rollup-plugin-vue=script.ts\"],\"sourcesContent\":[\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nimport Vue from 'vue';\\nimport { Component, Prop } from 'vue-property-decorator';\\nimport { toKebabCase } from '../utils/string';\\nimport { ListItem, VueCSSClasses } from '../utils/types';\\nimport { XInject } from './decorators/injection.decorators';\\nimport { LIST_ITEMS_KEY } from './decorators/injection.consts';\\n\\n/**\\n * The type returned by the gridItems function. Basically it's a list of items with its CSS\\n * classes and a slotName.\\n *\\n * @internal\\n */\\ninterface GridItem {\\n  slotName: string;\\n  item: ListItem;\\n  cssClass: VueCSSClasses;\\n}\\n\\n/**\\n * Grid component that is able to render different items based on their modelName value. In order\\n * to achieve this, it exposes a scopedSlot for each different modelName. In case the items used\\n * do not have modelName property, the default slot is used instead. It has a required property:\\n * the `items` to render; and an optional one: the number `columns` the grid is divided in. If the\\n * number of columns is not specified, the grid automatically fills the rows with as many columns\\n * as it can fit.\\n *\\n * @public\\n */\\n@Component({})\\nexport default class BaseGrid extends Vue {\\n  /**\\n   * Animation component that will be used to animate the base grid.\\n   *\\n   * @public\\n   */\\n  @Prop({ default: 'ul' })\\n  protected animation!: Vue | string;\\n\\n  /**\\n   * Number of columns the grid is divided into. By default, its value is 0, setting the grid\\n   * columns mode to auto-fill.\\n   *\\n   * @public\\n   */\\n  @Prop({ default: 0 })\\n  protected columns!: number;\\n\\n  /**\\n   * The list of items to be rendered.\\n   *\\n   * @remarks The items must have an id property.\\n   *\\n   * @public\\n   */\\n  @Prop()\\n  protected items!: ListItem[];\\n\\n  /**\\n   * It injects {@link ListItem} provided by an ancestor.\\n   *\\n   * @internal\\n   */\\n  @XInject(LIST_ITEMS_KEY)\\n  public injectedListItems!: ListItem[];\\n\\n  /**\\n   * It returns the items passed as props or the injected ones.\\n   *\\n   * @returns List of grid items.\\n   *\\n   * @public\\n   */\\n  protected get computedItems(): ListItem[] {\\n    return (\\n      this.items ??\\n      this.injectedListItems ??\\n      //TODO: add here logger\\n      //eslint-disable-next-line no-console\\n      console.warn('It is necessary to pass a prop or inject the list of filters')\\n    );\\n  }\\n\\n  /**\\n   * CSS class based on the column property value so items inside the grid can fill different\\n   * amount of columns or rows based on how many columns the grid is divided into.\\n   *\\n   * @returns CSS class with the column property value.\\n   *\\n   * @internal\\n   */\\n  protected get cssClasses(): VueCSSClasses {\\n    return this.columns ? `x-grid--cols-${this.columns}` : 'x-grid--cols-auto';\\n  }\\n\\n  /**\\n   * CSSStyleDeclaration object specifying the number of columns the grid is divided into based on\\n   * the column property value.\\n   *\\n   * @returns A CSSStyleDeclaration to use as the style attribute.\\n   *\\n   * @internal\\n   */\\n  protected get style(): Partial<CSSStyleDeclaration> {\\n    return {\\n      gridTemplateColumns: this.columns\\n        ? `repeat(${this.columns}, minmax(0, 1fr))`\\n        : 'repeat(auto-fill, minmax(var(--x-size-min-width-grid-item, 150px), auto))'\\n    };\\n  }\\n\\n  /**\\n   * Maps the item to an object containing: the `item`, its `CSS class` and its slot name.\\n   *\\n   * @returns An array of objects containing the item and its CSS class.\\n   *\\n   * @internal\\n   */\\n  protected get gridItems(): GridItem[] {\\n    return this.computedItems.map(item => {\\n      const slotName = toKebabCase(item.modelName);\\n      return {\\n        slotName,\\n        item,\\n        cssClass: `x-base-grid__${slotName}`\\n      };\\n    });\\n  }\\n}\\n\"],\"names\":[],\"mappings\":\";;;;;;;AAmDA;;;;;;;;;;AAWA;IAAsC,4BAAG;IAAzC;;KAkGC;IAvDC,sBAAc,mCAAa;;;;;;;;aAA3B;;YACE,QACE,MAAA,MAAA,IAAI,CAAC,KAAK,mCACV,IAAI,CAAC,iBAAiB;;;YAGtB,OAAO,CAAC,IAAI,CAAC,8DAA8D,CAAC,EAC5E;SACH;;;OAAA;IAUD,sBAAc,gCAAU;;;;;;;;;aAAxB;YACE,OAAO,IAAI,CAAC,OAAO,GAAG,kBAAgB,IAAI,CAAC,OAAS,GAAG,mBAAmB,CAAC;SAC5E;;;OAAA;IAUD,sBAAc,2BAAK;;;;;;;;;aAAnB;YACE,OAAO;gBACL,mBAAmB,EAAE,IAAI,CAAC,OAAO;sBAC7B,YAAU,IAAI,CAAC,OAAO,sBAAmB;sBACzC,2EAA2E;aAChF,CAAC;SACH;;;OAAA;IASD,sBAAc,+BAAS;;;;;;;;aAAvB;YACE,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAA,IAAI;gBAChC,IAAM,QAAQ,GAAG,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC7C,OAAO;oBACL,QAAQ,UAAA;oBACR,IAAI,MAAA;oBACJ,QAAQ,EAAE,kBAAgB,QAAU;iBACrC,CAAC;aACH,CAAC,CAAC;SACJ;;;OAAA;IA1FD;QADC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;+CACW;IASnC;QADC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;6CACM;IAU3B;QADC,IAAI,EAAE;2CACsB;IAQ7B;QADC,OAAO,CAAC,cAAc,CAAC;uDACc;IAlCnB,QAAQ;QAD5B,SAAS,CAAC,EAAE,CAAC;OACO,QAAQ,CAkG5B;IAAD,eAAC;CAAA,CAlGqC,GAAG;;;;\"}")}}]);