(window.webpackJsonp=window.webpackJsonp||[]).push([[568],{1352:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"identifier-results.vue.js","sources":["../../../../../src/x-modules/identifier-results/components/identifier-results.vue"],"sourcesContent":["<template>\\n  <component\\n    :is=\\"animation\\"\\n    v-if=\\"identifierResults.length\\"\\n    tag=\\"ul\\"\\n    class=\\"x-list x-identifier-results\\"\\n  >\\n    <li\\n      v-for=\\"identifierResult in identifierResults\\"\\n      :key=\\"identifierResult.id\\"\\n      class=\\"x-identifier-results__item\\"\\n      data-test=\\"identifier-results-item\\"\\n    >\\n      \x3c!--\\n        @slot (Required) Identifier results item content\\n            @binding {Result} identifierResult - Identifier Result data\\n      --\x3e\\n      <slot :identifierResult=\\"identifierResult\\" />\\n    </li>\\n  </component>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { Result } from \'@empathyco/x-types\';\\n  import { Component, Prop, Provide } from \'vue-property-decorator\';\\n  import Vue from \'vue\';\\n  import { State } from \'../../../components/decorators/store.decorators\';\\n  import { xComponentMixin } from \'../../../components/x-component.mixin\';\\n  import { PropsWithType } from \'../../../utils/types\';\\n  import { XEventsTypes } from \'../../../wiring/events.types\';\\n  import { identifierResultsXModule } from \'../x-module\';\\n\\n  /**\\n   * Paints the list of identifier results stored in the state. Each identifier result should be\\n   * represented by a {@link IdentifierResult | identifier result component} besides any\\n   * other component.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    mixins: [xComponentMixin(identifierResultsXModule)]\\n  })\\n  export default class IdentifierResults extends Vue {\\n    /**\\n     * Animation component that will be used to animate the identifier results.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: \'ul\' })\\n    protected animation!: Vue;\\n\\n    /**\\n     * The module\'s list of identifier results.\\n     *\\n     * @public\\n     */\\n    @State(\'identifierResults\', \'identifierResults\')\\n    public identifierResults!: Result[];\\n\\n    /**\\n     * The additional events to be emitted by the mandatory {@link BaseResultLink} component.\\n     *\\n     * @public\\n     */\\n    @Provide()\\n    protected resultClickExtraEvents: PropsWithType<XEventsTypes, Result>[] = [\\n      \'UserClickedAIdentifierResult\'\\n    ];\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\n### Adding a IdentifierResult component within a BaseResultLink\\n\\nA IdentifierResult **must** be used inside the IdentifierResults component. In the example below the\\nBaseResultLink is used as a wrapper and its default slot is filled with the IdentifierResult\\ncomponent.\\n\\n```vue\\n<IdentifierResults :animation=\\"fadeAndSlide\\">\\n  <template #default=\\"{ identifierResult }\\">\\n    <BaseResultLink :result=\\"identifierResult\\">\\n      <template #default=\\"{ result }\\">\\n        <IdentifierResult :result=\\"result\\"/>\\n      </template>\\n    </BaseResultLink>\\n  </template>\\n</IdentifierResults>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);