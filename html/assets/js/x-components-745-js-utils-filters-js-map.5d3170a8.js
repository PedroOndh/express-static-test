(window.webpackJsonp=window.webpackJsonp||[]).push([[958],{1232:function(A,e){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"filters.js","sources":["../../../src/utils/filters.ts"],"sourcesContent":["import { Filter } from \'@empathyco/x-types\';\\n\\n/**\\n * Compares if two lists contains the same filters.\\n *\\n * @param someFilters - A list of filters to compare.\\n * @param anotherFilters - Another list of filters to compare.\\n *\\n * @returns True if the two lists of filters are equal, which means that they have the same\\n * filters. The position of the filter does not matter for this check.\\n *\\n * @public\\n */\\nexport function areFiltersDifferent(someFilters: Filter[], anotherFilters: Filter[]): boolean {\\n  return (\\n    someFilters.length !== anotherFilters.length ||\\n    someFilters.some(filter => !anotherFilters.find(otherFilter => otherFilter.id === filter.id))\\n  );\\n}\\n\\n/**\\n * Helper method which creates the filter entity from the filter ir of the url.\\n *\\n * @param filterIds - List of filter ids from the url.\\n *\\n * @returns A list of  filters.\\n *\\n * @public\\n */\\nexport function createRawFilters(filterIds: Array<Filter[\'id\']>): Filter[] {\\n  return filterIds.map(filterId => {\\n    return {\\n      id: filterId,\\n      modelName: \'RawFilter\',\\n      selected: true\\n    };\\n  });\\n}\\n"],"names":[],"mappings":"AAEA;;;;;;;;;;;SAWgB,mBAAmB,CAAC,WAAqB,EAAE,cAAwB;IACjF,QACE,WAAW,CAAC,MAAM,KAAK,cAAc,CAAC,MAAM;QAC5C,WAAW,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,CAAC,cAAc,CAAC,IAAI,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,EAAE,KAAK,MAAM,CAAC,EAAE,GAAA,CAAC,GAAA,CAAC,EAC7F;AACJ,CAAC;AAED;;;;;;;;;SASgB,gBAAgB,CAAC,SAA8B;IAC7D,OAAO,SAAS,CAAC,GAAG,CAAC,UAAA,QAAQ;QAC3B,OAAO;YACL,EAAE,EAAE,QAAQ;YACZ,SAAS,EAAE,WAAW;YACtB,QAAQ,EAAE,IAAI;SACf,CAAC;KACH,CAAC,CAAC;AACL;;;;"}')}}]);