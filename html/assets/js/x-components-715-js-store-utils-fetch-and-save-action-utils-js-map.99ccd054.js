(window.webpackJsonp=window.webpackJsonp||[]).push([[947],{1222:function(e,n){throw new Error("Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {\"version\":3,\"file\":\"fetch-and-save-action.utils.js\",\"sources\":[\"../../../../src/store/utils/fetch-and-save-action.utils.ts\"],\"sourcesContent\":[\"import { cancellablePromise, CancelSymbol } from '../../utils/cancellable-promise';\\nimport { XActionContext } from '../actions.types';\\nimport { StatusMutations, StatusState } from './status-store.utils';\\n\\n/**\\n * Utility to create an action that requests and save some data asynchronously, with the\\n * option to cancel the request at any moment. This factory provides with the standard flow\\n * for requesting, cancelling, handling errors for a module, while also taking care of its status.\\n *\\n * @public\\n * @returns An action to fetch and save some data, and an action to cancel the last request.\\n */\\nexport function createFetchAndSaveActions<\\n  // Using `object` type to ensure no actions/getters can be used.\\n  // eslint-disable-next-line @typescript-eslint/ban-types\\n  Context extends XActionContext<StatusState, object, StatusMutations, object>,\\n  Request,\\n  Response\\n>({\\n  fetch,\\n  onSuccess,\\n  onError,\\n  onCancel\\n}: FetchAndSaveHooks<Context, Request, Response>): FetchAndSaveActions<Context, Request> {\\n  let cancelPreviousRequest: undefined | (() => void);\\n\\n  /**\\n   * Called asynchronously after a response has been received.\\n   *\\n   * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the\\n   * actions, provided by Vuex.\\n   * @param response - The fetch response.\\n   * @returns A Promise that resolves after handling the response.\\n   */\\n  function handleResponse(context: Context, response: Response): Promise<void> {\\n    return Promise.resolve(onSuccess(context, response)).then(() => {\\n      context.commit('setStatus', 'success');\\n    });\\n  }\\n\\n  /**\\n   * Called immediately after a request has been cancelled.\\n   *\\n   * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the\\n   * actions, provided by Vuex.\\n   */\\n  function handleCancel(context: Context): void {\\n    cancelPreviousRequest = undefined;\\n    context.commit('setStatus', 'success');\\n    onCancel?.();\\n  }\\n\\n  /**\\n   * Called asynchronously whenever an error happens in the fetch and save flow.\\n   *\\n   * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the\\n   * actions, provided by Vuex.\\n   * @param error - The error information.\\n   */\\n  function handleError(context: Context, error: unknown): void {\\n    if (error !== CancelSymbol) {\\n      context.commit('setStatus', 'error');\\n      onError?.(error);\\n    }\\n  }\\n\\n  // eslint-disable-next-line\\n  /** @see FetchAndSaveActions.fetchAndSave */\\n  function fetchAndSave(context: Context, request: Request): Promise<void> {\\n    cancelPrevious();\\n    context.commit('setStatus', 'loading');\\n    const { promise, cancel } = cancellablePromise(fetch(context, request), () => {\\n      handleCancel(context);\\n    });\\n\\n    cancelPreviousRequest = cancel;\\n    return promise\\n      .then(response => handleResponse(context, response))\\n      .catch(error => handleError(context, error));\\n  }\\n\\n  // eslint-disable-next-line\\n  /** @see FetchAndSaveActions.cancelPrevious */\\n  function cancelPrevious(): void {\\n    cancelPreviousRequest?.();\\n  }\\n\\n  return {\\n    fetchAndSave,\\n    cancelPrevious\\n  };\\n}\\n\\n/**\\n * Options to use with the {@link createFetchAndSaveActions} factory.\\n *\\n * @public\\n */\\nexport interface FetchAndSaveHooks<\\n  // Using `object` type to ensure no actions/getters can be used.\\n  // eslint-disable-next-line @typescript-eslint/ban-types\\n  Context extends XActionContext<StatusState, object, StatusMutations, object>,\\n  Request,\\n  Response\\n> {\\n  /**\\n   * Retrieves and returns asynchronously some data.\\n   *\\n   * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the\\n   * actions, provided by Vuex.\\n   * @param request - The request object used for fetching.\\n   * @returns A Promise resolved with the response of the fetch request.\\n   */\\n  fetch(context: Context, request: Request): Promise<Response>;\\n  /**\\n   * Asynchronous callback executed when the {@link FetchAndSaveHooks.fetch} is\\n   * performed successfully.\\n   *\\n   * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the\\n   * actions, provided by Vuex.\\n   * @param response - The data returned by {@link FetchAndSaveHooks.fetch}.\\n   */\\n  onSuccess(context: Context, response: Response): void;\\n  /**\\n   * Asynchronous callback executed when either the {@link FetchAndSaveHooks.fetch}\\n   * or {@link FetchAndSaveHooks.onSuccess} methods fail.\\n   *\\n   * @param error - The error that triggered this callback.\\n   */\\n  onError?(error: unknown): void;\\n  /**\\n   * Synchronous callback executed when the request is cancelled. This can happen mainly for two\\n   * reasons:\\n   * - The {@link FetchAndSaveActions.cancelPrevious} action is dispatched.\\n   * - A new {@link FetchAndSaveActions.fetchAndSave} is dispatched before the previous one was\\n   * resolved.\\n   */\\n  onCancel?(): void;\\n}\\n\\n/**\\n * Actions returned from the {@link createFetchAndSaveActions}.\\n *\\n * @public\\n */\\nexport interface FetchAndSaveActions<\\n  // Using `object` type to ensure no actions/getters can be used.\\n  // eslint-disable-next-line @typescript-eslint/ban-types\\n  Context extends XActionContext<StatusState, object, StatusMutations, object>,\\n  Request\\n> {\\n  /**\\n   * Action that requests and saves the response.\\n   *\\n   * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the\\n   * actions, provided by Vuex.\\n   * @returns A promise that resolves after saving the response.\\n   */\\n  fetchAndSave: (context: Context, request: Request) => void | Promise<void>;\\n  /**\\n   * Action that cancels the previous request call if it stills in progress.\\n   */\\n  cancelPrevious: () => void;\\n}\\n\"],\"names\":[],\"mappings\":\";;AAIA;;;;;;;;SAQgB,yBAAyB,CAMvC,EAK8C;QAJ9C,KAAK,WAAA,EACL,SAAS,eAAA,EACT,OAAO,aAAA,EACP,QAAQ,cAAA;IAER,IAAI,qBAA+C,CAAC;;;;;;;;;IAUpD,SAAS,cAAc,CAAC,OAAgB,EAAE,QAAkB;QAC1D,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC;YACxD,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;SACxC,CAAC,CAAC;KACJ;;;;;;;IAQD,SAAS,YAAY,CAAC,OAAgB;QACpC,qBAAqB,GAAG,SAAS,CAAC;QAClC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;QACvC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,EAAI,CAAC;KACd;;;;;;;;IASD,SAAS,WAAW,CAAC,OAAgB,EAAE,KAAc;QACnD,IAAI,KAAK,KAAK,YAAY,EAAE;YAC1B,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YACrC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAG,KAAK,CAAC,CAAC;SAClB;KACF;;;IAID,SAAS,YAAY,CAAC,OAAgB,EAAE,OAAgB;QACtD,cAAc,EAAE,CAAC;QACjB,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;QACjC,IAAA,KAAsB,kBAAkB,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE;YACtE,YAAY,CAAC,OAAO,CAAC,CAAC;SACvB,CAAC,EAFM,OAAO,aAAA,EAAE,MAAM,YAErB,CAAC;QAEH,qBAAqB,GAAG,MAAM,CAAC;QAC/B,OAAO,OAAO;aACX,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,cAAc,CAAC,OAAO,EAAE,QAAQ,CAAC,GAAA,CAAC;aACnD,KAAK,CAAC,UAAA,KAAK,IAAI,OAAA,WAAW,CAAC,OAAO,EAAE,KAAK,CAAC,GAAA,CAAC,CAAC;KAChD;;;IAID,SAAS,cAAc;QACrB,qBAAqB,aAArB,qBAAqB,uBAArB,qBAAqB,EAAI,CAAC;KAC3B;IAED,OAAO;QACL,YAAY,cAAA;QACZ,cAAc,gBAAA;KACf,CAAC;AACJ;;;;\"}")}}]);