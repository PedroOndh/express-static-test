(window.webpackJsonp=window.webpackJsonp||[]).push([[1032],{1299:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"filters-search.vue.js","sources":["../../../../../../src/x-modules/facets/components/lists/filters-search.vue"],"sourcesContent":["<template>\\n  <div class=\\"x-list x-filters-search\\" :class=\\"cssClasses\\" data-test=\\"filters-search\\">\\n    \x3c!--\\n      @slot Search content. It is the content which triggers the filters sifting.\\n        @binding {string} query - The query to search in filters.\\n        @binding {Function} setQuery - The function to set the query. The query is passed as\\n        parameter.\\n        @binding {Function} clearQuery - The function to clear the query.\\n    --\x3e\\n    <slot name=\\"search\\" v-bind=\\"{ query, setQuery, clearQuery }\\">\\n      <input\\n        @input=\\"setQuery($event.target.value)\\"\\n        :value=\\"query\\"\\n        type=\\"search\\"\\n        class=\\"x-input x-filters-search__input\\"\\n        data-test=\\"filters-search-input\\"\\n      />\\n    </slot>\\n    \x3c!--\\n      @slot (Required) Sifted filters content.\\n        @binding {Filter[]} siftedFilters - Sifted filters data.\\n    --\x3e\\n    <slot :siftedFilters=\\"siftedFilters\\"></slot>\\n  </div>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { Filter, isBooleanFilter } from \'@empathyco/x-types\';\\n  import { mixins } from \'vue-class-component\';\\n  import { Component, Prop, Watch } from \'vue-property-decorator\';\\n  import { xComponentMixin, XProvide } from \'../../../../components\';\\n  import { debounce } from \'../../../../utils/debounce\';\\n  import { normalizeString } from \'../../../../utils/normalize\';\\n  import { DebouncedFunction, VueCSSClasses } from \'../../../../utils/types\';\\n  import { facetsXModule } from \'../../x-module\';\\n  import FiltersInjectionMixin from \'./filters-injection.mixin\';\\n\\n  /**\\n   * Renders the filters sifted with the input query.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    mixins: [xComponentMixin(facetsXModule)]\\n  })\\n  export default class FiltersSearch extends mixins(FiltersInjectionMixin) {\\n    /** The debounce time for applying the filter sifting. */\\n    @Prop({ default: 200 })\\n    protected debounceInMs!: number;\\n\\n    protected query = \'\';\\n    protected setQueryDebounced!: DebouncedFunction<[string]>;\\n\\n    /**\\n     * Set the debounce function for setting the query debounced.\\n     *\\n     * @internal\\n     */\\n    @Watch(\'debounceInMs\', { immediate: true })\\n    updateSetQueryDebounced(): void {\\n      this.setQueryDebounced = debounce(query => {\\n        this.query = query;\\n      }, this.debounceInMs);\\n    }\\n\\n    /**\\n     * Sift the array of filters which matches with the query.\\n     *\\n     * @returns Array of sifted filters.\\n     * @internal\\n     */\\n    @XProvide(\'filters\')\\n    public get siftedFilters(): Filter[] {\\n      const normalizedQuery = normalizeString(this.query);\\n      return this.renderedFilters.filter(\\n        filter => isBooleanFilter(filter) && normalizeString(filter.label).includes(normalizedQuery)\\n      );\\n    }\\n\\n    /**\\n     * Adds the dynamic css classes to the component.\\n     *\\n     * @returns The class to be added to the component.\\n     * @internal\\n     */\\n    protected get cssClasses(): VueCSSClasses {\\n      return {\\n        \'x-filters-search--is-sifted\': !!this.query\\n      };\\n    }\\n\\n    /**\\n     * Set the query through the debounced function.\\n     *\\n     * @param query - The query to sift filters.\\n     * @internal\\n     */\\n    protected setQuery(query: string): void {\\n      this.setQueryDebounced(query);\\n    }\\n\\n    /**\\n     * Clear the query.\\n     *\\n     * @internal\\n     */\\n    protected clearQuery(): void {\\n      this.query = \'\';\\n    }\\n  }\\n<\/script>\\n\\n<style lang=\\"scss\\" scoped>\\n  .x-filters-search__input {\\n    &::-ms-clear {\\n      display: none;\\n      width: 0;\\n      height: 0;\\n    }\\n\\n    &::-ms-reveal {\\n      display: none;\\n      width: 0;\\n      height: 0;\\n    }\\n\\n    &::-webkit-search-decoration,\\n    &::-webkit-search-cancel-button,\\n    &::-webkit-search-results-button,\\n    &::-webkit-search-results-decoration {\\n      display: none;\\n    }\\n  }\\n</style>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\nIt renders an input and a list of filters passed as prop or being injected. The list of filters can\\nbe sifted with the query typed in the input. This component has also a debounce prop to set the time\\nin milliseconds to apply the filters search. Moreover, it has two scoped slots. The first one for\\ncustomize the search triggering with three slot props; the query, a function to set the query by\\nsifting and a third one for cleaning the query. The second scoped slot is required and it is for\\ndisplaying the list of filters sifted. It has a slot prop with these filters sifted.\\n\\n### Important\\n\\nThe component has two ways of receive the filters list, it can be injected by another component or\\nbe send it as a prop. If the component doesnt have a parent component that receive and exposed a\\nfilters list to their children, it is mandatory to send it as prop.\\n\\n### Basic usage\\n\\nUsing default and required slot:\\n\\n```vue\\n<FiltersSearch :filters=\\"filters\\" v-slot=\\"{ siftedFilters }\\">\\n  <ul v-for=\\"filter in siftedFilters\\">\\n    <li :key=\\"filter.id\\">{{ filter.label }}</li>\\n  </ul>\\n</FiltersSearch>\\n```\\n\\nSetting debounce time:\\n\\n```vue\\n<FiltersSearch :filters=\\"filters\\" :debounceInMs=\\"500\\" v-slot=\\"{ siftedFilters }\\">\\n  <ul v-for=\\"filter in siftedFilters\\">\\n    <li :key=\\"filter.id\\">{{ filter.label }}</li>\\n  </ul>\\n</FiltersSearch>\\n```\\n\\nReplacing search triggering:\\n\\n```vue\\n<FiltersSearch :filters=\\"filters\\">\\n  <template #search=\\"{ query, setQuery, clearQuery }\\">\\n    <input\\n      @input=\\"setQuery($event.target.value)\\"\\n      :value=\\"query\\"\\n      class=\\"x-input x-filters-search__input\\"/>\\n    <button @click=\\"clearQuery\\">X</button>\\n  </template>\\n  <template #default=\\"{ siftedFilters }\\">\\n    <ul v-for=\\"filter in siftedFilters\\">\\n      <li :key=\\"filter.id\\">{{ filter.label }}</li>\\n    </ul>\\n  </template>\\n</FiltersSearch>\\n```\\n\\n> **Using injection**: It can receive the filters list by injection. It only works if it has a\\n> parent component that receives and exposes the filters list. Using the injection, It is not\\n> necessary to send the prop to the child components, it has to be send it in the parent component,\\n> the rest of components will inject this list.\\n\\n```vue\\n<Facets v-slot=\\"{ facet }\\">\\n  <SlicedFilters :filters=\\"facet.filters\\" :max=\\"8\\">\\n    <FiltersSearch >\\n        <Filters v-slot=\\"{ filter }\\">\\n          <SimpleFilter :filter=\\"filter\\" data-test=\\"brand-filter\\" />\\n        </Filters>\\n    </FiltersSearch>\\n  </SlicedFilters>\\n</Facets>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);