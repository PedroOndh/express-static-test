(window.webpackJsonp=window.webpackJsonp||[]).push([[996],{1266:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"renderless-extra-param.vue.js","sources":["../../../../../src/x-modules/extra-params/components/renderless-extra-param.vue"],"sourcesContent":["<template>\\n  <NoElement>\\n    <slot v-bind=\\"{ value, updateValue }\\"></slot>\\n  </NoElement>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import { NoElement, State, xComponentMixin } from \'../../../components\';\\n  import { Dictionary } from \'../../../utils\';\\n  import { extraParamsXModule } from \'../x-module\';\\n\\n  /**\\n   * It emits a {@link ExtraParamsXEvents.UserChangedExtraParams} when the `updateValue`\\n   * is called.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    mixins: [xComponentMixin(extraParamsXModule)],\\n    components: {\\n      NoElement\\n    }\\n  })\\n  export default class RenderlessExtraParam extends Vue {\\n    /**\\n     * The extra param\'s name.\\n     *\\n     * @public\\n     */\\n    @Prop({ required: true })\\n    public name!: string;\\n\\n    /**\\n     * A dictionary with the extra params in the store state.\\n     *\\n     * @public\\n     */\\n    @State(\'extraParams\', \'params\')\\n    public stateParams!: Dictionary<unknown>;\\n\\n    /**\\n     * It returns the value of the extra param from the store.\\n     *\\n     * @returns - The value from the store.\\n     *\\n     * @internal\\n     */\\n    protected get value(): unknown {\\n      return this.stateParams[this.name];\\n    }\\n\\n    /**\\n     * It sets the new value to the store.\\n     *\\n     * @param newValue - The new value of the extra param.\\n     *\\n     * @internal\\n     */\\n    protected updateValue(newValue: unknown): void {\\n      this.$x.emit(\'UserChangedExtraParams\', { [this.name]: newValue });\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\nRenders default slot content. It binds to the default slot the name of the extra parameter and the\\ndefault value of it.\\n\\n### Basic usage\\n\\n```vue\\n<template>\\n  <RenderlessExtraParam #default=\\"{ value, updateValue }\\" name=\\"store\\">\\n    <BaseDropdown @change=\\"updateValue\\" :value=\\"value\\" :items=\\"items\\" />\\n  </RenderlessExtraParam>\\n</template>\\n\\n<script>\\n  import { RenderlessExtraParams } from \'@empathyco/x-components/extra-params\';\\n  import { BaseDropdown } from \'@empathyco/x-components\';\\n\\n  export default {\\n    name: \'RenderlessExtraParamsDemo\',\\n    components: {\\n      RenderlessExtraParams,\\n      BaseDropdown\\n    },\\n    props: [\'name\'],\\n    data() {\\n      return {\\n        items: [\'spain\', \'portugal\']\\n      };\\n    }\\n  };\\n<\/script>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);