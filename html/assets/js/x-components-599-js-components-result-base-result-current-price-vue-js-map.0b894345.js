(window.webpackJsonp=window.webpackJsonp||[]).push([[905],{1184:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"base-result-current-price.vue.js","sources":["../../../../src/components/result/base-result-current-price.vue"],"sourcesContent":["<template>\\n  <div :class=\\"dynamicClasses\\" class=\\"x-result-current-price\\" data-test=\\"result-current-price\\">\\n    \x3c!--\\n      @slot Base currency item\\n          @binding {result} result - Result data\\n    --\x3e\\n    <slot :result=\\"result\\">\\n      <BaseCurrency :value=\\"result.price.value\\" :format=\\"format\\" />\\n    </slot>\\n  </div>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { Result } from \'@empathyco/x-types\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import Vue from \'vue\';\\n  import { VueCSSClasses } from \'../../utils/types\';\\n  import BaseCurrency from \'../currency/base-currency.vue\';\\n\\n  /**\\n   * Component that renders the {@link @empathyco/x-types#Result | result} current price\\n   * that may or may not be on sale.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: { BaseCurrency }\\n  })\\n  export default class BaseResultCurrentPrice extends Vue {\\n    /**\\n     * (Required) The {@link @empathyco/x-types#Result | result} information.\\n     *\\n     * @public\\n     */\\n    @Prop({ required: true })\\n    protected result!: Result;\\n\\n    /**\\n     * Format or mask to be defined as string.\\n     * - Use \'i\' to define integer numbers.\\n     * - Use \'d\' to define decimal numbers. You can define the length of the decimal part. If the\\n     * doesn\'t include decimals, it is filled with zeros until reach the length defined with \'d\'s.\\n     * - Integer separator must be defined between the 3rd and the 4th integer \'i\' of a group.\\n     * - Decimal separator must be defined between the last \'i\' and the first \'d\'. It can be more\\n     * than one character.\\n     * - Set whatever you need around the integers and decimals marks.\\n     * - Default mask: \'i.iii,dd\' which returns \'1.345,67\'.\\n     *\\n     * @remarks The number of \'d\', which is the maximum decimal length, MUST match with the length\\n     * of decimals provided from the adapter. Otherwise, when the component truncate the decimal\\n     * part, delete significant digits.\\n     *\\n     * @public\\n     */\\n    @Prop()\\n    protected format?: string;\\n\\n    /**\\n     * Dynamic CSS classes to add to the root element of this component.\\n     *\\n     * @returns A booleans dictionary where each key is the class name to add, and the boolean value\\n     * tells if it should be added or not.\\n     * @internal\\n     */\\n    protected get dynamicClasses(): VueCSSClasses {\\n      return {\\n        \'x-result-current-price--on-sale\': this.result.price.hasDiscount\\n      };\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\n### Basic example\\n\\nThis component shows the current price formatted. You can provide the `format` by property or let\\nthe `BaseCurrency` component use an injected one.\\n\\n```vue\\n<BaseResultCurrentPrice :value=\\"result\\" :format=\\"\'i.iii,ddd â‚¬\'\\" />\\n```\\n\\n### Overriding default slot\\n\\n```vue\\n<BaseResultCurrentPrice :result=\\"result\\">\\n  <span class=\\"custom-base-result-current-price\\">{{ result.price.value }}</span>\\n</BaseResultCurrentPrice>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);