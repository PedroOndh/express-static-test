(window.webpackJsonp=window.webpackJsonp||[]).push([[615],{1395:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"query-suggestions.vue.js","sources":["../../../../../src/x-modules/query-suggestions/components/query-suggestions.vue"],"sourcesContent":["<template>\\n  <BaseSuggestions\\n    :suggestions=\\"suggestions\\"\\n    class=\\"x-query-suggestions\\"\\n    data-test=\\"query-suggestions\\"\\n    :animation=\\"animation\\"\\n    :maxItemsToRender=\\"maxItemsToRender\\"\\n  >\\n    <template #default=\\"{ suggestion, index }\\">\\n      \x3c!--\\n        @slot Custom component that replaces the `QuerySuggestion` component\\n            @binding {Suggestion} suggestion - Query Suggestion data\\n            @binding {number} index - Query Suggestion index\\n      --\x3e\\n      <slot name=\\"suggestion\\" v-bind=\\"{ suggestion, index }\\">\\n        <QuerySuggestion :suggestion=\\"suggestion\\" class=\\"x-query-suggestions__suggestion\\">\\n          <template #default=\\"{ queryHTML }\\">\\n            \x3c!-- eslint-disable max-len --\x3e\\n            \x3c!--\\n              @slot Custom content that replaces the `QuerySuggestion` default content\\n                  @binding {Suggestion} suggestion - Query Suggestion data\\n                  @binding {string} queryHTML - Suggestion’s query with the matching part wrapped in a HTML span tag\\n                  @binding {number} index - Query Suggestion index\\n            --\x3e\\n            \x3c!-- eslint-enable max-len --\x3e\\n            <slot name=\\"suggestion-content\\" v-bind=\\"{ suggestion, index, queryHTML }\\" />\\n          </template>\\n        </QuerySuggestion>\\n      </slot>\\n    </template>\\n  </BaseSuggestions>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { Suggestion } from \'@empathyco/x-types\';\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import BaseSuggestions from \'../../../components/suggestions/base-suggestions.vue\';\\n  import { Getter } from \'../../../components/decorators/store.decorators\';\\n  import { xComponentMixin } from \'../../../components/x-component.mixin\';\\n  import { querySuggestionsXModule } from \'../x-module\';\\n  import QuerySuggestion from \'./query-suggestion.vue\';\\n\\n  /**\\n   * This component renders a list of possible search queries to select from as a query is entered\\n   * in the input field. By default, this is a list of\\n   * [`QuerySuggestion`](./x-components.query-suggestion.md) components.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: { BaseSuggestions, QuerySuggestion },\\n    mixins: [xComponentMixin(querySuggestionsXModule)]\\n  })\\n  export default class QuerySuggestions extends Vue {\\n    /**\\n     * The module\'s list of suggestions.\\n     *\\n     * @internal\\n     */\\n    @Getter(\'querySuggestions\', \'querySuggestions\')\\n    public suggestions!: Suggestion[];\\n\\n    /**\\n     * Animation component for `QuerySuggestions`.\\n     *\\n     * @public\\n     */\\n    @Prop()\\n    protected animation!: Vue;\\n\\n    /**\\n     * Number of query suggestions to be rendered.\\n     *\\n     * @public\\n     */\\n    @Prop()\\n    protected maxItemsToRender?: number;\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## See it in action\\n\\n\x3c!-- prettier-ignore-start --\x3e\\n:::warning Backend microservice required\\nTo use this component, the <b>Empathize</b> microservice must be\\nimplemented.\\n:::\\n\x3c!-- prettier-ignore-end --\x3e\\n\\nIn this example, a list of query suggestions is displayed. See how the suggestions change as you\\ntype “puzzle”. If you click on a suggestion, the search term in the search input is updated and the\\nquery suggestions are changed to reflect the new search term.\\n\\n_Type “puzzle” or another toy in the input field to try it out!_\\n\\n```vue\\n<template>\\n  <div>\\n    <SearchInput />\\n    <QuerySuggestions />\\n  </div>\\n</template>\\n\\n<script>\\n  import { QuerySuggestions } from \'@empathyco/x-components/query-suggestions\';\\n  import { SearchInput } from \'@empathyco/x-components/search-box\';\\n\\n  export default {\\n    name: \'QuerySuggestionsDemo\',\\n    components: {\\n      QuerySuggestions,\\n      SearchInput\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Play with props\\n\\nIn this example, an `StaggeredFadeAndSlide` animation component has been passed as prop, so that the\\nmatching query suggestions are shuffled with a slight delay as more letters of the term are typed.\\n\\n_Type “puzzle” or another toy in the input field to try it out!_\\n\\n```vue\\n<template>\\n  <div>\\n    <SearchInput />\\n    <QuerySuggestions animation=\\"StaggeredFadeAndSlide\\" />\\n  </div>\\n</template>\\n\\n<script>\\n  import { QuerySuggestions } from \'@empathyco/x-components/query-suggestions\';\\n  import { SearchInput } from \'@empathyco/x-components/search-box\';\\n  import { StaggeredFadeAndSlide } from \'@empathyco/x-components\';\\n\\n  // Register the animation as a global component\\n  Vue.component(\'StaggeredFadeAndSlide\', StaggeredFadeAndSlide);\\n  export default {\\n    name: \'QuerySuggestionsDemo\',\\n    components: {\\n      QuerySuggestions,\\n      SearchInput\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Play with suggestion slot\\n\\nHere, the `suggestion` binding property passes the suggestion data.\\n\\n_Type “puzzle” or another toy in the input field to try it out!_\\n\\n```vue\\n<template>\\n  <div>\\n    <SearchInput />\\n    <QuerySuggestions #suggestion=\\"{ suggestion }\\">\\n      <QuerySuggestion :suggestion=\\"suggestion\\" #default=\\"{ queryHTML }\\">\\n        <span v-html=\\"queryHTML\\" />\\n      </QuerySuggestion>\\n    </QuerySuggestions>\\n  </div>\\n</template>\\n\\n<script>\\n  import { QuerySuggestion, QuerySuggestions } from \'@empathyco/x-components/query-suggestions\';\\n\\n  export default {\\n    name: \'QuerySuggestionsDemo\',\\n    components: {\\n      QuerySuggestion,\\n      QuerySuggestions\\n    }\\n  };\\n<\/script>\\n```\\n\\n\x3c!-- prettier-ignore-start --\x3e\\n::: danger\\nIf you\'re not using the [`QuerySuggestion`](./query-suggestion.md) component, then\\nyou must implement the `UserAcceptedAQuery` and `UserSelectedAQuerySuggestion` events in\\n`QuerySuggestions`.\\n\\n```vue\\n<template>\\n  <div>\\n    <SearchInput />\\n    <QuerySuggestions #suggestion=\\"{ suggestion }\\">\\n      <button @click=\\"emitSuggestionClickedEvents($event, suggestion)\\">\\n        {{ suggestion.query }}\\n      </button>\\n    </QuerySuggestions>\\n  </div>\\n</template>\\n\\n<script>\\n  import { QuerySuggestions } from \'@empathyco/x-components/query-suggestions\';\\n  import { SearchInput } from \'@empathyco/x-components/search-box\';\\n\\n  export default {\\n    name: \'QuerySuggestionsDemo\',\\n    components: {\\n      SearchInput,\\n      QuerySuggestions\\n    },\\n    methods: {\\n      emitSuggestionClickedEvents(event, suggestion) {\\n        this.$x.emit(\'UserAcceptedAQuery\', suggestion.query, {\\n          target: event.target\\n        });\\n        this.$x.emit(\'UserSelectedASuggestion\', suggestion, {\\n          target: event.target\\n        });\\n        this.$x.emit(\'UserSelectedAQuerySuggestion\', suggestion, {\\n          target: event.target\\n        });\\n      }\\n    }\\n  };\\n<\/script>\\n```\\n\\n:::\\n\x3c!-- prettier-ignore-end --\x3e\\n\\n### Play with suggestion-content slot\\n\\nIn this example, the `suggestion` and `queryHTML` bindings have been passed in the\\n`suggestion-content` slot to paint the resulting query suggestions in blue.\\n\\n_Type “puzzle” or another toy in the input field to try it out!_\\n\\n```vue\\n<template>\\n  <div>\\n    <SearchInput />\\n    <QuerySuggestions #suggestion-content=\\"{ suggestion, queryHTML }\\">\\n      <span :aria-label=\\"`Select ${suggestion.query}`\\" style=\\"color: blue;\\" v-html=\\"queryHTML\\" />\\n    </QuerySuggestions>\\n  </div>\\n</template>\\n\\n<script>\\n  import { QuerySuggestions } from \'@empathyco/x-components/query-suggestions\';\\n  import { SearchInput } from \'@empathyco/x-components/search-box\';\\n\\n  export default {\\n    name: \'QuerySuggestionsDemo\',\\n    components: {\\n      SearchInput,\\n      QuerySuggestions\\n    }\\n  };\\n<\/script>\\n```\\n\\n## Extending the component\\n\\nComponents can be combined and communicate with each other. Commonly, the `QuerySuggestions`\\ncomponent communicates with the [`SearchInput`](../search-box/x-components.search-input.md),\\nupdating the term in the search input.\\n\\n_Type “puzzle” or another toy in the input field to try it out!_\\n\\n```vue\\n<template>\\n  <div>\\n    <SearchInput />\\n    <QuerySuggestions />\\n  </div>\\n</template>\\n\\n<script>\\n  import { QuerySuggestions } from \'@empathyco/x-components/query-suggestions\';\\n  import { SearchInput } from \'@empathyco/x-components/search-box\';\\n\\n  export default {\\n    name: \'QuerySuggestionsDemo\',\\n    components: {\\n      SearchInput,\\n      QuerySuggestions\\n    }\\n  };\\n<\/script>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);