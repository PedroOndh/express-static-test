(window.webpackJsonp=window.webpackJsonp||[]).push([[1036],{1302:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"selected-filters-list.vue_rollup-plugin-vue=script.js","sources":["../../../../../../src/x-modules/facets/components/lists/selected-filters-list.vue?rollup-plugin-vue=script.ts"],"sourcesContent":["\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nimport { Component, Prop, Vue } from \'vue-property-decorator\';\\nimport { Facet, Filter, isFacetFilter } from \'@empathyco/x-types\';\\nimport { xComponentMixin } from \'../../../../components/x-component.mixin\';\\nimport { toKebabCase } from \'../../../../utils/string\';\\nimport { facetsXModule } from \'../../x-module\';\\nimport SelectedFilters from \'./selected-filters.vue\';\\n\\n/**\\n * Custom interface to provide a slot name to a Filter.\\n *\\n * @internal\\n */\\ninterface RenderFilter {\\n  slotName: string;\\n  selectedFilter: Filter;\\n}\\n\\n/**\\n * This component renders a list of selected filters from every facet, or from the facet\\n * which facet id is passed as property. It uses the SelectedFilters component (state).\\n *\\n * It provides two slots: a scoped one which name is the filter facet id; and a default one.\\n * Both exposes the filter and renders the filter label by default.\\n *\\n * The property \\"alwaysVisible\\" handles if the component is rendered if no filters are selected.\\n *\\n * @public\\n */\\n@Component({\\n  components: { SelectedFilters },\\n  mixins: [xComponentMixin(facetsXModule)]\\n})\\nexport default class SelectedFiltersList extends Vue {\\n  /**\\n   * It is directly passed to the selected filters component. If a facet id is passed as prop,\\n   * the component filters the selected filters for that facet.\\n   *\\n   * @public\\n   */\\n  @Prop()\\n  protected facetId: Facet[\'id\'] | undefined;\\n\\n  /**\\n   * It is directly passed to the selected filters component. It handles if the SelectedFilters\\n   * component is always rendered no matter if no filters are selected.\\n   *\\n   * If true, the SelectedFilters component is always rendered.\\n   * If false, the SelectedFilters component is not rendered whether no filters are selected.\\n   *\\n   * @public\\n   */\\n  @Prop({ default: false })\\n  protected alwaysVisible!: boolean;\\n\\n  /**\\n   * Animation component that will be used to animate the selected filters list.\\n   *\\n   * @public\\n   */\\n  @Prop({ default: \'ul\' })\\n  protected animation!: Vue | string;\\n\\n  /**\\n   * Transforms a dictionary of Filters including the slot name.\\n   *\\n   * @param selectedFilters - A list of selected filters without slot name.\\n   *\\n   * @returns A dictionary of facets with the slot name.\\n   *\\n   * @internal\\n   */\\n  protected mapSlot(selectedFilters: Filter[]): RenderFilter[] {\\n    return selectedFilters.map(filter => ({\\n      slotName: isFacetFilter(filter) ? toKebabCase(filter.facetId as string) : \'default\',\\n      selectedFilter: filter\\n    }));\\n  }\\n}\\n"],"names":[],"mappings":";;;;;;;;AAqDA;;;;;;;;;;;AAeA;IAAiD,uCAAG;IAApD;;KA6CC;;;;;;;;;;IANW,qCAAO,GAAjB,UAAkB,eAAyB;QACzC,OAAO,eAAe,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,QAAC;YACpC,QAAQ,EAAE,aAAa,CAAC,MAAM,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC,OAAiB,CAAC,GAAG,SAAS;YACnF,cAAc,EAAE,MAAM;SACvB,IAAC,CAAC,CAAC;KACL;IApCD;QADC,IAAI,EAAE;wDACoC;IAY3C;QADC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;8DACS;IAQlC;QADC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;0DACW;IA5BhB,mBAAmB;QAJvC,SAAS,CAAC;YACT,UAAU,EAAE,EAAE,eAAe,iBAAA,EAAE;YAC/B,MAAM,EAAE,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;SACzC,CAAC;OACmB,mBAAmB,CA6CvC;IAAD,0BAAC;CAAA,CA7CgD,GAAG;;;;"}')}}]);