(window.webpackJsonp=window.webpackJsonp||[]).push([[928],{1205:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"base-suggestion.vue.js","sources":["../../../../src/components/suggestions/base-suggestion.vue"],"sourcesContent":["<template>\\n  <button @click=\\"emitEvents\\" :class=\\"dynamicCSSClasses\\" class=\\"x-suggestion\\">\\n    \x3c!-- eslint-disable max-len --\x3e\\n    \x3c!--\\n      @slot Button content\\n          @binding {Suggestion} suggestion - Suggestion data\\n          @binding {string} queryHTML - Suggestion\'s query with the matching part inside a `<span>` tag\\n    --\x3e\\n    \x3c!-- eslint-enable max-len --\x3e\\n    <slot v-bind=\\"{ suggestion, queryHTML }\\">\\n      <span v-html=\\"queryHTML\\" :aria-label=\\"suggestion.query\\" class=\\"x-suggestion__query\\" />\\n    </slot>\\n  </button>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { Suggestion } from \'@empathyco/x-types\';\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import { QueryFeature } from \'../../types/origin\';\\n  import { forEach } from \'../../utils/object\';\\n  import { normalizeString } from \'../../utils/normalize\';\\n  import { sanitize } from \'../../utils/sanitize\';\\n  import { VueCSSClasses } from \'../../utils/types\';\\n  import { XEventsTypes } from \'../../wiring/events.types\';\\n\\n  /**\\n   * Renders a button with a default slot. It receives a query, which should be the query of the\\n   * module using this component, a suggestion, the {@link XEvent | XEvents} that will be emitted\\n   * on click with a given feature.\\n   *\\n   * The default slot receives the suggestion and the matched query has props.\\n   *\\n   * @public\\n   */\\n  @Component\\n  export default class BaseSuggestion extends Vue {\\n    /**\\n     * The normalized query of the module using this component.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: \'\' })\\n    protected query!: string;\\n\\n    /**\\n     * The suggestion to render and use in the default slot.\\n     *\\n     * @public\\n     */\\n    @Prop({ required: true })\\n    protected suggestion!: Suggestion;\\n\\n    /**\\n     * The feature from which the events will be emitted.\\n     *\\n     * @public\\n     */\\n    @Prop() //TODO: set to true when the suggestions components pass it.\\n    protected feature?: QueryFeature;\\n\\n    /**\\n     * The {@link XEvent | XEvents} that will be emitted when selecting a suggestion.\\n     *\\n     * @public\\n     */\\n    @Prop({ required: true })\\n    protected suggestionSelectedEvents!: Partial<XEventsTypes>;\\n\\n    /**\\n     * The event handler that will be triggered when clicking on a suggestion.\\n     *\\n     * @remarks\\n     * * UserAcceptedAQuery: suggestion.query\\n     * * UserSelectedASuggestion: suggestion\\n     * * Merges the events defined in the suggestionSelectedEvents prop and also emits them\\n     *\\n     * @returns The {@link XEvent | XEvents} to emit.\\n     * @public\\n     */\\n    protected get events(): Partial<XEventsTypes> {\\n      return {\\n        UserAcceptedAQuery: this.suggestion.query,\\n        UserSelectedASuggestion: this.suggestion,\\n        ...this.suggestionSelectedEvents\\n      };\\n    }\\n\\n    /**\\n     * Emits the events when the button is clicked.\\n     *\\n     * @public\\n     */\\n    protected emitEvents(): void {\\n      forEach(this.events, (event, payload) => {\\n        this.$x.emit(event, payload, {\\n          target: this.$el as HTMLElement,\\n          feature: this.feature\\n        });\\n      });\\n    }\\n\\n    /**\\n     * Checks if the normalized suggestion query matches with the module\'s query so it has a\\n     * matching part.\\n     *\\n     * @returns If the query has a matching part or not.\\n     * @internal\\n     */\\n    protected get hasMatchingQuery(): boolean {\\n      return !!this.query && normalizeString(this.suggestion.query).includes(this.query);\\n    }\\n\\n    /**\\n     * Generates css classes dynamically.\\n     *\\n     * @remarks\\n     * \'x-suggestion--matching added when the query should be matched.\\n     *\\n     * @returns The {@link VueCSSClasses} classes.\\n     * @public\\n     */\\n    protected get dynamicCSSClasses(): VueCSSClasses {\\n      return {\\n        \'x-suggestion--matching\': this.hasMatchingQuery\\n      };\\n    }\\n\\n    /**\\n     * Highlights the matching part of the suggestion query with the query passed as prop of the\\n     * component putting it inside a `<span>` tag.\\n     *\\n     * @remarks\\n     * The query prop should be normalized.\\n     *\\n     * @returns The suggestion\'s query with the matching part inside a `<span>` tag.\\n     * @public\\n     */\\n    protected get queryHTML(): string {\\n      if (this.hasMatchingQuery) {\\n        const matcherIndex = normalizeString(this.suggestion.query).indexOf(this.query);\\n\\n        const [beginning, matching, end] = this.splitAt(\\n          this.suggestion.query,\\n          matcherIndex,\\n          this.query.length\\n        );\\n\\n        const attrsMatching = \'data-test=\\"matching-part\\" class=\\"x-suggestion__matching-part\\"\';\\n        return `${beginning}<span ${attrsMatching}>${matching}</span>${end}`;\\n      }\\n\\n      return sanitize(this.suggestion.query);\\n    }\\n\\n    /**\\n     * Splits the label in three parts based on two indexes.\\n     *\\n     * @param label - The string that will be divided in three parts.\\n     * @param start - The first index that the label will be divided by.\\n     * @param skip - The second index that the label will be divided by.\\n     *\\n     * @returns The three parts of the divided label.\\n     * @internal\\n     */\\n    protected splitAt(label: string, start: number, skip: number): [string, string, string] {\\n      const startPart = label.substr(0, start);\\n      const matchingPart = label.substr(start, skip);\\n      const endPart = label.substr(start + skip);\\n\\n      return [sanitize(startPart), sanitize(matchingPart), sanitize(endPart)];\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\nThis default suggestion component expects a suggestion to render and pass to its default slot, a\\nnormalized query to compare with the suggestion\'s query and highlight its matching parts and events\\nto emit when the suggestion is selected.\\n\\n### Default usage\\n\\n```vue\\n<BaseSuggestion v-bind=\\"{ query, suggestion, suggestionSelectedEvents }\\" />\\n```\\n\\n### Customized usage\\n\\n```vue\\n<BaseSuggestion v-bind=\\"{ query, suggestion, suggestionSelectedEvents }\\">\\n  <template #default=\\"{ suggestion, queryHTML }\\">\\n    <span\\n      class=\\"my-suggestion\\"\\n      v-html=\\"queryHTML\\"\\n      :aria-label=\\"suggestion.query\\"\\n    />\\n  </template>\\n</BaseSuggestion>\\n```\\n\\n## Events\\n\\nA list of events that the component will emit:\\n\\n- `UserAcceptedAQuery`: the event is emitted after the user clicks the button. The event payload is\\n  the suggestion query data.\\n- `UserSelectedASuggestion`: the event is emitted after the user clicks the button. The event\\n  payload is the suggestion data.\\n- The component can emit more events on click using the `suggestionSelectedEvents` prop.\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);