(window.webpackJsonp=window.webpackJsonp||[]).push([[920],{1198:function(n,e){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"base-scroll.vue.js","sources":["../../../../src/components/scroll/base-scroll.vue"],"sourcesContent":["<template>\\n  <div @scroll=\\"throttledStoreScrollData\\" class=\\"x-scroll x-base-scroll\\" data-test=\\"base-scroll\\">\\n    <slot />\\n  </div>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { mixins } from \'vue-class-component\';\\n  import { Component } from \'vue-property-decorator\';\\n  import ScrollMixin from \'./scroll.mixin\';\\n\\n  /**\\n   * Base scroll component that depending on the user interactivity emits different events for\\n   * knowing when the user scrolls, the direction of scroll and if user reaches the start or end.\\n   *\\n   * @public\\n   */\\n  @Component\\n  export default class BaseScroll extends mixins(ScrollMixin) {}\\n<\/script>\\n\\n<style lang=\\"scss\\" scoped>\\n  .x-base-scroll {\\n    overflow-y: var(--x-string-overflow-scroll, auto);\\n  }\\n</style>\\n\\n<docs lang=\\"mdx\\">\\n## Example\\n\\nThe `BaseScroll` is a component that manages the state of scroll of a specified element. The\\ncomponent does the necessary calculations for knowing the direction of scroll, if the scroll has\\nreached to start or to end, and is about to reaching to end. The components emits the next events\\ndepending of movement that realize the user:\\n\\n```vue\\n<template>\\n  <BaseScroll\\n    @scroll=\\"scroll\\"\\n    @scroll:direction-change=\\"scrollDirectionChange\\"\\n    @scroll:at-start=\\"scrollAtStart\\"\\n    @scroll:almost-at-end=\\"scrollAlmostAtEnd\\"\\n    @scroll:at-end=\\"scrollAtEnd\\"\\n    :throttleMs=\\"1000\\"\\n    :distanceToBottom=\\"200\\"\\n  >\\n    <template>\\n      <div class=\\"content-scroll\\">\\n        <span>content1</span>\\n        <span>content1</span>\\n      </div>\\n    </template>\\n  </BaseScroll>\\n</template>\\n\\n<script>\\n  import { BaseScroll } from \'@empathyco/x-components\';\\n\\n  export default {\\n    name: \'ScrollTest\',\\n    components: {\\n      BaseScroll\\n    },\\n    methods: {\\n      scroll(position) {\\n        console.log(\'scroll\', position);\\n      },\\n      scrollDirectionChange(direction) {\\n        console.log(\'scroll:direction-change\', direction);\\n      },\\n      scrollAtStart() {\\n        console.log(\'scroll:at-start\');\\n      },\\n      scrollAlmostAtEnd(distance) {\\n        console.log(\'scroll:almost-at-end\', distance);\\n      },\\n      scrollAtEnd() {\\n        console.log(\'scroll:at-end\');\\n      }\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Avoid reset scroll on query change\\n\\nSet to false the reset scroll on query change feature which is true by default.\\n\\n```vue\\n<template>\\n  <BaseScroll @scroll=\\"scroll\\" :resetOnChange=\\"false\\">\\n    <template>\\n      <div class=\\"content-scroll\\">\\n        <span>content1</span>\\n        <span>content1</span>\\n      </div>\\n    </template>\\n  </BaseScroll>\\n</template>\\n\\n<script>\\n  import { BaseScroll } from \'@empathyco/x-components\';\\n\\n  export default {\\n    name: \'ScrollTest\',\\n    components: {\\n      BaseScroll\\n    },\\n    methods: {\\n      scroll(position) {\\n        console.log(\'scroll\', position);\\n      }\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Reset scroll\\n\\nYou can configure which events reset the scroll position using the `resetOn` prop.\\n\\n```vue\\n<template>\\n  <BaseScroll @scroll=\\"scroll\\" :resetOn=\\"resetScrollEvents\\">\\n    <template>\\n      <div class=\\"content-scroll\\">\\n        <span>content1</span>\\n        <span>content1</span>\\n      </div>\\n    </template>\\n  </BaseScroll>\\n</template>\\n\\n<script>\\n  import { BaseScroll } from \'@empathyco/x-components\';\\n\\n  export default {\\n    name: \'ScrollTest\',\\n    components: {\\n      BaseScroll\\n    },\\n    data() {\\n      return {\\n        resetScrollEvents: [\'UserAcceptedAQuery\']\\n      };\\n    },\\n    methods: {\\n      scroll(position) {\\n        console.log(\'scroll\', position);\\n      }\\n    }\\n  };\\n<\/script>\\n```\\n\\n## Vue Events:\\n\\n- `scroll`: the event is emitted after the user scrolls in this container. The payload is the scroll\\n  top distance in pixels.\\n- `scroll:direction-change`: the event is emitted when the user changes the scroll direction. The\\n  payload is the new scrolling direction.\\n- `scroll:at-start`: the event is emitted when the user scrolls up to the initial position of the\\n  scroll.\\n- `scroll:almost-at-end`: the event is emitted when the user is about to reach the bottom part of\\n  the scroll.\\n- `scroll:at-end`: the event is emitted when the user has reached the bottom part of the scroll.\\n</docs>\\n"],"names":["const"],"mappings":";;;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);