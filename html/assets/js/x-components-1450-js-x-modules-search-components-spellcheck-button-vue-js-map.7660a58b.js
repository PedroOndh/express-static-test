(window.webpackJsonp=window.webpackJsonp||[]).push([[694],{1467:function(e,t){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"spellcheck-button.vue.js","sources":["../../../../../src/x-modules/search/components/spellcheck-button.vue"],"sourcesContent":["<template>\\n  <button\\n    v-if=\\"spellcheckedQuery\\"\\n    @click=\\"emitEvents\\"\\n    class=\\"x-spellcheck-button\\"\\n    data-test=\\"set-spellcheck\\"\\n  >\\n    <slot v-bind=\\"{ spellcheckedQuery }\\">{{ spellcheckedQuery }}</slot>\\n  </button>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import Vue from \'vue\';\\n  import { Component } from \'vue-property-decorator\';\\n  import { State } from \'../../../components/decorators/store.decorators\';\\n  import { xComponentMixin } from \'../../../components/x-component.mixin\';\\n  import { WireMetadata } from \'../../../wiring/wiring.types\';\\n  import { searchXModule } from \'../x-module\';\\n  /**\\n   * A button that when pressed emits the {@link XEventsTypes.UserAcceptedAQuery}\\n   * and {@link XEventsTypes.UserAcceptedSpellcheckQuery} events, expressing the user\\n   * intention to set the spellchecked query.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    mixins: [xComponentMixin(searchXModule)]\\n  })\\n  export default class SpellcheckButton extends Vue {\\n    /**\\n     * The spellcheckedQuery from the search state.\\n     *\\n     * @public\\n     */\\n    @State(\'search\', \'spellcheckedQuery\')\\n    public spellcheckedQuery!: string;\\n\\n    /**\\n     * Generates the {@link WireMetadata | event metadata} object omitting the moduleName.\\n     *\\n     * @returns The {@link WireMetadata} object omitting the moduleName.\\n     * @internal\\n     */\\n    protected createEventMetadata(): Omit<WireMetadata, \'moduleName\'> {\\n      return {\\n        target: this.$el as HTMLElement,\\n        feature: \'spellcheck\'\\n      };\\n    }\\n\\n    /**\\n     * Emits events when the button is clicked.\\n     *\\n     * @public\\n     */\\n    protected emitEvents(): void {\\n      this.$x.emit(\'UserAcceptedAQuery\', this.spellcheckedQuery, this.createEventMetadata());\\n      this.$x.emit(\\n        \'UserAcceptedSpellcheckQuery\',\\n        this.spellcheckedQuery,\\n        this.createEventMetadata()\\n      );\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\n### Basic example\\n\\nThe component sets the current spellcheckedQuery as the new query and emits the `UserAcceptedAQuery`\\nand `UserAcceptedSpellcheckQuery` events.\\n\\n```vue\\n<SpellcheckButton />\\n```\\n\\n### Customizing its contents\\n\\n```vue\\n<SpellcheckButton>\\n  <template #default=\\"{ spellcheckedQuery }\\">\\n    <span class=\\"x-spellcheck__text\\">\\n      Set the Spellcheck as the new query: {{ spellcheckedQuery}}!\\n    </span>\\n  </template>\\n</SpellcheckButton>\\n```\\n\\n## Events\\n\\nThis component emits 2 different events:\\n\\n- UserAcceptedAQuery: the event is emitted after the user clicks the button. The event payload is\\n  the spellchecked query data.\\n- UserAcceptedSpellcheckQuery: the event is emitted after the user clicks the button. The event\\n  payload is the spellchecked query data.\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);