(window.webpackJsonp=window.webpackJsonp||[]).push([[1009],{1278:function(e,t){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"facets.vue.js","sources":["../../../../../../src/x-modules/facets/components/facets/facets.vue"],"sourcesContent":["<template>\\n  <component\\n    :is=\\"animation\\"\\n    v-if=\\"hasFacets\\"\\n    class=\\"x-list x-facets-list\\"\\n    data-test=\\"facets\\"\\n    tag=\\"ul\\"\\n  >\\n    <li\\n      v-for=\\"({ facet, slotName }, facetId) in mappedFacets\\"\\n      :key=\\"facetId\\"\\n      class=\\"x-facets-list__item\\"\\n      data-test=\\"facets-facet\\"\\n    >\\n      \x3c!--\\n        @slot Customized Facet rendering. Specifying a slot with the facet\'s name will result in the\\n        facet using that slot composition to render.\\n            @binding {Facet} facet - Facet to render\\n      --\x3e\\n      <slot\\n        v-if=\\"$scopedSlots[slotName]\\"\\n        v-bind=\\"{\\n          facet,\\n          selectedFilters: selectedFiltersByFacet[facetId] || []\\n        }\\"\\n        :name=\\"slotName\\"\\n      />\\n      \x3c!--\\n        @slot (required) Default Facet rendering. This slot will be used by default for rendering\\n        the facets without an specific slot implementation.\\n            @binding {Facet} facet - Facet to render\\n      --\x3e\\n      <slot\\n        v-else\\n        v-bind=\\"{\\n          facet,\\n          selectedFilters: selectedFiltersByFacet[facetId] || []\\n        }\\"\\n      >\\n        This is the {{ facet.label }} facet. Pass something into its slot to display content.\\n      </slot>\\n    </li>\\n  </component>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { Facet } from \'@empathyco/x-types\';\\n  import { Component, Prop, Vue } from \'vue-property-decorator\';\\n  import { Getter } from \'../../../../components/decorators/store.decorators\';\\n  import { xComponentMixin } from \'../../../../components/x-component.mixin\';\\n  import { toKebabCase } from \'../../../../utils/string\';\\n  import { map, objectFilter } from \'../../../../utils/object\';\\n  import { Dictionary } from \'../../../../utils/types\';\\n  import { FiltersByFacet } from \'../../store/types\';\\n  import { facetsXModule } from \'../../x-module\';\\n\\n  /**\\n   * Custom interface to provide a slot name to a Facet.\\n   *\\n   * @internal\\n   */\\n  interface RenderFacet {\\n    slotName: string;\\n    facet: Facet;\\n  }\\n\\n  /**\\n   * This component renders the list of facets stored in the Facets module. Facets can be rendered\\n   * differently based on their purpose and this can be achieved using the exposed slots:\\n   * - A default and required slot.\\n   * - A custom slot for each facet with the facetId as its name. This allows each facet to be\\n   * rendered differently based on its needs.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    mixins: [xComponentMixin(facetsXModule)]\\n  })\\n  export default class Facets extends Vue {\\n    /**\\n     * Animation component that will be used to animate the facets.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: \'ul\' })\\n    public animation!: Vue | string;\\n\\n    /**\\n     * Discriminates the facets rendered by this component. It expects a string containing facets\\n     * ids, comma separated. This property will include or exclude facets based on its value.\\n     * The default value is an empty string and the component will render all existing facets.\\n     *\\n     * @remarks\\n     * To behave as a `include`, simply set the facets ids, comma separated:\\n     * `existingFacets=[{ brand: ... }, category: { ... }, color: { ... }, price: { ... }]`\\n     * `renderableFacets=\\"brand, category\\"`\\n     *\\n     * The component will render brand and category facets.\\n     *\\n     * On the other hand, to simulate an `exclude` behaviour and exclude a facet from being\\n     * rendered, append a \'!\' before its id:\\n     * `existingFacets=[{ brand: ... }, category: { ... }, color: { ... }, price: { ... }]`\\n     * `renderableFacets=\\"!brand,!price\\"`\\n     *\\n     * The component will render category and color facets.\\n     *\\n     * @public\\n     */\\n    @Prop()\\n    public renderableFacets!: string | undefined;\\n\\n    /**\\n     * Array of selected filters from every facet.\\n     *\\n     * @internal\\n     */\\n    @Getter(\'facets\', \'selectedFiltersByFacet\')\\n    public selectedFiltersByFacet!: FiltersByFacet;\\n\\n    /**\\n     * Dictionary of facets in the state.\\n     *\\n     * @internal\\n     */\\n    @Getter(\'facets\', \'facets\')\\n    public facets!: Record<Facet[\'id\'], Facet>;\\n\\n    /**\\n     * Transforms a dictionary of Facets including the slot name.\\n     *\\n     * @returns A dictionary of facets with the slot name.\\n     *\\n     * @internal\\n     */\\n    protected get mappedFacets(): Dictionary<RenderFacet> {\\n      return map(this.facetsToRender, (facetId, facet) => ({\\n        slotName: toKebabCase(facetId),\\n        facet\\n      }));\\n    }\\n\\n    /**\\n     * The facets to be rendered after filtering {@link Facets.facets} by\\n     * {@link Facets.renderableFacets} content.\\n     *\\n     * @returns The list of facets to be rendered.\\n     *\\n     * @internal\\n     */\\n    protected get facetsToRender(): Dictionary<Facet> {\\n      if (!this.renderableFacets) {\\n        return this.facets;\\n      } else {\\n        const excludedRegExp = /^!/;\\n        const facetIds: string[] = this.renderableFacets.split(\',\').map(facetId => facetId.trim());\\n        const included: string[] = [];\\n        const excluded: string[] = [];\\n        facetIds.forEach(facetId => {\\n          if (excludedRegExp.test(facetId)) {\\n            excluded.push(facetId.replace(excludedRegExp, \'\'));\\n          } else {\\n            included.push(facetId);\\n          }\\n        });\\n\\n        return this.filterFacetsToRender(included, excluded);\\n      }\\n    }\\n\\n    /**\\n     * Indicates if there are facets available to show.\\n     *\\n     * @returns True if there are facets available and false otherwise.\\n     * @internal\\n     */\\n    protected get hasFacets(): boolean {\\n      return !!Object.keys(this.facetsToRender).length;\\n    }\\n\\n    /**\\n     * Filter facets dictionary retrieving those included and/or removing excluded.\\n     *\\n     * @param included - List of facets to render.\\n     * @param excluded - List of not renderable facets.\\n     *\\n     * @returns The filtered list of facets to render.\\n     *\\n     * @internal\\n     */\\n    private filterFacetsToRender(included: string[], excluded: string[]): Dictionary<Facet> {\\n      const hasAnyFacetIncluded = included.length > 0;\\n      return objectFilter(this.facets, facetKey => {\\n        const isIncluded = included.includes(String(facetKey));\\n        const isExcluded = excluded.includes(String(facetKey));\\n\\n        return hasAnyFacetIncluded ? isIncluded && !isExcluded : !isExcluded;\\n      });\\n    }\\n  }\\n<\/script>\\n\\n<style lang=\\"scss\\" scoped>\\n  .x-facets-list {\\n    list-style-type: none;\\n  }\\n</style>\\n\\n<docs lang=\\"mdx\\">\\n## Example\\n\\nThis component renders the list of facets stored in the Facets module. Facets can be rendered\\ndifferently based on their purpose and this can be achieved using the exposed slots:\\n\\n- A default and required slot.\\n- A custom slot for each facet with the facetId as its name. This allows each facet to be rendered\\n  differently based on its needs.\\n\\nBelow, there are some examples showing how to use the component with its different configurations.\\n\\n### Default usage\\n\\nThe default slot of this component is mandatory. If no other slot is defined, every Facet will be\\nrendered as specified in the default slot.\\n\\n```vue\\n<template>\\n  <Facets>\\n    <template #default=\\"{ facet, selectedFilters }\\">\\n      <h1>{{ ${facet.label} }}</h1>\\n      <span v-if=\\"selectedFilters.length > 0\\">{{ `${selectedFilters.length} selected` }}</span>\\n\\n      <ul>\\n        <li v-for=\\"filter in facet.filters\\" :key=\\"filter.id\\">\\n          {{ filter.label }}\\n        </li>\\n      </ul>\\n    </template>\\n  </Facets>\\n</template>\\n\\n<script>\\n  import { Facets } from \'@empathyco/x-components/facets\';\\n\\n  export default {\\n    components: {\\n      Facets\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Customized usage\\n\\nCustomized compositions for a specific Facet can be achieved by using a slot with the same id as the\\nfacet to customize. For example, the Facet with the id \\"color\\" requires a composition that differs\\nfrom the rest of the Facets. Doing it in a slot with the name \\"color\\" will apply this customization\\njust to the \\"color\\" Facet. The other facets will fallback to the composition of the default slot.\\n\\n```vue\\n<template>\\n  <Facets>\\n    <template #color=\\"{ facet, selectedFilters }\\">\\n      <span v-if=\\"selectedFilters.length > 0\\">{{ `${selectedFilters.length} colors chosen` }}</span>\\n\\n      <ul v-for=\\"filter in facet.filters\\" :key=\\"filter.id\\">\\n        <li v-if=\\"!filter.selected\\">\\n          {{ filter.label }}\\n        </li>\\n      </ul>\\n    </template>\\n\\n    <template #default=\\"{ facet }\\">\\n      <h1>{{ facet.label }}</h1>\\n\\n      <ul>\\n        <li v-for=\\"filter in facet.filters\\" :key=\\"filter.id\\">\\n          {{ filter.label }}\\n        </li>\\n      </ul>\\n    </template>\\n  </Facets>\\n</template>\\n\\n<script>\\n  import { Facets } from \'@empathyco/x-components/facets\';\\n\\n  export default {\\n    components: {\\n      Facets\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Render specific facets I\\n\\nBy default, this component will render all existing facets. However, it has the renderableFacets\\nprop to filter which facets will be rendered. Its value is a string containing the different facets\\nids. This value is treated as an include or exclude list (to exclude a facet from being rendered,\\njust prefix its id with a `!`). The component will only render included facets and discard excluded\\nones. In the following example, the component will only render color and category facets.\\n\\n```vue\\n<template>\\n  <Facets renderableFacets=\\"color, category\\">\\n    <template #default=\\"{ facet }\\">\\n      <h1>{{ facet.label }}</h1>\\n\\n      <ul>\\n        <li v-for=\\"filter in facet.filters\\" :key=\\"filter.id\\">\\n          {{ filter.label }}\\n        </li>\\n      </ul>\\n    </template>\\n  </Facets>\\n</template>\\n\\n<script>\\n  import { Facets } from \'@empathyco/x-components/facets\';\\n\\n  export default {\\n    components: {\\n      Facets\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Render specific facets II\\n\\nExclude facets so the component does not render them. In the following example, the component will\\nrender every facet except color and price.\\n\\n```vue\\n<template>\\n  <Facets renderableFacets=\\"!color, !price\\">\\n    <template #default=\\"{ facet }\\">\\n      <h1>{{ facet.label }}</h1>\\n\\n      <ul>\\n        <li v-for=\\"filter in facet.filters\\" :key=\\"filter.id\\">\\n          {{ filter.label }}\\n        </li>\\n      </ul>\\n    </template>\\n  </Facets>\\n</template>\\n\\n<script>\\n  import { Facets } from \'@empathyco/x-components/facets\';\\n\\n  export default {\\n    components: {\\n      Facets\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Integrating with the filters components\\n\\nThere are many components that will help you build your own awesome filters list. `Facets` just\\nrenders the list, but what to render for each facet is up to you. Below you can see an example. of\\nthe `Facets` component using the `FiltersSearch` `MultiSelectFilters`, `SimpleFilter`, `Filters`,\\n`HierarchicalFilter`, `NumberRangeFilter` and `BasePriceFilterLabel`.\\n\\n```vue\\n<template>\\n  <Facets>\\n    <template #default=\\"{ facet, selectedFilters }\\">\\n      <h1>{{ facet.label }}</h1>\\n      <FiltersSearch :filters=\\"facet.filters\\">\\n        <MultiSelectFilters v-slot=\\"{ filter }\\">\\n          <SimpleFilter :filter=\\"filter\\" />\\n        </MultiSelectFilters>\\n      </FiltersSearch>\\n    </template>\\n\\n    <template #category=\\"{ facet }\\">\\n      <h1>{{ facet.label }}</h1>\\n      <Filters v-slot=\\"{ filter }\\" :filters=\\"facet.filters\\">\\n        <HierarchicalFilter :filter=\\"filter\\" />\\n      </Filters>\\n    </template>\\n\\n    <template #price=\\"{ facet }\\">\\n      <h1>{{ facet.label }}</h1>\\n      <Filters v-slot=\\"{ filter }\\" :filters=\\"facet.filters\\">\\n        <NumberRangeFilter :filter=\\"filter\\">\\n          <BasePriceFilterLabel :filter=\\"filter\\" />\\n        </NumberRangeFilter>\\n      </Filters>\\n    </template>\\n  </Facets>\\n</template>\\n\\n<script>\\n  import {\\n    Facets,\\n    Filters,\\n    FiltersSearch,\\n    HierarchicalFilter,\\n    MultiSelectFilters,\\n    NumberRangeFilter,\\n    SimpleFilter\\n  } from \'@empathyco/x-components/facets\';\\n\\n  import { BasePriceFilterLabel } from \'@empathyco/x-components\';\\n\\n  export default {\\n    components: {\\n      Facets,\\n      MultiSelectFilters,\\n      FiltersSearch,\\n      SimpleFilter,\\n      Filters,\\n      HierarchicalFilter,\\n      NumberRangeFilter,\\n      BasePriceFilterLabel\\n    }\\n  };\\n<\/script>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);