(window.webpackJsonp=window.webpackJsonp||[]).push([[678],{1452:function(t,e){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"partial-results-list.vue.js","sources":["../../../../../src/x-modules/search/components/partial-results-list.vue"],"sourcesContent":["<template>\\n  <component\\n    :is=\\"animation\\"\\n    v-if=\\"partialResults.length\\"\\n    class=\\"x-list x-partial-results-list\\"\\n    data-test=\\"partial-results\\"\\n    tag=\\"ul\\"\\n  >\\n    <li\\n      v-for=\\"(partialResult, index) in partialResults\\"\\n      :key=\\"`${partialResult.query}-${index}`\\"\\n      class=\\"x-partial-result\\"\\n      data-test=\\"partial-result\\"\\n    >\\n      \x3c!--\\n       @slot (Required) Partial results item content\\n           @binding {Partial} partialResult - Partial Result data\\n      --\x3e\\n      <slot :partialResult=\\"partialResult\\" />\\n    </li>\\n  </component>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { PartialResult } from \'@empathyco/x-types\';\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import { State } from \'../../../components/decorators/store.decorators\';\\n  import { xComponentMixin } from \'../../../components/x-component.mixin\';\\n  import { searchXModule } from \'../x-module\';\\n\\n  /**\\n   * It renders a list of partial results from {@link SearchState.partialResults} by default.\\n   * It also provides the partial result slot to customize the item with the partial result bound.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    mixins: [xComponentMixin(searchXModule)]\\n  })\\n  export default class PartialResultsList extends Vue {\\n    /**\\n     * Animation component that will be used to animate the partial results.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: \'ul\' })\\n    protected animation!: Vue | string;\\n    /**\\n     * The partials results from the search state.\\n     *\\n     * @public\\n     */\\n    @State(\'search\', \'partialResults\')\\n    public items!: PartialResult[];\\n    /**\\n     * Maximum number of partial results to show.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: 5 })\\n    protected maxItemsToRender!: number;\\n    /**\\n     * A limited number of partial results.\\n     *\\n     * @returns The partial results sliced by the maxItemsToRender.\\n     *\\n     * @internal\\n     */\\n    protected get partialResults(): PartialResult[] {\\n      return this.items.slice(0, this.maxItemsToRender);\\n    }\\n  }\\n<\/script>\\n\\n<style lang=\\"scss\\" scoped>\\n  .x-partial-results {\\n    list-style-type: none;\\n    padding: 0;\\n  }\\n</style>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\nThis component loops through an array of partials an exposed a slot to use customize each partial.\\n\\n### Basic example\\n\\nIt renders a list of partial results using the default slot:\\n\\n```vue\\n<template>\\n  <PartialResultsList>\\n    <template #default=\\"{ partialResult }\\">\\n      <ResultsList :results=\\"partialResult.results\\" />\\n    </template>\\n  </PartialResultsList>\\n</template>\\n```\\n\\n### Configuring the number of partials\\n\\nIt sets the maximum partials to show to 3.\\n\\n```vue\\n<template>\\n  <PartialResultsList :maxItemsToRender=\\"3\\">\\n    <template #default=\\"{ partialResult }\\">\\n      <ResultsList :results=\\"partialResult.results\\" />\\n    </template>\\n  </PartialResultsList>\\n</template>\\n```\\n\\n### Rendering usage\\n\\nIt renders a list of partial results using the default slot. It will show the query, the partial\\nresults and a button to update the query with the partial one.\\n\\n```vue\\n<template>\\n  <PartialResultsList>\\n    <template #default=\\"{ partialResult }\\">\\n      <span>{{ partialResult.query }}</span>\\n      <BaseGrid :columns=\\"4\\" :items=\\"partialResult.results\\">\\n        <template #result=\\"{ item }\\">\\n          <BaseResultLink :result=\\"item\\">\\n            <template #default=\\"{ item }\\">\\n              <BaseResultImage :result=\\"item\\" />\\n              <span class=\\"x-result__title\\">{{ item.name }}</span>\\n            </template>\\n          </BaseResultLink>\\n        </template>\\n      </BaseGrid>\\n      <PartialQueryButton :query=\\"partialResult.query\\">\\n        <template #default=\\"{ query }\\">Ver todos {{ query }}</template>\\n      </PartialQueryButton>\\n    </template>\\n  </PartialResultsList>\\n</template>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);