(window.webpackJsonp=window.webpackJsonp||[]).push([[909],{1188:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"base-result-image.vue.js","sources":["../../../../src/components/result/base-result-image.vue"],"sourcesContent":["<template>\\n  <picture ref=\\"image\\" class=\\"x-picture x-result-picture\\" data-test=\\"result-picture\\">\\n    <component\\n      :is=\\"animation\\"\\n      v-if=\\"!hasImageLoaded && !hasAllImagesFailed\\"\\n      class=\\"x-picture__image x-picture__image--placeholder\\"\\n      data-test=\\"result-picture-placeholder\\"\\n    >\\n      \x3c!-- eslint-disable-next-line max-len --\x3e\\n      \x3c!-- @slot (Required) Loading image content. It will be rendered while the real image is not loaded --\x3e\\n      <slot name=\\"placeholder\\" />\\n    </component>\\n    <component :is=\\"animation\\">\\n      <img\\n        v-if=\\"imageSrc\\"\\n        v-show=\\"hasImageLoaded\\"\\n        @error=\\"flagImageAsFailed\\"\\n        @load=\\"flagImageLoaded\\"\\n        :alt=\\"result.name\\"\\n        :src=\\"imageSrc\\"\\n        class=\\"x-picture__image x-result-picture-image\\"\\n        data-test=\\"result-picture-image\\"\\n      />\\n      <NoElement v-else-if=\\"hasAllImagesFailed\\" class=\\"x-picture__image x-picture__image--fallback\\">\\n        \x3c!--\\n        Vue styleguidist doesn\'t generate slot docs for v-else and v-else-if conditions\\n        due to a bug https://github.com/vuejs/vue/pull/10286.\\n        TODO - Bump styleguidist version when the fix branch is merged and a new version released.\\n        --\x3e\\n        \x3c!-- eslint-disable-next-line max-len --\x3e\\n        \x3c!-- @slot (Required) Fallback image content. It will be rendered when all the images failed --\x3e\\n        <slot name=\\"fallback\\" />\\n      </NoElement>\\n    </component>\\n  </picture>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { Result } from \'@empathyco/x-types\';\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import { NoElement } from \'../no-element\';\\n\\n  /**\\n   * Component to be reused that renders an `<img>`.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: {\\n      NoElement\\n    }\\n  })\\n  export default class BaseResultImage extends Vue {\\n    /**\\n     * Animation to use when switching between the placeholder, the loaded image, or the failed\\n     * image fallback.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: () => NoElement })\\n    public animation!: string | typeof Vue;\\n    /**\\n     * The image has entered in the port view.\\n     *\\n     * @public\\n     */\\n    protected hasEnteredView = false;\\n    /**\\n     * An array of images that failed to load.\\n     *\\n     * @public\\n     */\\n    protected failedImages: string[] = [];\\n    /**\\n     * HTMLElement that references the picture element.\\n     *\\n     * @public\\n     */\\n    public $refs!: { image: HTMLElement };\\n    /**\\n     * Indicates if the result image is loaded.\\n     *\\n     * @public\\n     */\\n    protected hasImageLoaded = false;\\n\\n    /**\\n     * (Required) The {@link @empathyco/x-types#Result | result} information.\\n     *\\n     * @public\\n     */\\n    @Prop({ required: true })\\n    protected result!: Result;\\n\\n    /**\\n     * Checks if intersection observer is available in window object.\\n     *\\n     * @returns Boolean.\\n     *\\n     * @internal\\n     */\\n    protected get isIntersectionObserverAvailable(): boolean {\\n      return \'IntersectionObserver\' in window;\\n    }\\n\\n    mounted(): void {\\n      this.hasEnteredView = !this.isIntersectionObserverAvailable;\\n      if (this.isIntersectionObserverAvailable) {\\n        this.createObserver();\\n      }\\n    }\\n\\n    /**\\n     * Gets the src from the result image.\\n     *\\n     * @returns The result image src.\\n     *\\n     * @internal\\n     */\\n    protected get imageSrc(): string {\\n      if (this.hasEnteredView && this.result.images.length > 0) {\\n        const image = this.result.images.find(image => !this.failedImages.includes(image));\\n        return image ?? \'\';\\n      }\\n      return \'\';\\n    }\\n\\n    /**\\n     * Creates an intersection observer in the image element.\\n     *\\n     * @internal\\n     */\\n    protected createObserver(): void {\\n      const image = this.$refs.image as Element;\\n      const observer = new IntersectionObserver(this.observerHandler.bind(this));\\n      observer.observe(image);\\n    }\\n\\n    /**\\n     * Observe all the observables items and detects when a element is intersected.\\n     *\\n     * @param entries - The observed items.\\n     * @param observer - The intersection observer object.\\n     *\\n     * @internal\\n     */\\n    protected observerHandler(\\n      entries: IntersectionObserverEntry[],\\n      observer: IntersectionObserver\\n    ): void {\\n      entries.forEach(entry => {\\n        if (entry.isIntersecting) {\\n          this.hasEnteredView = true;\\n          observer.disconnect();\\n        }\\n      });\\n    }\\n\\n    /**\\n     * Sets an image as failed.\\n     *\\n     * @internal\\n     */\\n    protected flagImageAsFailed(): void {\\n      this.failedImages.push(this.imageSrc);\\n    }\\n\\n    /**\\n     * Checks if all the images failed.\\n     *\\n     * @returns Boolean.\\n     *\\n     * @internal\\n     */\\n    protected get hasAllImagesFailed(): boolean {\\n      return this.failedImages.length === this.result.images.length;\\n    }\\n\\n    /**\\n     * Marks an image as loaded.\\n     *\\n     * @internal\\n     */\\n    protected flagImageLoaded(): void {\\n      this.hasImageLoaded = true;\\n    }\\n  }\\n<\/script>\\n\\n<style lang=\\"scss\\" scoped>\\n  .x-result-picture {\\n    min-width: 1px;\\n    min-height: 1px;\\n    position: relative;\\n\\n    &__image {\\n      max-width: 100%;\\n      max-height: 100%;\\n      object-fit: contain;\\n    }\\n  }\\n</style>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\n### Basic example\\n\\nThis component is for the result image. It may be part of the search result page, recommendations or\\nother section which needs to include results.\\n\\nThe result prop is required. It will render a `<img/>` with the result image:\\n\\n```vue\\n<BaseResultImage :result=\\"result\\" />\\n```\\n\\n### Customizing slots content\\n\\nFallback and placeholder contents can be customized.\\n\\nThe fallback slot allows you to replace the content of the fallback image.\\n\\nThe other slot is called `placeholder`, and allows you to set the image that its going to be\\ndisplayed while the real one is loaded.\\n\\n```vue\\n<BaseResultImage :result=\\"result\\">\\n  <template #placeholder>\\n    <img class=\\"x-result-picture-placeholder\\" src=\\"./placeholder-image.svg\\"/>\\n  </template>\\n  <template #fallback>\\n    <img class=\\"x-result-picture-fallback\\" src=\\"./fallback-image.svg\\"/>\\n  </template>\\n</BaseResultImage>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);