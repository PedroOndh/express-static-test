(window.webpackJsonp=window.webpackJsonp||[]).push([[942],{1218:function(A,e){throw new Error("Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {\"version\":3,\"file\":\"x-plugin.js\",\"sources\":[\"../../../src/plugins/x-plugin.ts\"],\"sourcesContent\":[\"import { SearchAdapter } from '@empathyco/x-adapter';\\nimport { deepMerge } from '@empathyco/x-deep-merge';\\nimport { PluginObject, VueConstructor } from 'vue';\\nimport Vuex, { Module, Store } from 'vuex';\\nimport { FILTERS_REGISTRY } from '../filters/filters.registry';\\nimport { AnyXStoreModule, RootXStoreState } from '../store/store.types';\\nimport { cleanGettersProxyCache } from '../store/utils/getters-proxy.utils';\\nimport { RootXStoreModule } from '../store/x.module';\\nimport { Dictionary, forEach } from '../utils';\\nimport { AnyWire } from '../wiring/wiring.types';\\nimport { AnyXModule, XModuleName } from '../x-modules/x-modules.types';\\nimport { bus } from './x-bus';\\nimport { XBus } from './x-bus.types';\\nimport { registerStoreEmitters } from './x-emitters';\\nimport { createXComponentAPIMixin } from './x-plugin.mixin';\\nimport { AnyXStoreModuleOption, XModuleOptions, XPluginOptions } from './x-plugin.types';\\nimport { assertXPluginOptionsAreValid } from './x-plugin.utils';\\n\\n/**\\n * Vue plugin that initializes the properties needed by the x-components, and exposes the events bus\\n * and the adapter after it has been installed.\\n *\\n * @public\\n */\\nexport class XPlugin implements PluginObject<XPluginOptions> {\\n  /**\\n   * {@link @empathyco/x-adapter#SearchAdapter | SearchAdapter} Is the middleware between\\n   * the components and our API where data can be mapped to client needs.\\n   * This property is only available after installing the plugin.\\n   *\\n   * @returns The installed adapter.\\n   * @throws If this property is accessed before calling `Vue.use(xPlugin)`.\\n   * @public\\n   */\\n  public static get adapter(): SearchAdapter {\\n    return this.getInstance().adapter;\\n  }\\n\\n  /**\\n   * Exposed {@link XBus}, so any kind of application can subscribe to {@link XEventsTypes}\\n   * without having to pass through a component.\\n   * This property is only available after installing the plugin.\\n   *\\n   * @returns The installed bus.\\n   * @throws If this property is accessed before calling `Vue.use(xPlugin)`.\\n   * @public\\n   */\\n  public static get bus(): XBus {\\n    return this.getInstance().bus;\\n  }\\n\\n  /**\\n   * {@link https://vuex.vuejs.org | Vuex Store} Is the place where all shared data\\n   * is saved.\\n   *\\n   * @returns The installed store.\\n   * @throws If this property is accessed before calling `Vue.use(xPlugin)`.\\n   * @public\\n   */\\n  public static get store(): Store<RootXStoreState> {\\n    return this.getInstance().store;\\n  }\\n\\n  /**\\n   * Safely retrieves the installed instance of the XPlugin.\\n   *\\n   * @returns The installed instance of the XPlugin.\\n   * @throws If this method is called before calling `Vue.use(xPlugin)`.\\n   * @internal\\n   */\\n  protected static getInstance(): XPlugin {\\n    if (!this.instance) {\\n      throw Error(\\\"XPlugin must be installed before accessing it's API.\\\");\\n    }\\n    return this.instance;\\n  }\\n\\n  /**\\n   * Record of modules that have been tried to be installed before the installation of the plugin.\\n   *\\n   * @internal\\n   */\\n  protected static pendingXModules: Partial<Record<XModuleName, AnyXModule>> = {};\\n\\n  /**\\n   * Instance of the installed plugin. Used to expose the bus and the adapter.\\n   *\\n   * @internal\\n   */\\n  protected static instance?: XPlugin;\\n\\n  /**\\n   * Bus for retrieving the observables when registering the wiring.\\n   *\\n   * @internal\\n   */\\n  protected bus: XBus;\\n\\n  /**\\n   * Adapter for the API, responsible for transforming requests and responses.\\n   *\\n   * @internal\\n   */\\n  protected adapter!: SearchAdapter;\\n\\n  /**\\n   * Set of the already installed {@link XModule | XModules} to avoid re-registering them.\\n   *\\n   * @internal\\n   */\\n  protected installedXModules = new Set<string>();\\n\\n  /**\\n   * True if the plugin has been installed in a Vue instance, in this case\\n   * {@link XModule |Xmodules} will be installed immediately. False otherwise, in this case\\n   * {@link XModule | XModules} will be installed lazily when the {@link XPlugin#install} method\\n   * is called.\\n   *\\n   * @internal\\n   */\\n  protected isInstalled = false;\\n\\n  /**\\n   * The install options of the plugin, where all the customization of\\n   * {@link XModule | XModules} is done.\\n   *\\n   * @internal\\n   */\\n  protected options!: XPluginOptions;\\n\\n  /**\\n   * The Vuex store, to pass to the wires for its registration, and to register the store\\n   * modules on it.\\n   *\\n   * @internal\\n   */\\n  protected store!: Store<any>;\\n  /**\\n   * The global Vue, passed by the install method. Used to apply the global mixin\\n   * {@link createXComponentAPIMixin}, and install the {@link https://vuex.vuejs.org/ | Vuex}\\n   * plugin.\\n   *\\n   * @internal\\n   */\\n  protected vue!: VueConstructor;\\n\\n  /**\\n   * Creates a new instance of the XPlugin with the given bus passed as parameter.\\n   *\\n   * @param bus - The {@link XBus} implementation to use for the plugin.\\n   *\\n   * @public\\n   */\\n  public constructor(bus: XBus) {\\n    this.bus = bus;\\n  }\\n\\n  /**\\n   * If the plugin has already been installed, it immediately registers a {@link XModule}. If it\\n   * has not been installed yet, it stores the module in a list until the plugin is installed.\\n   *\\n   * @param xModule - The module to register.\\n   *\\n   * @public\\n   */\\n  static registerXModule(xModule: AnyXModule): void {\\n    if (this.instance) {\\n      this.instance.registerXModule(xModule);\\n    } else {\\n      this.lazyRegisterXModule(xModule);\\n    }\\n  }\\n\\n  /**\\n   * Utility method for resetting the installed instance of the plugin.\\n   *\\n   * @remarks Use only for testing.\\n   *\\n   * @internal\\n   */\\n  static resetInstance(): void {\\n    cleanGettersProxyCache();\\n    this.instance = undefined;\\n  }\\n\\n  /**\\n   * Stores the {@link XModule} in a dictionary, so it can be registered later in the install\\n   * process.\\n   *\\n   * @param xModule - The module to register.\\n   *\\n   * @internal\\n   */\\n  protected static lazyRegisterXModule(xModule: AnyXModule): void {\\n    this.pendingXModules[xModule.name] = xModule;\\n  }\\n\\n  /**\\n   * Installs the plugin into the Vue instance.\\n   *\\n   * @param vue - The GlobalVue object.\\n   * @param options - The options to install this plugin with.\\n   * @throws If the XPlugin has already been installed, or the options are not valid.\\n   *\\n   * @internal\\n   */\\n  install(vue: VueConstructor, options?: XPluginOptions): void {\\n    if (this.isInstalled) {\\n      throw new Error('XPlugin has already been installed');\\n    }\\n    assertXPluginOptionsAreValid(options);\\n    XPlugin.instance = this;\\n    this.vue = vue;\\n    this.options = options;\\n    this.adapter = options.adapter;\\n    this.createAdapterConfigChangedListener();\\n    this.registerStore();\\n    this.applyMixins();\\n    this.registerFilters();\\n    this.registerInitialModules();\\n    this.registerPendingXModules();\\n    this.isInstalled = true;\\n  }\\n\\n  /**\\n   * Performs the registration of a {@link XModule}.\\n   *\\n   * @param xModule - The module to register.\\n   *\\n   * @internal\\n   */\\n  protected registerXModule(xModule: AnyXModule): void {\\n    if (!this.installedXModules.has(xModule.name)) {\\n      const customizedXModule = this.customizeXModule(xModule);\\n      this.registerStoreModule(customizedXModule);\\n      this.registerWiring(customizedXModule);\\n      this.registerStoreEmitters(customizedXModule);\\n      this.installedXModules.add(xModule.name);\\n    }\\n  }\\n\\n  /**\\n   * Performs a customization of a {@link XModule} using the XPlugin public and private options.\\n   *\\n   * @param xModule - The module to customize.\\n   * @returns The customized xModule.\\n   *\\n   * @internal\\n   */\\n  protected customizeXModule({\\n    name,\\n    wiring,\\n    storeModule,\\n    storeEmitters,\\n    ...restXModule\\n  }: AnyXModule): AnyXModule {\\n    const { wiring: wiringOptions, config }: XModuleOptions<XModuleName> =\\n      this.options.xModules?.[name] ?? {};\\n\\n    const { storeModule: storeModuleOptions, storeEmitters: emittersOptions } =\\n      this.options.__PRIVATE__xModules?.[name] ?? {};\\n\\n    return {\\n      name,\\n      wiring: wiringOptions ? deepMerge({}, wiring, wiringOptions) : wiring,\\n      storeModule: this.customizeStoreModule(storeModule, storeModuleOptions ?? {}, config),\\n      storeEmitters: emittersOptions\\n        ? deepMerge({}, storeEmitters, emittersOptions)\\n        : storeEmitters,\\n      ...restXModule\\n    };\\n  }\\n\\n  /**\\n   * Performs the registration of the wiring, retrieving the observable for each event, and\\n   * executing each wire.\\n   *\\n   * @param xModule - The {@link XModule} to register its wiring.\\n   *\\n   * @internal\\n   */\\n  protected registerWiring({ wiring }: AnyXModule): void {\\n    forEach(wiring, (event, wires: Dictionary<AnyWire>) => {\\n      // Obtain the observable\\n      const observable = this.bus.on(event, true);\\n      // Register event wires\\n      forEach(wires, (_, wire) => {\\n        wire(observable, this.store, this.bus.on.bind(this.bus));\\n      });\\n    });\\n  }\\n\\n  /**\\n   * Registers a {@link https://vuex.vuejs.org/ | Vuex} store module under the 'x' module.\\n   *\\n   * @param xModule - The {@link XModule} to register its Store Module.\\n   *\\n   * @internal\\n   */\\n  protected registerStoreModule({ name, storeModule }: AnyXModule): void {\\n    (storeModule as Module<any, any>).namespaced = true;\\n    this.store.registerModule(['x', name], storeModule);\\n  }\\n\\n  /**\\n   * Overrides a {@link https://vuex.vuejs.org/ | Vuex} store module definition.\\n   *\\n   * Priority of configuration merging.\\n   * 1st {@link XPluginOptions.xModules | xModules XPlugin option}.\\n   * 2nd {@link XPluginOptions.__PRIVATE__xModules | Private xModules XPlugin option}.\\n   * 3rd {@link XStoreModule.state | Default state of the xModule}.\\n   *\\n   * @param defaultModule - The default store module to override.\\n   * @param moduleOptions - The state, actions, mutations and getters to override the defaultModule.\\n   * @param configOptions - The state config to override the moduleOptions.\\n   * @returns The {@link XStoreModule} customized.\\n   *\\n   * @internal\\n   */\\n  protected customizeStoreModule(\\n    { state: defaultState, ...actionsGettersMutations }: AnyXStoreModule,\\n    { state: xModuleState, ...newActionsGettersMutations }: AnyXStoreModuleOption,\\n    configOptions: unknown\\n  ): AnyXStoreModule {\\n    const configOptionsObject = configOptions ? { config: configOptions } : {};\\n    const customizedModule = deepMerge({}, actionsGettersMutations, newActionsGettersMutations);\\n    customizedModule.state = deepMerge(defaultState(), xModuleState, configOptionsObject);\\n    return customizedModule;\\n  }\\n\\n  /**\\n   * Registers the store emitters, making them emit the event when the part of the state selected\\n   * changes.\\n   *\\n   * @param xModule - The {@link XModule} to register its Store Emitters.\\n   *\\n   * @internal\\n   */\\n  protected registerStoreEmitters(xModule: AnyXModule): void {\\n    registerStoreEmitters(xModule, this.bus, this.store);\\n  }\\n\\n  /**\\n   * Registers the {@link https://vuex.vuejs.org/ | Vuex} store. If the store has not been passed\\n   * through the {@link XPluginOptions} object, it creates one, and injects it in the Vue\\n   * prototype. Then it register an x module in the store, to safe scope all the\\n   * {@link XModule | XModules} dynamically installed.\\n   *\\n   * @internal\\n   */\\n  protected registerStore(): void {\\n    this.vue.use(Vuex); // We can safely install Vuex because if it is already installed Vue\\n    // will simply ignore it\\n    this.store =\\n      this.options.store ??\\n      new Store({\\n        strict: process.env.NODE_ENV !== 'production'\\n      });\\n    if (!this.options.store) {\\n      this.vue.prototype.$store = this.store;\\n    }\\n    this.store.registerModule('x', RootXStoreModule);\\n  }\\n\\n  /**\\n   * Applies the {@link createXComponentAPIMixin} mixin in the global Vue.\\n   *\\n   * @internal\\n   */\\n  protected applyMixins(): void {\\n    this.vue.mixin(createXComponentAPIMixin(this.bus));\\n  }\\n\\n  /**\\n   * Registers the initial {@link XModule | XModules} during the {@link XPlugin} installation.\\n   *\\n   * @internal\\n   */\\n  protected registerInitialModules(): void {\\n    this.options.initialXModules?.forEach(xModule => {\\n      this.registerXModule(xModule);\\n    });\\n  }\\n\\n  /**\\n   * Registers the pending {@link XModule | XModules}, that requested to be registered before the\\n   * installation of the plugin.\\n   *\\n   * @internal\\n   */\\n  protected registerPendingXModules(): void {\\n    forEach(XPlugin.pendingXModules, (_, xModule) => {\\n      this.registerXModule(xModule);\\n    });\\n    XPlugin.pendingXModules = {};\\n  }\\n\\n  /**\\n   * If the received adapter supports it, it registers a listener to emit the\\n   * {@link XEventsTypes.AdapterConfigChanged} event whenever the config of it changes.\\n   *\\n   * @internal\\n   */\\n  protected createAdapterConfigChangedListener(): void {\\n    this.options.adapter.addConfigChangedListener?.(newAdapterConfig => {\\n      this.bus.emit('AdapterConfigChanged', newAdapterConfig);\\n    });\\n  }\\n\\n  /**\\n   * Registers filters globally.\\n   *\\n   * @internal\\n   */\\n  protected registerFilters(): void {\\n    forEach(FILTERS_REGISTRY, (filterName, filterFunction) =>\\n      this.vue.filter(filterName, filterFunction)\\n    );\\n  }\\n}\\n\\n/**\\n * Vue plugin that modifies each component instance, extending them with the\\n * {@link XComponentAPI | X Component API }.\\n *\\n * @example\\n * Minimal installation example. A search adapter is needed for the plugin to work, and connect to\\n * the API.\\n * ```typescript\\n * const adapter = new EmpathyAdapterBuilder()\\n *  .withConfiguration({instance: 'my-instance-id'})\\n *  .build();\\n * Vue.use(xPlugin, { adapter });\\n * ```\\n *\\n * @example\\n * If you are using {@link https://vuex.vuejs.org/ | Vuex} in your project you must install its\\n *   plugin, and instantiate an store before installing the XPlugin:\\n * ```typescript\\n * Vue.use(Vuex);\\n * const store = new Store({ ... });\\n * Vue.use(xPlugin, { adapter, store });\\n * ```\\n * @public\\n */\\nexport const xPlugin = new XPlugin(bus);\\n\"],\"names\":[],\"mappings\":\"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\"}")}}]);