(window.webpackJsonp=window.webpackJsonp||[]).push([[882],{1163:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"base-events-modal.vue.js","sources":["../../../../src/components/modals/base-events-modal.vue"],"sourcesContent":["<template>\\n  <BaseModal\\n    @click:overlay=\\"emitBodyClickEvent\\"\\n    @focusin:body=\\"emitBodyClickEvent\\"\\n    :animation=\\"animation\\"\\n    :open=\\"isOpen\\"\\n  >\\n    <slot />\\n  </BaseModal>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import { XEvent } from \'../../wiring/events.types\';\\n  import { XOn } from \'../decorators/bus.decorators\';\\n  import { WireMetadata } from \'../../wiring/wiring.types\';\\n  import { isElementEqualOrContained } from \'../../utils/html\';\\n  import BaseModal from \'./base-modal.vue\';\\n\\n  /**\\n   * Component containing a modal that emits a {@link XEventsTypes.UserClickedCloseEventsModal} when\\n   * clicking outside the content rendered in the default slot and can receive, through the\\n   * eventsToCloseModal prop, a list of {@link XEvent | xEvents} to listen to in order to close\\n   * also the modal, eventsToOpenModal prop,  another list of {@link XEvent | xEvents} to customize\\n   * the events to listen to open the modal and a prop, displayOverlay, to display an\\n   * overlay over the rest of the html. The default slot offers the possibility to customize the\\n   * modal content.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: { BaseModal }\\n  })\\n  export default class BaseEventsModal extends Vue {\\n    /**\\n     * Animation to use for opening/closing the modal.\\n     */\\n    @Prop()\\n    public animation?: Vue | string;\\n    /**\\n     * Array of {@link XEvent | xEvents} to listen to open the modal.\\n     */\\n    @Prop({ default: (): XEvent[] => [\'UserClickedOpenEventsModal\'] })\\n    public eventsToOpenModal!: XEvent[];\\n\\n    /**\\n     * Array of {@link XEvent | xEvents} to listen to close the modal.\\n     */\\n    @Prop({\\n      default: (): XEvent[] => [\'UserClickedCloseEventsModal\', \'UserClickedOutOfEventsModal\']\\n    })\\n    public eventsToCloseModal!: XEvent[];\\n\\n    /**\\n     * Event to emit when any part of the website out of the modal has been clicked.\\n     */\\n    @Prop({ default: \'UserClickedOutOfEventsModal\' })\\n    public bodyClickEvent!: XEvent;\\n\\n    /**\\n     * Whether the modal is open or not.\\n     */\\n    protected isOpen = false;\\n\\n    /** The element that opened the modal. */\\n    protected openerElement?: HTMLElement;\\n\\n    /**\\n     * Opens the modal.\\n     *\\n     * @param _payload - The payload of the event that opened the modal.\\n     * @param metadata - The metadata of the event that opened the modal.\\n     *\\n     * @internal\\n     */\\n    @XOn(component => (component as BaseEventsModal).eventsToOpenModal)\\n    openModal(_payload: unknown, metadata: WireMetadata): void {\\n      if (!this.isOpen) {\\n        this.openerElement = metadata.target;\\n        this.isOpen = true;\\n      }\\n    }\\n\\n    /**\\n     * Closes the modal.\\n     *\\n     * @internal\\n     */\\n    @XOn(component => (component as BaseEventsModal).eventsToCloseModal)\\n    closeModal(): void {\\n      if (this.isOpen) {\\n        this.isOpen = false;\\n      }\\n    }\\n\\n    /**\\n     * Emits the event defined in the {@link BaseEventsModal.bodyClickEvent} event unless the passed\\n     * event target is the button that opened the modal.\\n     *\\n     * @param event - The event that triggered the close attempt.\\n     * @public\\n     */\\n    protected emitBodyClickEvent(event: MouseEvent | FocusEvent): void {\\n      // Prevents clicking the open button when the panel is already open to close the panel.\\n      if (\\n        !this.openerElement ||\\n        !isElementEqualOrContained(this.openerElement, event.target as HTMLElement)\\n      ) {\\n        this.$x.emit(this.bodyClickEvent, undefined, { target: this.$el as HTMLElement });\\n      }\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\nThe `BaseEventsModal` component handles the modal open/close state via the events passed via props.\\nIts configured by default to work as a modal for a whole search application, but if the events are\\nchanged, it can work as a modal that is opened/closed when the events it is listening are emitted.\\n\\n### Basic usage\\n\\nThe component interacts with the open and close components, which are preconfigured by default to\\nemit the same events that the `BaseEventsModal` component is listening to:\\n\\n```vue\\n<template>\\n  <div>\\n    <BaseEventsModalOpen>Open</BaseEventsModalOpen>\\n    <BaseEventsModal>\\n      <BaseEventsModalClose>Close</BaseEventsModalClose>\\n      <img src=\\"success.png\\" />\\n    </BaseEventsModal>\\n  </div>\\n</template>\\n\\n<script>\\n  import { BaseEventsModalOpen, BaseEventsModal } from \'@empathyco/x-components\';\\n\\n  export default {\\n    name: \'ModalTest\',\\n    components: {\\n      BaseEventsModalOpen,\\n      BaseEventsModal\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Customizing the events\\n\\nIf needed, the events to open/close the modal can be changed. The modal can listen one or more\\nevents. To do so, the `eventsToCloseModal` and `eventsToOpenModal` props can be used. Below you can\\nsee a full example on how this would work with custom events.\\n\\n```vue\\n<template>\\n  <div>\\n    <BaseEventsModalOpen openingEvent=\\"UserClickedOpenMyCustomModal\\">Open</BaseEventsModalOpen>\\n    <BaseEventsModal\\n      :eventsToCloseModal=\\"eventsToCloseModal\\"\\n      :eventsToOpenModal=\\"eventsToOpenModal\\"\\n    >\\n      <BaseEventsModalClose closingEvent=\\"UserClickedCloseMyCustomModalFromHeader\\">\\n        Close from header\\n      </BaseEventsModalClose>\\n      <img src=\\"success.png\\" />\\n      <BaseEventsModalClose closingEvent=\\"UserClickedCloseMyCustomModalFromFooter\\">\\n        Close from footer\\n      </BaseEventsModalClose>\\n    </BaseEventsModal>\\n  </div>\\n</template>\\n\\n<script>\\n  import {\\n    BaseEventsModalOpen,\\n    BaseEventsModal,\\n    BaseEventsModalClose\\n  } from \'@empathyco/x-components\';\\n\\n  export default {\\n    name: \'ModalTest\',\\n    components: {\\n      BaseEventsModalOpen,\\n      BaseEventsModal,\\n      BaseEventsModalClose\\n    }\\n  };\\n<\/script>\\n```\\n\\n## Events\\n\\nA list of events that the component will emit:\\n\\n- `UserClickedCloseEventsModal`: the event is emitted after clicking outside the content rendered in\\n  the default slot.\\n- `UserClickedOutOfEventsModal`: the event is emitted after clicking outside the modal.\\n- Custom events to open or close the modal.\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);