(window.webpackJsonp=window.webpackJsonp||[]).push([[1022],{1290:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"renderless-filter.vue.js","sources":["../../../../../../src/x-modules/facets/components/filters/renderless-filter.vue"],"sourcesContent":["<script lang=\\"ts\\">\\n  import Vue, { CreateElement, VNode } from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import { BooleanFilter } from \'@empathyco/x-types\';\\n  import { xComponentMixin } from \'../../../../components\';\\n  import { VueCSSClasses } from \'../../../../utils/types\';\\n  import { XEvent, XEventsTypes } from \'../../../../wiring/events.types\';\\n  import { facetsXModule } from \'../../x-module\';\\n\\n  /**\\n   * Renders default slot content. It binds to the default slot a\\n   * {@link @empathyco/x-types#BooleanFilter | BooleanFilter}, the {@link XEvent | XEvents}\\n   * that will be emitted when clicking the content, the css classes and if the content should be\\n   * disabled.\\n   *\\n   * @remarks The default slot expects a root element, if it receives a list of elements, it will\\n   * renders the first element.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    mixins: [xComponentMixin(facetsXModule)]\\n  })\\n  export default class RenderlessFilter extends Vue {\\n    /** The filter data to render. */\\n    @Prop({ required: true })\\n    public filter!: BooleanFilter;\\n\\n    /** Additional events with its payload to emit when the filter is clicked. */\\n    @Prop()\\n    public clickEvents?: Partial<XEventsTypes>;\\n\\n    /**\\n     * The events that will be emitted when the filter is clicked.\\n     *\\n     * @returns The events to be emitted when the filter is clicked.\\n     * @internal\\n     */\\n    protected get events(): Partial<XEventsTypes> {\\n      return {\\n        UserClickedAFilter: this.filter,\\n        ...this.clickEvents\\n      };\\n    }\\n\\n    /**\\n     * The events to emit to the bus.\\n     *\\n     * @internal\\n     */\\n    protected emitEvents(): void {\\n      Object.entries(this.events).forEach(([event, payload]) => {\\n        this.$x.emit(event as XEvent, payload, { target: this.$el as HTMLElement });\\n      });\\n    }\\n\\n    /**\\n     * Returns `true` when the filter should be disabled.\\n     *\\n     * @returns `true` if the filter should be disabled.\\n     * @internal\\n     */\\n    protected get isDisabled(): boolean {\\n      return this.filter.totalResults === 0;\\n    }\\n\\n    /**\\n     * Dynamic CSS classes to apply to the component.\\n     *\\n     * @returns The dynamic CSS classes to apply to the component.\\n     * @internal\\n     */\\n    protected get cssClasses(): VueCSSClasses {\\n      return [\\n        \'x-filter\',\\n        {\\n          \'x-filter--is-selected\': this.filter.selected,\\n          \'x-filter--is-disabled\': this.isDisabled\\n        }\\n      ];\\n    }\\n\\n    render(h: CreateElement): VNode {\\n      return (\\n        this.$scopedSlots.default?.({\\n          filter: this.filter,\\n          // eslint-disable-next-line @typescript-eslint/unbound-method\\n          clickFilter: this.emitEvents,\\n          cssClasses: this.cssClasses,\\n          isDisabled: this.isDisabled\\n        })?.[0] ?? h()\\n      );\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\nRenders default slot content. It binds to the default slot a filter, the events that will be emitted\\nwhen clicking the content, the css classes and if the content should be disabled.\\n\\n### Basic usage\\n\\n```vue\\n<RenderlessFilter :filter=\\"filter\\" />\\n```\\n\\n### Customizing its contents and adding new events\\n\\n```vue\\n<template>\\n  <RenderlessFilter\\n    :filter=\\"filter\\"\\n    :clickEvents=\\"clickEvents\\"\\n    v-slot=\\"{ filter, clickFilter, cssClasses, isDisabled }\\"\\n  >\\n    <button @click=\\"clickFilter\\" :class=\\"cssClasses\\" :disabled=\\"isDisabled\\">\\n      {{ filter.label }}\\n    </button>\\n  </RenderlessFilter>\\n</template>\\n\\n<script>\\n  import { RenderlessFilter } from \'@empathyco/x-components\';\\n\\n  export default {\\n    components: {\\n      RenderlessFilter\\n    },\\n    props: [\'filter\'],\\n    computed: {\\n      clickEvents() {\\n        return { UserClickedAHierarchicalFilter: this.filter };\\n      }\\n    }\\n  };\\n<\/script>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);