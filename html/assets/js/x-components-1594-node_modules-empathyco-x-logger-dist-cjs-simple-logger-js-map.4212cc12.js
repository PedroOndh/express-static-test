(window.webpackJsonp=window.webpackJsonp||[]).push([[745],{1513:function(A,e){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"simple-logger.js","sourceRoot":"","sources":["../../src/simple-logger.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger, LogLevel } from \'./logger.interfaces\';\\n\\nexport class SimpleLogger implements Logger {\\n  private static commonConsoleLevel: LogLevel = LogLevel.warn;\\n  private static commonServerLevel: LogLevel = LogLevel.error;\\n  private readonly instanceTags: any[] = [];\\n\\n  public constructor(...args: any[]) {\\n    this.instanceTags = args;\\n  }\\n\\n  public set consoleLevel(level: LogLevel) {\\n    SimpleLogger.commonConsoleLevel = level;\\n  }\\n\\n  public get consoleLevel(): LogLevel {\\n    return SimpleLogger.commonConsoleLevel;\\n  }\\n\\n  public set serverLevel(level: LogLevel) {\\n    SimpleLogger.commonServerLevel = level;\\n  }\\n\\n  public get serverLevel(): LogLevel {\\n    return SimpleLogger.commonServerLevel;\\n  }\\n\\n  error(...args: any[]): void {\\n    this.log(LogLevel.error, args);\\n  }\\n\\n  warn(...args: any[]): void {\\n    this.log(LogLevel.warn, args);\\n  }\\n\\n  info(...args: any[]): void {\\n    this.log(LogLevel.info, args);\\n  }\\n\\n  debug(...args: any[]): void {\\n    this.log(LogLevel.debug, args);\\n  }\\n\\n  trace(...args: any[]): void {\\n    this.log(LogLevel.trace, args);\\n  }\\n\\n  child(...args: any[]): Logger {\\n    return new SimpleLogger(...this.instanceTags, ...args);\\n  }\\n\\n  private log(level: LogLevel, args: any[]): void {\\n    if (this.consoleLevel >= level) {\\n      this.sendLogToConsole(level, ...this.instanceTags.concat(args));\\n    }\\n    if (this.serverLevel >= level) {\\n      this.sendLogToServer(level, ...this.instanceTags.concat(args));\\n    }\\n  }\\n\\n  private sendLogToConsole(level: LogLevel, ...args: any[]): void {\\n    const consoleFunctionName = LogLevel[level] as Exclude<keyof typeof LogLevel, \'silent\'>;\\n    // To prevent failure on old browsers\\n    if (console[consoleFunctionName]) {\\n      console[consoleFunctionName](...args);\\n    } else {\\n      console.log(...args);\\n    }\\n  }\\n\\n  private sendLogToServer(level: LogLevel, ...args: any[]): void {\\n    console.log(LogLevel[level], \'sending to server...\', ...args);\\n  }\\n}\\n"]}')}}]);