(window.webpackJsonp=window.webpackJsonp||[]).push([[1045],{1017:function(n,e){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"auto-progress-bar.vue.js","sources":["../../../src/components/auto-progress-bar.vue"],"sourcesContent":["<template>\\n  <div v-if=\\"isLoading\\" class=\\"x-progress-bar\\" data-test=\\"progress-bar\\" role=\\"progressbar\\">\\n    <div class=\\"x-progress-bar__line\\" :style=\\"cssStyles\\" data-test=\\"progress-bar-line\\"></div>\\n  </div>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n\\n  /**\\n   * An auto progress bar component.\\n   *\\n   * @public\\n   */\\n  @Component\\n  export default class AutoProgressBar extends Vue {\\n    /**\\n     * A boolean flag indicating if the bar is loading.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: true })\\n    public isLoading!: boolean;\\n\\n    /**\\n     * The duration in seconds of the progress bar.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: 5 })\\n    public durationInSeconds!: number;\\n\\n    /**\\n     * Computed property to calculate the animation\'s duration.\\n     *\\n     * @returns The CSS styles of the animation.\\n     *\\n     * @internal\\n     */\\n    protected get cssStyles(): Partial<CSSStyleDeclaration> {\\n      return { animationDuration: `${this.durationInSeconds}s` };\\n    }\\n  }\\n<\/script>\\n\\n<style lang=\\"scss\\">\\n  .x-progress-bar {\\n    display: inline-block;\\n    overflow: hidden;\\n    background-color: var(--x-color-background-progress-bar-default, #b3b3b3);\\n    border-radius: var(--x-size-border-radius-progress-bar-default, 24px);\\n\\n    &__line {\\n      height: var(--x-size-height-progress-bar-line-default, 4px);\\n      width: var(--x-size-width-progress-bar-line-default, 272px);\\n      background-color: var(--x-color-background-progress-bar-line-default, #1a1a1a);\\n      border-radius: var(--x-size-border-radius-progress-bar-default, 24px);\\n      animation: slide linear;\\n      transform-origin: left;\\n    }\\n  }\\n  @keyframes slide {\\n    0% {\\n      transform: translateX(-100%);\\n    }\\n    100% {\\n      transform: translateX(0);\\n    }\\n  }\\n</style>\\n\\n<docs lang=\\"mdx\\">\\n## See it in action\\n\\nHere you have a basic example of how the auto progress bar is rendered.\\n\\n```vue\\n<template>\\n  <AutoProgressBar :isLoading=\\"isLoading\\" :durationInSeconds=\\"delayInSeconds\\" />\\n</template>\\n\\n<script>\\n  export default {\\n    name: \'AutoProgressBarDemo\',\\n    data() {\\n      return {\\n        isLoading: true,\\n        durationInSeconds: 100\\n      };\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Play with props\\n\\nIn this example, the auto progress bar has been set to do an animation for 5 seconds. There is a way\\nto cancel the animation by sending the isLoading prop to false.\\n\\n```vue\\n<template>\\n  <AutoProgressBar :durationInSeconds=\\"5\\" :isLoading=\\"true\\" />\\n</template>\\n\\n<script>\\n  export default {\\n    name: \'AutoProgressBarDemo\'\\n  };\\n<\/script>\\n```\\n\\n## Events\\n\\nThis component emits the following events:\\n\\n- `UserClickedARedirection` after the user clicks the redirection button.\\n- `UserClickedAbortARedirection` after the user clicks the abort redirection button.\\n</docs>\\n"],"names":["const"],"mappings":";;;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);