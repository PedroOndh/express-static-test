(window.webpackJsonp=window.webpackJsonp||[]).push([[602],{1383:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"popular-searches.vue.js","sources":["../../../../../src/x-modules/popular-searches/components/popular-searches.vue"],"sourcesContent":["<template>\\n  <BaseSuggestions\\n    :suggestions=\\"popularSearches\\"\\n    :maxItemsToRender=\\"maxItemsToRender\\"\\n    class=\\"x-popular-searches\\"\\n    data-test=\\"popular-searches\\"\\n    :animation=\\"animation\\"\\n  >\\n    <template #default=\\"{ suggestion, index }\\">\\n      \x3c!--\\n        @slot Popular Search item\\n            @binding {Suggestion} suggestion - Popular Search suggestion data\\n            @binding {number} index - Popular Search suggestion index\\n      --\x3e\\n      <slot name=\\"suggestion\\" v-bind=\\"{ suggestion, index }\\">\\n        <PopularSearch :suggestion=\\"suggestion\\" class=\\"x-popular-searches__suggestion\\">\\n          <template #default>\\n            \x3c!--\\n              @slot Popular Search content\\n                  @binding {Suggestion} suggestion - Popular Search suggestion data\\n                  @binding {number} index - Popular Search suggestion index\\n            --\x3e\\n            <slot name=\\"suggestion-content\\" v-bind=\\"{ suggestion, index }\\" />\\n          </template>\\n        </PopularSearch>\\n      </slot>\\n    </template>\\n  </BaseSuggestions>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { Suggestion } from \'@empathyco/x-types\';\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import BaseSuggestions from \'../../../components/suggestions/base-suggestions.vue\';\\n  import { Getter } from \'../../../components/decorators/store.decorators\';\\n  import { xComponentMixin } from \'../../../components/x-component.mixin\';\\n  import { popularSearchesXModule } from \'../x-module\';\\n  import PopularSearch from \'./popular-search.vue\';\\n\\n  /**\\n   * Simple popular-searches component that renders a list of suggestions, allowing the user to\\n   * select one of them, and emitting the needed events.\\n   * A popular search is just a query that has been searched a lot in a certain period and may\\n   * optionally have associated a set of filters.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: { PopularSearch, BaseSuggestions },\\n    mixins: [xComponentMixin(popularSearchesXModule)]\\n  })\\n  export default class PopularSearches extends Vue {\\n    /**\\n     * Animation component that will be used to animate the suggestions.\\n     *\\n     * @public\\n     */\\n    @Prop()\\n    protected animation!: Vue;\\n\\n    /**\\n     * Number of popular searches to be rendered.\\n     *\\n     * @public\\n     */\\n    @Prop()\\n    protected maxItemsToRender?: number;\\n\\n    /**\\n     * The list of popular searches.\\n     *\\n     * @internal\\n     */\\n    @Getter(\'popularSearches\', \'popularSearches\')\\n    public popularSearches!: Suggestion[];\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\n### Default Usage\\n\\nYou don\'t need to pass any props, or slots. Simply add the component, and when it has any popular\\nsearches it will show them.\\n\\n```vue\\n<PopularSearches />\\n```\\n\\nThe component has two optional props. `animation` to render the component with an animation and\\n`maxItemToRender` to limit the number of popular searches will be rendered (by default it is 5).\\n\\n```vue\\n<PopularSearches :animation=\\"FadeAndSlide\\" :maxItemsToRender=\\"10\\" />\\n```\\n\\n### Overriding Popular Search\'s Content\\n\\nYou can use your custom implementation of the Popular Search\'s content. In the example below,\\ninstead of using the default Popular Search\'s content, an icon is added, as well as a span with the\\nquery of the Popular Search\'s suggestion.\\n\\n```vue\\n<PopularSearches>\\n  <template #suggestion-content=\\"{ suggestion }\\">\\n    <img class=\\"x-popular-search__icon\\" src=\\"./popular-search-icon.svg\\" />\\n    <span class=\\"x-popular-search__query\\">{{ suggestion.query }}</span>\\n  </template>\\n</PopularSearches>\\n```\\n\\n### Adding a Custom Popular Search Item\\n\\nYou can use your custom implementation for the whole Popular Search item. In the example below, we\\nchange the default implementation of the Popular Search in Popular Searches. A custom Popular Search\\nimplementation is added, it has an image and a span as content (as in the previous example). Also, a\\nbutton with a user customized behaviour is added at the same hierarchical level as the Popular\\nSearch component.\\n\\n```vue\\n<PopularSearches>\\n  <template #suggestion=\\"{suggestion}\\">\\n    <PopularSearch :suggestion=\\"suggestion\\">\\n      <template #default=\\"{suggestion}\\">\\n        <img class=\\"x-popular-search__icon\\" src=\\"./popular-search-icon.svg\\" />\\n        <span class=\\"x-popular-search__query\\">{{ suggestion.query }}</span>\\n      </template>\\n    </PopularSearch>\\n    <button>Custom Behaviour</button>\\n  </template>\\n</PopularSearches>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);