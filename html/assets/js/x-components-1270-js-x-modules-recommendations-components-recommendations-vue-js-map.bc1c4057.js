(window.webpackJsonp=window.webpackJsonp||[]).push([[628],{1407:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"recommendations.vue.js","sources":["../../../../../src/x-modules/recommendations/components/recommendations.vue"],"sourcesContent":["<template>\\n  <NoElement v-if=\\"recommendations.length\\">\\n    \x3c!--\\n      @slot Customized Recommendations layout.\\n          @binding {Result[]} recommendations - Recommendations to render.\\n          @binding {Vue} animation - Animation to animate the elements.\\n    --\x3e\\n    <slot name=\\"layout\\" v-bind=\\"{ animation, recommendations }\\">\\n      <component\\n        :is=\\"animation\\"\\n        tag=\\"ul\\"\\n        data-test=\\"recommendations\\"\\n        class=\\"x-list x-recommendations\\"\\n      >\\n        <li\\n          v-for=\\"recommendation in recommendations\\"\\n          :key=\\"recommendation.id\\"\\n          class=\\"x-recommendations__item\\"\\n          data-test=\\"recommendation-item\\"\\n        >\\n          \x3c!--\\n            @slot (Required) Recommendation content.\\n            @binding {recommendation} recommendation - Recommendation data.\\n          --\x3e\\n          <slot :recommendation=\\"recommendation\\" />\\n        </li>\\n      </component>\\n    </slot>\\n  </NoElement>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { Component, Prop, Provide } from \'vue-property-decorator\';\\n  import { Result } from \'@empathyco/x-types\';\\n  import Vue from \'vue\';\\n  import { State } from \'../../../components/decorators/store.decorators\';\\n  import { NoElement } from \'../../../components/no-element\';\\n  import { xComponentMixin } from \'../../../components/x-component.mixin\';\\n  import { PropsWithType } from \'../../../utils/types\';\\n  import { XEventsTypes } from \'../../../wiring/events.types\';\\n  import { recommendationsXModule } from \'../x-module\';\\n\\n  /**\\n   * It renders a list of recommendations from the\\n   * {@link RecommendationsState.recommendations | Recommendations} state by default.\\n   * The component provides the slot layout which wraps the whole component with the\\n   * recommendations bounded. It also provides the default slot to customize the item, which is\\n   * within the layout slot, with the recommendation bounded. Each recommendation should be\\n   * represented by a {@link BaseResultLink | result link component} besides any other component.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    mixins: [xComponentMixin(recommendationsXModule)],\\n    components: {\\n      NoElement\\n    }\\n  })\\n  export default class Recommendations extends Vue {\\n    /**\\n     * The module\'s list of recommendations.\\n     *\\n     * @public\\n     */\\n    @State(\'recommendations\', \'recommendations\')\\n    public storedRecommendations!: Result[];\\n\\n    /**\\n     * Animation component that will be used to animate the recommendations.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: \'ul\' })\\n    protected animation!: Vue;\\n\\n    /**\\n     * Number of recommendations to be rendered.\\n     *\\n     * @public\\n     */\\n    @Prop()\\n    protected maxItemsToRender?: number;\\n\\n    /**\\n     * The additional events to be emitted by the mandatory {@link BaseResultLink} component.\\n     *\\n     * @public\\n     */\\n    @Provide()\\n    protected resultClickExtraEvents: PropsWithType<XEventsTypes, Result>[] = [\\n      \'UserClickedARecommendation\'\\n    ];\\n\\n    /**\\n     * Slices the recommendations from the state.\\n     *\\n     * @returns - The list of recommendations slice by the number of items to render.\\n     *\\n     * @internal\\n     */\\n    protected get recommendations(): Result[] {\\n      return this.storedRecommendations.slice(0, this.maxItemsToRender);\\n    }\\n  }\\n<\/script>\\n\\n<style lang=\\"scss\\" scoped>\\n  .x-recommendations {\\n    list-style-type: none;\\n  }\\n</style>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\nIt renders a list of recommendations from recommendations state by default. The component provides\\nthe slot layout which wraps the whole component with the recommendations bound. It also provides the\\ndefault slot to customize the item, which is within the layout slot, with the recommendation bound.\\nEach recommendation should be represented by a BaseResultLink component besides any other component.\\n\\n### Basic example\\n\\n### Adding a custom BaseResultLink component\\n\\nA BaseResultLink **must** be used inside the Recommendations component. In the example below the\\nBaseResultLink default slot is filled with an image of the result and a span for the title. Besides\\nthat, an additional button has been added.\\n\\n```vue\\n<Recommendations>\\n  <template #default=\\"{ recommendation }\\">\\n    <BaseResultLink :result=\\"recommendation\\" class=\\"x-recommendations__link\\">\\n      <template #default=\\"{ result }\\">\\n        <img :src=\\"result.images[0]\\" class=\\"x-recommendations__image\\"/>\\n        <span class=\\"x-recommendations__title\\">{{ result.name }}</span>\\n      </template>\\n    </BaseResultLink>\\n    <button>Custom Behaviour</button>\\n  </template>\\n</Recommendations>\\n```\\n\\n### Overriding layout content\\n\\nIt renders a list of recommendations customizing the layout slot. In the example below, instead of\\nusing the default Recommendations content, a BaseGrid component is used to render the\\nrecommendations.\\n\\n```vue\\n<Recommendations :animation=\\"staggeredFadeAndSlide\\">\\n  <template #layout=\\"{ recommendations, animation }\\">\\n    <BaseGrid :items=\\"recommendations\\" :animation=\\"animation\\">\\n      <template #result=\\"{ item }\\">\\n        <BaseResultLink :result=\\"item\\">\\n          <BaseResultImage :result=\\"item\\" />\\n          <span class=\\"x-result__title\\">{{ item.name }}</span>\\n        </BaseResultLink>\\n      </template>\\n    </BaseGrid>\\n  </template>\\n</Recommendations>\\n```\\n\\n### Play with props\\n\\nIn this example, the suggestions has been limited to render a maximum of 3 items.\\n\\n_Type “puzzle” or another toy in the input field to try it out!_\\n\\n```vue\\n<template>\\n  <BaseSuggestions :suggestions=\\"suggestions\\" :maxItemToRender=\\"3\\" />\\n</template>\\n\\n<script>\\n  import { BaseSuggestions } from \'@empathyco/x-components\';\\n\\n  export default {\\n    name: \'BaseSuggestionsDemo\',\\n    components: {\\n      BaseSuggestions\\n    },\\n    data() {\\n      return {\\n        suggestions: [\\n          {\\n            facets: [],\\n            key: \'chips\',\\n            query: \'Chips\',\\n            totalResults: 10,\\n            results: [],\\n            modelName: \'PopularSearch\'\\n          }\\n        ]\\n      };\\n    }\\n  };\\n<\/script>\\n```\\n\\n## Events\\n\\nA list of events that the component will emit:\\n\\n- `UserClickedARecommendation`: the event is emitted after the user clicks the button.\\n- A list of events emitted by the `BaseResultLink`.\\n</docs>\\n"],"names":["const"],"mappings":";;;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);