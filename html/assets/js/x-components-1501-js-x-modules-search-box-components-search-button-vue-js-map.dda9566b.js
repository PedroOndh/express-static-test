(window.webpackJsonp=window.webpackJsonp||[]).push([[713],{1484:function(e,n){throw new Error("Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {\"version\":3,\"file\":\"search-button.vue.js\",\"sources\":[\"../../../../../src/x-modules/search-box/components/search-button.vue\"],\"sourcesContent\":[\"<template>\\n  <button\\n    @click=\\\"emitEvents\\\"\\n    class=\\\"x-button x-search-button\\\"\\n    :class=\\\"dynamicClasses\\\"\\n    data-test=\\\"search-button\\\"\\n  >\\n    \x3c!-- @slot _Required_. Button content (text, icon, or both) --\x3e\\n    <slot><span class=\\\"x-icon\\\">⌕</span></slot>\\n  </button>\\n</template>\\n\\n<script lang=\\\"ts\\\">\\n  import Vue from 'vue';\\n  import { Component } from 'vue-property-decorator';\\n  import { State } from '../../../components/decorators/store.decorators';\\n  import { xComponentMixin } from '../../../components/x-component.mixin';\\n  import { VueCSSClasses } from '../../../utils/types';\\n  import { WireMetadata } from '../../../wiring/wiring.types';\\n  import { searchBoxXModule } from '../x-module';\\n\\n  /**\\n   * This component renders a button to submit the query.\\n   *\\n   * @remarks\\n   * If query is not empty, it emits {@link XEventsTypes.UserAcceptedAQuery} and\\n   * {@link SearchBoxXEvents.UserPressedSearchButton} events with the query as payload.\\n   * It also adds `x-search-button--has-empty-query` as class when there is no query.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    mixins: [xComponentMixin(searchBoxXModule)]\\n  })\\n  export default class SearchButton extends Vue {\\n    @State('searchBox', 'query')\\n    public query!: string;\\n\\n    protected get isQueryEmpty(): boolean {\\n      return this.query.length === 0;\\n    }\\n\\n    /**\\n     * Generates the {@link WireMetadata | event metadata} object omitting the moduleName.\\n     *\\n     * @returns The {@link WireMetadata} object omitting the moduleName.\\n     * @internal\\n     */\\n    protected createEventMetadata(): Omit<WireMetadata, 'moduleName'> {\\n      return {\\n        target: this.$el as HTMLElement,\\n        feature: 'search_box'\\n      };\\n    }\\n\\n    /**\\n     * Emits events when the button is clicked.\\n     *\\n     * @public\\n     */\\n    protected emitEvents(): void {\\n      if (!this.isQueryEmpty) {\\n        this.$x.emit('UserAcceptedAQuery', this.query, this.createEventMetadata());\\n        this.$x.emit('UserPressedSearchButton', this.query, this.createEventMetadata());\\n      }\\n    }\\n\\n    protected get dynamicClasses(): VueCSSClasses {\\n      return {\\n        'x-search-button--has-empty-query': this.isQueryEmpty\\n      };\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\\"mdx\\\">\\n## Events\\n\\nThis component emits the following events:\\n\\n- [`UserAcceptedAQuery`](./../../api/x-components.xeventstypes.md)\\n- [`UserPressedSearchButton`](./../../api/x-components.searchboxxevents.md)\\n\\n\x3c!-- prettier-ignore-start --\x3e\\n:::warning\\nNote that no events are emitted if the query is empty.\\n:::\\n\x3c!-- prettier-ignore-end --\x3e\\n\\n## Dynamic classes\\n\\n`SearchButton` uses the `x-search-button--has-empty-query` dynamic CSS class to modify the HTML\\nbutton style when the query is empty.\\n\\n## See it in action\\n\\nIn this example, a clickable button is rendered.\\n\\n_Click the Search button to try it out!_\\n\\n```vue\\n<template>\\n  <SearchButton />\\n</template>\\n\\n<script>\\n  import { SearchButton } from '@empathyco/x-components/search-box';\\n\\n  export default {\\n    name: 'SearchButtonDemo',\\n    components: {\\n      SearchButton\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Play with default slot\\n\\nHere an icon is passed in the default slot instead of text to customize the button content.\\n\\n_Click the icon button to try it out!_\\n\\n```vue\\n<template>\\n  <SearchButton>Search</SearchButton>\\n</template>\\n\\n<script>\\n  import { SearchButton } from '@empathyco/x-components/search-box';\\n\\n  export default {\\n    name: 'SearchButtonDemo',\\n    components: {\\n      SearchButton\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Play with events\\n\\nIn this example, the `UserPressedSearchButton` event has been implemented so that when you enter a\\nsearch term and click the Search button, the search term is displayed as a message.\\n\\n_Type any term in the input field and then click the Search button to try it out!_\\n\\n```vue\\n<template>\\n  <SearchButton\\n    @UserPressedSearchButton=\\\"\\n      query => {\\n        message = query;\\n      }\\n    \\\"\\n  />\\n</template>\\n\\n<script>\\n  import { SearchButton } from '@empathyco/x-components/search-box';\\n\\n  export default {\\n    name: 'SearchButtonDemo',\\n    components: {\\n      SearchButton\\n    }\\n  };\\n<\/script>\\n```\\n\\n## Extending the component\\n\\nComponents can be combined and communicate with each other. Commonly, the `SearchButton` component\\ncommunicates with the [`SearchInput`](./search-input.md) to submit the query. In this example, when\\nyou enter a search term and click the Search button, the “Looking for results” message is displayed.\\n\\n_Type any term in the input field and then click the Search button to try it out!_\\n\\n```vue\\n<template>\\n  <SearchInput />\\n  <SearchButton @UserAcceptedAQuery=\\\"message = 'looking for results'\\\">Search</SearchButton>\\n</template>\\n\\n<script>\\n  import { SearchButton, SearchInput } from '@empathyco/x-components/search-box';\\n\\n  export default {\\n    name: 'SearchButtonDemo',\\n    components: {\\n      SearchButton,\\n      SearchInput\\n    }\\n  };\\n<\/script>\\n```\\n</docs>\\n\"],\"names\":[\"const\"],\"mappings\":\";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\"}")}}]);