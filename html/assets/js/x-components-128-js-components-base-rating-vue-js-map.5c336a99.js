(window.webpackJsonp=window.webpackJsonp||[]).push([[632],{1027:function(n,e){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"base-rating.vue.js","sources":["../../../src/components/base-rating.vue"],"sourcesContent":["<template>\\n  <span class=\\"x-rating\\" role=\\"img\\" :aria-label=\\"ariaLabel\\" data-test=\\"rating\\">\\n    <div class=\\"x-rating--empty\\" data-test=\\"rating-empty\\">\\n      \x3c!--\\n        @slot The content to render as empty icon\\n      --\x3e\\n      <slot v-for=\\"i in max\\" name=\\"empty-icon\\">\\n        <DefaultIcon :key=\\"i\\" class=\\"x-rating__default-icon x-rating__default-icon--empty\\" />\\n      </slot>\\n    </div>\\n    <div\\n      class=\\"x-rating--filled\\"\\n      :style=\\"{ width: calculateFilledWrapperWidth }\\"\\n      data-test=\\"rating-filled\\"\\n    >\\n      \x3c!--\\n        @slot The content to render as filled icon\\n      --\x3e\\n      <slot v-for=\\"i in max\\" name=\\"filled-icon\\">\\n        <DefaultIcon :key=\\"i\\" class=\\"x-rating__default-icon x-rating__default-icon--filled\\" />\\n      </slot>\\n    </div>\\n  </span>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import StarIcon from \'./icons/star.vue\';\\n\\n  /**\\n   * Rating component. This component renders a set of elements filled based on the value passed as\\n   * prop.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: {\\n      DefaultIcon: StarIcon\\n    }\\n  })\\n  export default class BaseRating extends Vue {\\n    /**\\n     * Numeric value used to calculates the width of the filled elements.\\n     *\\n     * @public\\n     */\\n    @Prop({ required: true })\\n    protected value!: number;\\n    /**\\n     * Maximum number of elements to paint.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: 5 })\\n    protected max!: number;\\n\\n    /**\\n     * Calculates the width of the filled elements wrapper.\\n     *\\n     * @returns The % of the wrapper width.\\n     *\\n     * @internal\\n     */\\n    protected get calculateFilledWrapperWidth(): string {\\n      return this.value < 0 ? \'0%\' : `${(this.value * 100) / this.max}%`;\\n    }\\n\\n    /**\\n     * Creates the aria label for accessibility purpose.\\n     *\\n     * @returns The aria label.\\n     *\\n     * @internal\\n     */\\n    protected get ariaLabel(): string {\\n      return `${this.value}/${this.max}`;\\n    }\\n  }\\n<\/script>\\n\\n<style lang=\\"scss\\" scoped>\\n  .x-rating {\\n    position: relative;\\n    display: inline-block;\\n\\n    &--empty {\\n      overflow: hidden;\\n      display: flex;\\n      flex-flow: row nowrap;\\n      white-space: nowrap;\\n    }\\n\\n    &--filled {\\n      display: flex;\\n      flex-flow: row nowrap;\\n      white-space: nowrap;\\n      position: absolute;\\n      overflow: hidden;\\n      top: 0;\\n      left: 0;\\n      height: 100%;\\n    }\\n\\n    &__default-icon {\\n      fill: currentColor;\\n      stroke: currentColor;\\n\\n      &--empty {\\n        fill: none;\\n      }\\n    }\\n  }\\n</style>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\nThis component receives a `value` as prop and renders a set of elements, which will be filled based\\non this value.\\n\\n### Basic usage\\n\\n```vue\\n<BaseRating :value=\\"5.23\\" />\\n```\\n\\n### Customizing its contents\\n\\n```vue\\n<BaseRating :value=\\"7.15\\" :max=\\"10\\">\\n  <template #filled-icon>\\n    <TestIcon/>\\n  </template>\\n  <template #empty-icon>\\n    <TestIcon/>\\n  </template>\\n</BaseRating>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);