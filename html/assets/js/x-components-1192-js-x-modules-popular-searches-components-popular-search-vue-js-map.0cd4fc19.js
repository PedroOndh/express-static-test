(window.webpackJsonp=window.webpackJsonp||[]).push([[600],{1381:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"popular-search.vue.js","sources":["../../../../../src/x-modules/popular-searches/components/popular-search.vue"],"sourcesContent":["<template>\\n  <BaseSuggestion\\n    class=\\"x-popular-search\\"\\n    :suggestion=\\"suggestion\\"\\n    :suggestionSelectedEvents=\\"events\\"\\n    data-test=\\"popular-search\\"\\n    feature=\\"popular_search\\"\\n  >\\n    <template #default=\\"{ suggestion }\\">\\n      \x3c!--\\n        @slot Popular Search\'s content\\n            @binding {Suggestion} suggestion - Popular Search suggestion data\\n      --\x3e\\n      <slot :suggestion=\\"suggestion\\">{{ suggestion.query }}</slot>\\n    </template>\\n  </BaseSuggestion>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { Suggestion } from \'@empathyco/x-types\';\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import BaseSuggestion from \'../../../components/suggestions/base-suggestion.vue\';\\n  import { xComponentMixin } from \'../../../components/x-component.mixin\';\\n  import { XEventsTypes } from \'../../../wiring/events.types\';\\n  import { popularSearchesXModule } from \'../x-module\';\\n\\n  /**\\n   * Renders a popular search item which receives the suggestion that will be rendered as a prop. It\\n   * exposes a default slot to change the popular search content. If the slot is not overridden,\\n   * it will render the suggestion query by default.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: { BaseSuggestion },\\n    mixins: [xComponentMixin(popularSearchesXModule)]\\n  })\\n  export default class PopularSearch extends Vue {\\n    /**\\n     * The suggestion to render and use in the default slot.\\n     *\\n     * @public\\n     */\\n    @Prop({ required: true })\\n    protected suggestion!: Suggestion;\\n\\n    /**\\n     * Events list which are going to be emitted when a popular search is selected.\\n     *\\n     * @returns The {@link XEvent | XEvents} to emit.\\n     * @public\\n     */\\n    protected get events(): Partial<XEventsTypes> {\\n      return {\\n        UserSelectedAPopularSearch: this.suggestion\\n      };\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\nThis components expects just a suggestion as a prop to be rendered. It has a slot to override the\\ncontent. By default, it renders the suggestion query of the popular search.\\n\\n### Basic Usage\\n\\n```vue\\n<PopularSearch :suggestion=\\"suggestion\\" />\\n```\\n\\n### Custom Usage\\n\\n```vue\\n<PopularSearch :suggestion=\\"suggestion\\">\\n  <template #default=\\"{ suggestion }\\">\\n    <svg height=\\"10\\" width=\\"10\\">\\n      <circle cx=\\"5\\" cy=\\"5\\" r=\\"4\\" stroke=\\"black\\" />\\n    </svg>\\n    <span :aria-label=\\"suggestion.query\\">{{ suggestion.query }}</span>\\n  </template>\\n</PopularSearch>\\n```\\n\\n## Events\\n\\nA list of events that the component will emit:\\n\\n- `UserSelectedAPopularSearch`: the event is emitted after the user clicks the button. The event\\n  payload is the popular search data.\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);