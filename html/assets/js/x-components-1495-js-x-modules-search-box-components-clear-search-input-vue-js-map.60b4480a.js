(window.webpackJsonp=window.webpackJsonp||[]).push([[711],{1482:function(e,n){throw new Error("Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {\"version\":3,\"file\":\"clear-search-input.vue.js\",\"sources\":[\"../../../../../src/x-modules/search-box/components/clear-search-input.vue\"],\"sourcesContent\":[\"<template>\\n  <BaseEventButton\\n    class=\\\"x-button x-clear-search-input\\\"\\n    :class=\\\"dynamicClasses\\\"\\n    :events=\\\"clearSearchInputEvents\\\"\\n    data-test=\\\"clear-search-input\\\"\\n  >\\n    \x3c!-- @slot _Required_. Button content (text, icon, or both) --\x3e\\n    <slot>✕</slot>\\n  </BaseEventButton>\\n</template>\\n\\n<script lang=\\\"ts\\\">\\n  import Vue from 'vue';\\n  import { Component } from 'vue-property-decorator';\\n  import BaseEventButton from '../../../components/base-event-button.vue';\\n  import { State } from '../../../components/decorators/store.decorators';\\n  import { xComponentMixin } from '../../../components/x-component.mixin';\\n  import { VueCSSClasses } from '../../../utils/types';\\n  import { XEventsTypes } from '../../../wiring/events.types';\\n  import { searchBoxXModule } from '../x-module';\\n\\n  /**\\n   * This component renders a button to delete the current query.\\n   *\\n   * @remarks\\n   * A button that when pressed emits the {@link SearchBoxXEvents.UserPressedClearSearchBoxButton}\\n   * and {@link SearchBoxXEvents.UserClearedQuery} events, expressing the user intention to clear\\n   * the current query.\\n   * It also adds `x-clear-search-input--has-empty-query` as class when there is no query.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: { BaseEventButton },\\n    mixins: [xComponentMixin(searchBoxXModule)]\\n  })\\n  export default class ClearSearchInput extends Vue {\\n    @State('searchBox', 'query')\\n    public query!: string;\\n\\n    protected get isQueryEmpty(): boolean {\\n      return this.query.length === 0;\\n    }\\n\\n    protected get dynamicClasses(): VueCSSClasses {\\n      return {\\n        'x-clear-search-input--has-empty-query': this.isQueryEmpty\\n      };\\n    }\\n\\n    /**\\n     * The events dictionary that are going to be emitted when the button is pressed.\\n     *\\n     * @internal\\n     */\\n    protected clearSearchInputEvents: Partial<XEventsTypes> = {\\n      UserPressedClearSearchBoxButton: undefined\\n    };\\n  }\\n<\/script>\\n\\n<docs lang=\\\"mdx\\\">\\n## Events\\n\\nThis component emits the following events:\\n\\n- [`UserPressedClearSearchBoxButton`](./../../api/x-components.searchboxxevents.md)\\n- [`UserClearedQuery`](./../../api/x-components.searchboxxevents.md)\\n\\n## See it in action\\n\\nHere a basic example of how the clear button is rendered.\\n\\n_Type any term in the input field and then click the Clear button to try it out!_\\n\\n```vue\\n<template>\\n  <SearchInput />\\n  <ClearSearchInput />\\n</template>\\n\\n<script>\\n  import { ClearSearchInput, SearchInput } from '@empathyco/x-components/search-box';\\n\\n  export default {\\n    name: 'ClearSearchInputDemo',\\n    components: {\\n      ClearSearchInput,\\n      SearchInput\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Play with default slot\\n\\nIn this example, a custom text is passed in the default slot instead of the default text to\\ncustomize the button content.\\n\\n_Click the icon button to try it out!_\\n\\n```vue\\n<template>\\n  <ClearSearchInput>Clear</ClearSearchInput>\\n</template>\\n\\n<script>\\n  import { ClearSearchInput } from '@empathyco/x-components/search-box';\\n\\n  export default {\\n    name: 'ClearSearchInputDemo',\\n    components: {\\n      ClearSearchInput\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Play with events\\n\\nIn this example, the `UserPressedClearSearchBoxButton` event is implemented, triggering the message\\n“clear” when the clear search input button is clicked.\\n\\n_Click the Clear button to try it out!_\\n\\n```vue\\n<template>\\n  <ClearSearchInput @UserPressedClearSearchBoxButton=\\\"logUserPressedClearSearchBoxButton\\\">\\n    Clear\\n  </ClearSearchInput>\\n</template>\\n\\n<script>\\n  import { ClearSearchInput } from '@empathyco/x-components/search-box';\\n\\n  export default {\\n    name: 'ClearSearchInputDemo',\\n    components: {\\n      ClearSearchInput\\n    },\\n    methods: {\\n      logUserPressedClearSearchBoxButton() {\\n        console.log('User pressed clear search box button');\\n      }\\n    }\\n  };\\n<\/script>\\n```\\n\\n## Extending the component\\n\\nComponents can be combined and communicate with each other. Commonly, the `ClearSearchInput`\\ncomponent communicates with the [`SearchInput`](./search-input.md), deleting the search term\\nentered.\\n\\n_Type any term in the input field and then click the icon button to try it out!_\\n\\n```vue\\n<template>\\n  <SearchInput />\\n  <ClearSearchInput />\\n</template>\\n\\n<script>\\n  import { ClearSearchInput, SearchInput } from '@empathyco/x-components/search-box';\\n\\n  export default {\\n    name: 'ClearSearchInputDemo',\\n    components: {\\n      ClearSearchInput,\\n      SearchInput\\n    }\\n  };\\n<\/script>\\n```\\n</docs>\\n\"],\"names\":[\"const\"],\"mappings\":\";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\"}")}}]);