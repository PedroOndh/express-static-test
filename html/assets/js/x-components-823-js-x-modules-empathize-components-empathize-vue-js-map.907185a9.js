(window.webpackJsonp=window.webpackJsonp||[]).push([[987],{1258:function(e,n){throw new Error("Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {\"version\":3,\"file\":\"empathize.vue.js\",\"sources\":[\"../../../../../src/x-modules/empathize/components/empathize.vue\"],\"sourcesContent\":[\"<template>\\n  <component :is=\\\"animation\\\">\\n    <div\\n      v-if=\\\"isOpen\\\"\\n      @mousedown.prevent\\n      @focusin=\\\"open\\\"\\n      @focusout=\\\"close\\\"\\n      class=\\\"x-empathize\\\"\\n      data-test=\\\"empathize\\\"\\n    >\\n      \x3c!-- @slot (Required) Modal container content --\x3e\\n      <slot />\\n    </div>\\n  </component>\\n</template>\\n\\n<script lang=\\\"ts\\\">\\n  import Vue from 'vue';\\n  import Component from 'vue-class-component';\\n  import { Prop } from 'vue-property-decorator';\\n  import { XOn } from '../../../components/decorators/bus.decorators';\\n  import { Debounce } from '../../../components/decorators/debounce.decorators';\\n  import { NoElement } from '../../../components/no-element';\\n  import { xComponentMixin } from '../../../components/x-component.mixin';\\n  import { WireMetadata, XEvent } from '../../../wiring';\\n  import { empathizeXModule } from '../x-module';\\n\\n  /**\\n   * Component containing the empathize. It has a required slot to define its content and two props\\n   * to define when to open and close it: eventsToOpenEmpathize and eventsToCloseEmpathize.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    mixins: [xComponentMixin(empathizeXModule)]\\n  })\\n  export default class Empathize extends Vue {\\n    /**\\n     * Animation component that will be used to animate the empathize.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: () => NoElement })\\n    protected animation!: Vue;\\n\\n    /**\\n     * Array of {@link XEvent | xEvents} to open the empathize.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: () => ['UserFocusedSearchBox', 'UserIsTypingAQuery', 'UserClickedSearchBox'] })\\n    protected eventsToOpenEmpathize!: XEvent[];\\n\\n    /**\\n     * Array of {@link XEvent | xEvents} to close the empathize.\\n     *\\n     * @public\\n     */\\n    @Prop({\\n      default: () => [\\n        'UserClosedEmpathize',\\n        'UserSelectedASuggestion',\\n        'UserPressedEnter',\\n        'UserBlurredSearchBox'\\n      ]\\n    })\\n    protected eventsToCloseEmpathize!: XEvent[];\\n\\n    /**\\n     * The modal container is open.\\n     *\\n     * @internal\\n     */\\n    protected isOpen = false;\\n\\n    /**\\n     * Open empathize. This method will be executed on any event in\\n     * {@link Empathize.eventsToOpenEmpathize} and on DOM event `focusin` on Empathize root element.\\n     *\\n     * @param payload - The payload of the {@link XEvent}, that is unused in this case.\\n     * @param metadata - The {@link WireMetadata} of the event, used to emit the Empathize XEvents.\\n     *\\n     * @internal\\n     */\\n    @XOn(component => (component as Empathize).eventsToOpenEmpathize)\\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars-experimental\\n    open(payload: unknown, metadata: WireMetadata): void {\\n      this.changeOpenState(true, metadata);\\n    }\\n\\n    /**\\n     * Close empathize. This method will be executed on any event in\\n     * {@link Empathize.eventsToCloseEmpathize} and on DOM event `focusout` on Empathize root\\n     * element.\\n     *\\n     * @param payload - The payload of the {@link XEvent}, that is unused in this case.\\n     * @param metadata - The {@link WireMetadata} of the event, used to emit the Empathize XEvents.\\n     *\\n     * @internal\\n     */\\n    @XOn(component => (component as Empathize).eventsToCloseEmpathize)\\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars-experimental\\n    close(payload: unknown, metadata: WireMetadata): void {\\n      this.changeOpenState(false, metadata);\\n    }\\n\\n    /**\\n     * Changes the state of {@link Empathize.isOpen} assigning to it the value of `newOpenState`\\n     * parameter. Also emits the {@link XEvent | XEvents} `EmpathizeOpened` or `EmpathizeClosed` if\\n     * the state really changes.\\n     *\\n     * @param newOpenState - The new state to assign to {@link Empathize.isOpen}.\\n     * @param metadata - The {@link WireMetadata} to emit the {@link XEvent | XEvents}. If is\\n     * undefined, a this component is used as source of info for the metadata.\\n     *\\n     * @internal\\n     */\\n    @Debounce(0)\\n    changeOpenState(newOpenState: boolean, metadata: WireMetadata): void {\\n      if (this.isOpen !== newOpenState) {\\n        this.isOpen = newOpenState;\\n        this.$x.emit(\\n          this.isOpen ? 'EmpathizeOpened' : 'EmpathizeClosed',\\n          undefined,\\n          metadata ?? { moduleName: 'empathize', target: this.$el }\\n        );\\n      }\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\\"mdx\\\">\\n## Examples\\n\\nThis component will listen to the configured events in `eventsToOpenEmpathize` and\\n`eventsToCloseEmpathize` props and open/close itself accordingly. By default, those props values\\nare:\\n\\n- Open: `UserFocusedSearchBox`, `'`UserIsTypingAQuery`, `'`UserClickedSearchBox` and\\n- Close: `UserClosedEmpathize`, `UserSelectedASuggestion`, `UserPressedEnter`,\\n  'UserBlurredSearchBox`\\n\\n### Basic examples\\n\\nThe component rendering the query suggestions, popular searches and history queries with keyboard\\nnavigation.\\n\\n```vue\\n<Empathize>\\n  <template #default>\\n    <BaseKeyboardNavigation>\\n      <QuerySuggestions/>\\n      <PopularSearches/>\\n      <HistoryQueries/>\\n    </BaseKeyboardNavigation>\\n  </template>\\n</Empathize>\\n```\\n\\nDefining custom values for the events to open and close the Empathize. For example opening it when\\nthe search box loses the focus and closing it when the search box receives the focus:\\n\\n```vue\\n<Empathize\\n  :eventsToOpenEmpathize=\\\"['UserBlurredSearchBox']\\\"\\n  :eventsToCloseEmpathize=\\\"['UserFocusedSearchBox']\\\"\\n>\\n  <template #default>\\n    Please, type a query in the Search Box.\\n  </template>\\n</Empathize>\\n```\\n\\nAn animation can be used for the opening and closing using the `animation` prop. The animation, must\\nbe a Component with a `Transition` with a slot inside:\\n\\n```vue\\n<Empathize :animation=\\\"collapseFromTop\\\">\\n  <template #default>\\n    <PopularSearches/>\\n  </template>\\n</Empathize>\\n```\\n\\n## Events\\n\\nA list of events that the component will emit:\\n\\n- `EmpathizeOpened`: the event is emitted after receiving an event to change the state `isOpen` to\\n  `true`. The event payload is undefined and can have a metadata with the module and the element\\n  that emitted it.\\n- `EmpathizeClosed`: the event is emitted after receiving an event to change the state `isOpen` to\\n  `false`. The event payload is undefined and can have a metadata with the module and the element\\n  that emitted it.\\n</docs>\\n\"],\"names\":[\"const\"],\"mappings\":\";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\"}")}}]);