(window.webpackJsonp=window.webpackJsonp||[]).push([[940],{1216:function(A,e){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"x-emitters.js","sources":["../../../src/plugins/x-emitters.ts"],"sourcesContent":["import { Store } from \'vuex\';\\nimport { getGettersProxyFromModule } from \'../store/utils/getters-proxy.utils\';\\nimport { AnySimpleStateSelector, AnyStateSelector } from \'../store/utils/store-emitters.utils\';\\nimport { debounce } from \'../utils/debounce\';\\nimport { forEach } from \'../utils/object\';\\nimport { DebouncedFunction, Dictionary } from \'../utils/types\';\\nimport { XEvent } from \'../wiring/events.types\';\\nimport { AnyXModule } from \'../x-modules/x-modules.types\';\\nimport { XBus } from \'./x-bus.types\';\\n\\n/**\\n * Registers the store emitters, making them emit the event when the part of the state selected\\n * changes.\\n *\\n * @param xModule - The {@link XModule} to register its Store Emitters.\\n * @param bus - The {@Link XBus} to emit the events by the Emitters.\\n * @param store - The Vuex store to access to state and getters to watch them.\\n *\\n * @internal\\n */\\nexport function registerStoreEmitters(\\n  { name, storeEmitters, storeModule }: AnyXModule,\\n  bus: XBus,\\n  store: Store<any>\\n): void {\\n  const safeGettersProxy = getGettersProxyFromModule(store.getters, name, storeModule);\\n  forEach(storeEmitters, (event, stateSelector: AnySimpleStateSelector | AnyStateSelector) => {\\n    const { selector, immediate, filter, ...options } = normalizeStateSelector(\\n      stateSelector,\\n      event\\n    );\\n\\n    const emit = (value: unknown, oldValue?: unknown): void => {\\n      bus.emit(event, value, { moduleName: name, oldValue });\\n    };\\n    const watcherSelector = (): unknown => selector(store.state.x[name], safeGettersProxy);\\n    const debouncedEffect = debounceWatcherEffect(event, (newValue, oldValue) => {\\n      if (filter(newValue, oldValue)) {\\n        emit(newValue, oldValue);\\n      }\\n    });\\n\\n    store.watch(watcherSelector, debouncedEffect, options);\\n\\n    if (immediate) {\\n      Promise.resolve().then(() => {\\n        emit(watcherSelector());\\n      });\\n    }\\n  });\\n}\\n\\n/**\\n * This function \\"wraps\\" the watcher effect (the callback of the watcher) with debounce to avoid\\n * repeating events and request. Right now this function wraps every effect in a debounce and adds\\n * an extra debounce to the \\"SecondLevelEvent\\" events, to try to delay this events after the state\\n * change events.\\n *\\n * @param event - The {@link XEvent} to emit.\\n * @param watcherEffect - The callback to execute.\\n * @returns A new function with the `watcherEffect` callback wrapped in debounce.\\n */\\nfunction debounceWatcherEffect(\\n  event: XEvent,\\n  watcherEffect: (newValue: unknown, oldValue: unknown) => void\\n): (newValue: unknown, oldValue: unknown) => void {\\n  /*\\n   * Due the debounce added to the watch callback, the `oldValue` would be the one from the last\\n   * watcher execution instead of the last callback execution. This would cause problems receiving\\n   * unstable oldValues, used in the Emitter filter.\\n   * To solve this, we store the `oldValue` of the watcher in the `previousValue` variable, and we\\n   * keep there until the watcher callback is finally executed (after the debounce). Then this\\n   * `previousValue` is cleared to store the next `oldValue`.\\n   */\\n  let previousValue: unknown = undefined;\\n\\n  let watcherCallback = debounce((newValue: unknown, oldValue: unknown): void => {\\n    watcherEffect(newValue, oldValue);\\n    previousValue = undefined;\\n  }, 0);\\n  /* Only applying the extra debounce to the \\"SecondLevelEvent\\" events to avoid repeating outer\\n   * effects (requests, URL changes). If we only apply the debounce to all the events we still have\\n   * the problem of outer effects. */\\n  if (isSecondLevelEventEmitter(event)) {\\n    const previousCallback = watcherCallback;\\n    const debouncedPreviousCallback = debounce(previousCallback, 0);\\n    watcherCallback = ((n, o) => {\\n      previousCallback.cancel();\\n      debouncedPreviousCallback(n, o);\\n    }) as DebouncedFunction<any>;\\n  }\\n\\n  return (newValue, oldValue) => {\\n    previousValue = previousValue !== undefined ? previousValue : oldValue;\\n    watcherCallback(newValue, previousValue);\\n  };\\n}\\n\\n/**\\n * Transforms a {@link AnySimpleStateSelector} into a {@link AnyStateSelector}, and sets\\n * default values for its properties.\\n *\\n * @param stateSelector - The state selector to normalize.\\n * @param event - The event name of the emitter.\\n * @returns A {@link AnyStateSelector} with all the properties set.\\n *\\n * @internal\\n */\\nfunction normalizeStateSelector(\\n  stateSelector: AnySimpleStateSelector | AnyStateSelector,\\n  event: XEvent\\n): Required<AnyStateSelector> {\\n  const normalizedSelector = isSimpleSelector(stateSelector)\\n    ? { selector: stateSelector }\\n    : stateSelector;\\n  return {\\n    deep: false,\\n    immediate: false,\\n    filter: isSecondLevelEventEmitter(event)\\n      ? (newValue, oldValue) => !hasPayloadChanged(newValue, oldValue)\\n      : () => true,\\n    ...normalizedSelector\\n  };\\n}\\n\\n/**\\n * Checks if a the type of the store emitter selector is simple or complex. This selector can be\\n * a function if it is simple or an object with the selector and other options if it is complex.\\n *\\n * @param stateSelector - The store emitter selector.\\n * @returns A boolean which flags if the stateSelector is simple (function) or complex (object).\\n *\\n * @internal\\n */\\nexport function isSimpleSelector(\\n  stateSelector: AnySimpleStateSelector | AnyStateSelector\\n): stateSelector is AnySimpleStateSelector {\\n  return typeof stateSelector === \'function\';\\n}\\n\\n// TODO: Generalize the Naming of the Events to take this into account\\nconst secondLevelEvents: RegExp[] = [/RequestChanged$/, /UrlStateChanged$/];\\n\\n/**\\n * Function to detect if an {@link XEvent} is a \\"SecondLevelEvent\\", to treat it differently.\\n *\\n * @param event - The name of the {@link XEvent} to check.\\n * @returns True if is an `SecondLevelEvent`, False otherwise.\\n *\\n * @internal\\n */\\nfunction isSecondLevelEventEmitter(event: XEvent): boolean {\\n  return secondLevelEvents.some(regex => regex.test(event));\\n}\\n/**\\n * Function to filter if a payload of an {@link XEvent} has really changed or not. It only\\n * compares the first level of fields and not deeply, to avoid CPU consuming task here.\\n *\\n * @param request1 - First request to compare.\\n * @param request2 - Second request to compare.\\n * @returns True if the two objects are different, false otherwise.\\n *\\n * @internal\\n */\\nfunction hasPayloadChanged<T extends Dictionary>(request1?: T, request2?: T): boolean {\\n  if (request1 === request2) {\\n    return true;\\n  }\\n  if (!request1 || !request2) {\\n    return false;\\n  }\\n  const keys1 = Object.keys(request1);\\n  const keys2 = Object.keys(request2);\\n  if (keys1.length !== keys2.length) {\\n    return false;\\n  }\\n  return !keys1.some(key => request1[key] !== request2[key]);\\n}\\n"],"names":[],"mappings":"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"}')}}]);