(window.webpackJsonp=window.webpackJsonp||[]).push([[757],{1045:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"base-rating-filter-label.vue.js","sources":["../../../../../src/components/filters/labels/base-rating-filter-label.vue"],"sourcesContent":["<template>\\n  <BaseRating class=\\"x-rating-filter-label\\" data-test=\\"rating-label\\" :value=\\"value\\" :max=\\"max\\">\\n    <template #filled-icon>\\n      \x3c!--\\n       @slot Filled icon content\\n     --\x3e\\n      <slot name=\\"rating-icon-filled\\" />\\n    </template>\\n    <template #empty-icon>\\n      \x3c!--\\n       @slot Empty icon content\\n     --\x3e\\n      <slot name=\\"rating-icon-empty\\" />\\n    </template>\\n  </BaseRating>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { BooleanFilter } from \'@empathyco/x-types\';\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import BaseRating from \'../../base-rating.vue\';\\n\\n  /**\\n   * Renders a label for a rating filter, allowing to override the elements used to paint\\n   * the rating.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: {\\n      BaseRating\\n    }\\n  })\\n  export default class BaseRatingFilterLabel extends Vue {\\n    /**\\n     * The filter data to render.\\n     *\\n     * @public\\n     * */\\n    @Prop({ required: true })\\n    public filter!: BooleanFilter;\\n\\n    /**\\n     * Maximum number of elements to paint.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: 5 })\\n    protected max!: number;\\n\\n    /**\\n     * Converts the label string into a number.\\n     *\\n     * @returns The label as number or 0 if it is not a valid number.\\n     *\\n     * @internal\\n     * */\\n    protected get value(): number {\\n      const value = parseFloat(this.filter.label) ?? 0;\\n      return Number.isNaN(value) ? 0 : value;\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Example\\n\\nRenders a label for a rating filter, allowing to override the elements used to paint the rating. The\\nfilter label must be a valid number string. For example: \'3\', \'2.5\', \'0.25\'\\n\\n### Basic usage\\n\\n```vue\\n<BaseRatingFilterLabel :filter=\\"filter\\" />\\n```\\n\\n### Customizing color\\n\\nIts possible to change the default color directly with color CSS attribute. For more elaborated\\nstyles it\'s possible to style the inner svg icons.\\n\\n```vue\\n<BaseRatingFilterLabel :filter=\\"filter\\" style=\\"color: gold\\" />\\n```\\n\\n### Customizing its contents\\n\\nThe `max` prop can be used to set the max rating number. It will render as many icons as the this\\n`max` value.\\n\\n```vue\\n<BaseRatingFilterLabel :filter=\\"filter\\" :max=\\"max\\" />\\n```\\n\\nThe default icons can be changed using the `rating-icon-filled` and `rating-icon-empty` icons, to\\nrepresent the filled empty and empty icon in the rating component.\\n\\n```vue\\n<BaseRatingFilterLabel :filter=\\"filter\\" :max=\\"max\\">\\n  <template #rating-icon-filled>♥</template>\\n  <template #rating-icon-empty>♡</template>\\n</BaseRatingFilterLabel>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);