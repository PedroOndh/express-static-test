(window.webpackJsonp=window.webpackJsonp||[]).push([[888],{1169:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"base-id-modal.vue.js","sources":["../../../../src/components/modals/base-id-modal.vue"],"sourcesContent":["<template>\\n  <BaseModal\\n    @click:overlay=\\"emitClickOutOfModal\\"\\n    @focusin:body=\\"emitClickOutOfModal\\"\\n    :animation=\\"animation\\"\\n    :open=\\"isOpen\\"\\n  >\\n    <slot />\\n  </BaseModal>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import { XOn } from \'../decorators/bus.decorators\';\\n  import { WireMetadata } from \'../../wiring/wiring.types\';\\n  import { isElementEqualOrContained } from \'../../utils/html\';\\n  import BaseModal from \'./base-modal.vue\';\\n\\n  /**\\n   * Component containing a modal expecting a required prop, named `modalId`. It reacts to\\n   * `UserClickedOpenModal`, `UserClickedCloseModal` and `UserClickedOutOfModal` events, when their\\n   * payload matches the component\'s \'modalId\' prop, to handle its open/close state. The default\\n   * slot offers the possibility to customise the modal content.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: { BaseModal }\\n  })\\n  export default class BaseIdModal extends Vue {\\n    /** Animation to use for opening/closing the modal. */\\n    @Prop()\\n    public animation?: Vue | string;\\n\\n    /** The modalId to use for the open and close event listeners. */\\n    @Prop({ required: true })\\n    public modalId!: string;\\n\\n    /** Whether the modal is open or not. */\\n    protected isOpen = false;\\n\\n    /** The element that opened the modal. */\\n    protected openerElement?: HTMLElement;\\n\\n    /**\\n     * Opens the modal.\\n     *\\n     * @param modalId - The payload of the {@link XEventsTypes.UserClickedOpenModal} event.\\n     * @param metadata - The metadata of the emitted event.\\n     * @public\\n     */\\n    @XOn(\'UserClickedOpenModal\')\\n    openModal(modalId: string, metadata: WireMetadata): void {\\n      if (!this.isOpen && this.modalId === modalId) {\\n        this.openerElement = metadata.target;\\n        this.isOpen = true;\\n      }\\n    }\\n\\n    /**\\n     * Closes the modal.\\n     *\\n     * @param payload - The payload of the closing events:\\n     * {@link XEventsTypes.UserClickedCloseModal} or {@link XEventsTypes.UserClickedOutOfModal}.\\n     *\\n     * @public\\n     */\\n    @XOn([\'UserClickedCloseModal\', \'UserClickedOutOfModal\'])\\n    closeModal(payload: string): void {\\n      if (this.isOpen && this.modalId === payload) {\\n        this.isOpen = false;\\n      }\\n    }\\n\\n    /**\\n     * Emits a {@link XEventsTypes.UserClickedOutOfModal} event unless the passed event target\\n     * is the button that opened the modal.\\n     *\\n     * @param event - The event that triggered the close attempt.\\n     * @public\\n     */\\n    protected emitClickOutOfModal(event: MouseEvent | FocusEvent): void {\\n      // Prevents clicking the open button when the panel is already open to close the panel.\\n      if (\\n        !this.openerElement ||\\n        !isElementEqualOrContained(this.openerElement, event.target as HTMLElement)\\n      ) {\\n        this.$x.emit(\'UserClickedOutOfModal\', this.modalId, { target: this.$el as HTMLElement });\\n      }\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\nThe `BaseIdModal` component reacts to the `UserClickedOpenModal`, `UserClickedCloseModal` and\\n`UserClickedOutOfModal` to handle its open/close state. The component filters out the events which\\npayload doesn\'t match its `modalId` prop and reacts only to those who match this criteria.\\n\\n### Basic usage\\n\\nThe component interacts with both `BaseIdModalOpen` and `BaseIdModalClose` components, which have to\\nshare the same value in their `modalId` prop to work:\\n\\n```vue\\n<template>\\n  <div>\\n    <BaseIdModalOpen modalId=\\"myModal\\">Open</BaseIdModalOpen>\\n    <BaseIdModal modalId=\\"myModal\\">\\n      <img src=\\"success.png\\" />\\n      <BaseIdModalClose modalId=\\"myModal\\">Close</BaseIdModalClose>\\n    </BaseIdModal>\\n  </div>\\n</template>\\n\\n<script>\\n  import { BaseIdModalOpen, BaseIdModal, BaseIdModalClose } from \'@empathyco/x-components\';\\n\\n  export default {\\n    name: \'TestModal\',\\n    components: {\\n      BaseIdModalOpen,\\n      BaseIdModal,\\n      BaseIdModalClose\\n    }\\n  };\\n<\/script>\\n```\\n\\n## Events\\n\\nA list of events that the component will emit:\\n\\n- `UserClickedOutOfModal`: the event is emitted after the user clicks outside the modal. The event\\n  payload is the id of the modal and a metadata with the target element that emitted it.\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);