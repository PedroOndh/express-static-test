(window.webpackJsonp=window.webpackJsonp||[]).push([[716],{1487:function(A,e){throw new Error("Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {\"version\":3,\"file\":\"search-input.vue_rollup-plugin-vue=script.js\",\"sources\":[\"../../../../../src/x-modules/search-box/components/search-input.vue?rollup-plugin-vue=script.ts\"],\"sourcesContent\":[\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nimport { Suggestion } from '@empathyco/x-types';\\nimport Vue from 'vue';\\nimport { Component, Prop } from 'vue-property-decorator';\\nimport { XOn } from '../../../components/decorators/bus.decorators';\\nimport { State } from '../../../components/decorators/store.decorators';\\nimport { xComponentMixin } from '../../../components/x-component.mixin';\\nimport { ArrowKey, PropsWithType } from '../../../utils';\\nimport { debounce } from '../../../utils/debounce';\\nimport { DebouncedFunction } from '../../../utils/types';\\nimport { XEventsTypes } from '../../../wiring/events.types';\\nimport { WireMetadata } from '../../../wiring/wiring.types';\\nimport { searchBoxXModule } from '../x-module';\\n\\n/**\\n * This component renders an input field that allows the user to type a query. It also reacts to\\n * query changes through event listening.\\n *\\n * @public\\n */\\n@Component({\\n  mixins: [xComponentMixin(searchBoxXModule)]\\n})\\nexport default class SearchInput extends Vue {\\n  public $refs!: { input: HTMLInputElement };\\n\\n  /**\\n   * Maximum characters allowed in the input search.\\n   */\\n  @Prop({ default: 64 })\\n  protected maxLength!: number;\\n\\n  /**\\n   * Allows input autofocus when the search field is rendered.\\n   */\\n  @Prop({ default: true })\\n  protected autofocus!: boolean;\\n\\n  /**\\n   * Enables the auto-accept query after debounce.\\n   */\\n  @Prop({ default: true })\\n  protected instant!: boolean;\\n\\n  /**\\n   * Debounce time for the instant.\\n   */\\n  @Prop({ default: 500 })\\n  protected instantDebounceInMs!: number;\\n\\n  /**\\n   * Keyboard keys to accept the autocomplete suggestion.\\n   */\\n  @Prop({ default: () => ['ArrowRight'] })\\n  protected autocompleteKeyboardKeys!: string[]; // https://keycode.info/\\n\\n  /**\\n   * Event that retrieves the autocomplete suggestion.\\n   */\\n  @Prop({ default: 'QuerySuggestionsChanged' })\\n  protected autocompleteSuggestionsEvent!: PropsWithType<XEventsTypes, Suggestion[]>;\\n\\n  @State('searchBox', 'query')\\n  public query!: string;\\n\\n  /**\\n   * When event {@link XEventsTypes.UserReachedEmpathizeTop} or\\n   * {@link SearchBoxXEvents.UserPressedClearSearchBoxButton}\\n   * are emitted the search in put is focused.\\n   *\\n   * @internal\\n   */\\n  @XOn(['UserReachedEmpathizeTop', 'UserPressedClearSearchBoxButton'])\\n  focusInput(): void {\\n    this.$refs.input?.focus();\\n  }\\n\\n  protected debouncedUserAcceptedAQuery!: DebouncedFunction<[string]>;\\n\\n  /**\\n   * When event {@link XEventsTypes.UserAcceptedAQuery} or\\n   * {@link SearchBoxXEvents.UserClearedQuery} are emitted the pending debounced emit\\n   * {@link XEvent} `UserAcceptedAQuery` is canceled.\\n   *\\n   * @internal\\n   */\\n  @XOn(['UserAcceptedAQuery', 'UserClearedQuery'])\\n  cancelDebouncedUserAcceptedAQuery(): void {\\n    this.debouncedUserAcceptedAQuery?.cancel();\\n  }\\n\\n  mounted(): void {\\n    if (this.autofocus) {\\n      this.focusInput();\\n    }\\n  }\\n\\n  /**\\n   * Emits {@link XEventsTypes.UserAcceptedAQuery} event with a debounce configured in\\n   * `instantDebounceInMs` prop.\\n   *\\n   * @internal\\n   * @param query - The query that will be emitted.\\n   */\\n  emitDebouncedUserAcceptedAQuery(query: string): void {\\n    if (this.instant) {\\n      if (!this.debouncedUserAcceptedAQuery) {\\n        this.debouncedUserAcceptedAQuery = debounce(\\n          this.emitUserAcceptedAQuery.bind(this),\\n          this.instantDebounceInMs\\n        );\\n      }\\n      this.debouncedUserAcceptedAQuery(query);\\n    }\\n  }\\n\\n  /**\\n   * Generates the {@link WireMetadata | event metadata} object omitting the moduleName.\\n   *\\n   * @returns The {@link WireMetadata} object omitting the moduleName.\\n   * @internal\\n   */\\n  protected createEventMetadata(): Omit<WireMetadata, 'moduleName'> {\\n    return {\\n      target: this.$refs.input,\\n      feature: 'search_box'\\n    };\\n  }\\n\\n  /**\\n   * Emits event {@link SearchBoxXEvents.UserBlurredSearchBox} when search box loses focus.\\n   *\\n   * @internal\\n   */\\n  protected emitUserBlurredSearchBox(): void {\\n    this.$x.emit('UserBlurredSearchBox', undefined, { target: this.$refs.input });\\n  }\\n\\n  /**\\n   * Emits event {@link SearchBoxXEvents.UserClickedSearchBox} when user clicks  the search input.\\n   *\\n   * @internal\\n   */\\n  protected emitUserClickedSearchBox(): void {\\n    this.$x.emit('UserClickedSearchBox', undefined, { target: this.$refs.input });\\n  }\\n\\n  /**\\n   * Emits event {@link SearchBoxXEvents.UserFocusedSearchBox} when search box gains focus.\\n   *\\n   * @internal\\n   */\\n  protected emitUserFocusedSearchBox(): void {\\n    this.$x.emit('UserFocusedSearchBox', undefined, { target: this.$refs.input });\\n  }\\n\\n  /**\\n   * Emits event {@link SearchBoxXEvents.UserIsTypingAQuery} when the user typed/pasted something\\n   * into the search-box. Also emits event {@link SearchBoxXEvents.UserClearedQuery} when the user\\n   * removes all characters in the search-box.\\n   *\\n   * @internal\\n   */\\n  protected emitUserIsTypingAQueryEvents(): void {\\n    const query = this.$refs.input.value;\\n    this.$x.emit('UserIsTypingAQuery', query, { target: this.$refs.input });\\n    if (query.trim()) {\\n      this.emitDebouncedUserAcceptedAQuery(query);\\n    } else {\\n      this.cancelDebouncedUserAcceptedAQuery();\\n    }\\n  }\\n\\n  /**\\n   * Emits event {@link XEventsTypes.UserPressedArrowKey} when the user pressed an arrow key.\\n   *\\n   * @param event - The keyboard event with the arrow key pressed.\\n   * @internal\\n   */\\n  protected emitUserPressedArrowKey(event: KeyboardEvent): void {\\n    this.$x.emit('UserPressedArrowKey', event.key as ArrowKey, this.createEventMetadata());\\n  }\\n\\n  /**\\n   * Emits multiple events when the user pressed the enter key.\\n   *\\n   * @remarks\\n   * Emitted events are:\\n   * * {@link SearchBoxXEvents.UserPressedEnterKey}\\n   * * {@link XEventsTypes.UserAcceptedAQuery}\\n   *\\n   * @internal\\n   */\\n  protected emitUserPressedEnterKey(): void {\\n    const query = this.$refs.input.value.trim();\\n    if (query.length > 0) {\\n      this.$x.emit('UserPressedEnterKey', query, this.createEventMetadata());\\n      this.emitUserAcceptedAQuery(query);\\n    }\\n    this.$refs.input?.blur();\\n  }\\n\\n  /**\\n   * Emits {@link XEventsTypes.UserAcceptedAQuery} event.\\n   *\\n   * @remarks It is necessary in a separated method to use it as the parameter of debounce in\\n   * emitDebouncedUserAcceptedAQuery method.\\n   * @internal\\n   * @param query - The query that will be emitted.\\n   */\\n  protected emitUserAcceptedAQuery(query: string): void {\\n    this.$x.emit('UserAcceptedAQuery', query, this.createEventMetadata());\\n  }\\n}\\n\"],\"names\":[],\"mappings\":\"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\"}")}}]);