(window.webpackJsonp=window.webpackJsonp||[]).push([[654],{1029:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"base-variable-column-grid.vue.js","sources":["../../../src/components/base-variable-column-grid.vue"],"sourcesContent":["<template>\\n  <BaseGrid :animation=\\"animation\\" :columns=\\"columns\\" :items=\\"items\\">\\n    <template v-for=\\"(_, name) in $scopedSlots\\" v-slot:[name]=\\"{ item }\\">\\n      \x3c!--\\n        @slot Customized item rendering. The slot name can either be default or the item\'s model\\n         name.\\n            @binding {GridItem} item - Item to render.\\n      --\x3e\\n      <slot :name=\\"name\\" v-bind=\\"{ item }\\" />\\n    </template>\\n  </BaseGrid>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import { ListItem } from \'../utils/types\';\\n  import BaseGrid from \'./base-grid.vue\';\\n  import { XOn } from \'./decorators/bus.decorators\';\\n\\n  /**\\n   * The `BaseVariableColumnGrid` component is a wrapper of the `BaseGrid` component that listens to\\n   * the `UserClickedColumnPicker` and the `ColumnsNumberProvided` events and passes the\\n   * selected number of columns to the grid. It also allows to customize the grid items using the\\n   * available `scopedSlots`.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: {\\n      BaseGrid\\n    }\\n  })\\n  export default class BaseVariableColumnGrid extends Vue {\\n    /**\\n     * Animation component that will be used to animate the grid.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: \'ul\' })\\n    protected animation!: Vue | string;\\n\\n    /**\\n     * The list of items to be rendered.\\n     *\\n     * @remarks The items must have an id property.\\n     *\\n     * @public\\n     */\\n    @Prop()\\n    protected items?: ListItem[];\\n\\n    /**\\n     * The columns to render in the grid.\\n     *\\n     * @internal\\n     */\\n    protected columns = 0;\\n\\n    /**\\n     * Handler to update the number of columns when the user selects a new value.\\n     *\\n     * @param newColumns - The new columns value.\\n     *\\n     * @internal\\n     */\\n    @XOn([\'ColumnsNumberProvided\'])\\n    setColumns(newColumns: number): void {\\n      this.columns = newColumns;\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Example\\n\\nThe `BaseVariableColumnGrid` component is a wrapper of the `BaseGrid` component that listens to the\\n`ColumnsNumberProvided` events and passes the selected amount of columns to the grid. It also allows\\nyou to customize the grid items using the available `scopedSlots`.\\n\\n```vue\\n<template>\\n  <section class=\\"results\\">\\n    <button @click=\\"setColumns(4)\\" class=\\"column-picker-selector\\">\\n      <span class=\\"column-picker-selector__text\\">4 columns</span>\\n    </button>\\n    <BaseVariableColumnGrid :animation=\\"animation\\" :items=\\"items\\">\\n      <template #default=\\"{ item }\\">\\n        <span data-test=\\"default-slot\\">{{ item.id }}</span>\\n      </template>\\n      <template #result=\\"{ item }\\">\\n        <span data-test=\\"result-slot\\">{{ \'Result \' + item.id }}</span>\\n      </template>\\n    </BaseVariableColumnGrid>\\n  </section>\\n</template>\\n\\n<script>\\n  import { BaseVariableColumnGrid, StaggeredFadeAndSlide } from \'@empathyco/x-components\';\\n\\n  export default {\\n    name: \'ResultsSection\',\\n    components: {\\n      BaseVariableColumnGrid\\n    },\\n    data() {\\n      return {\\n        animation: StaggeredFadeAndSlide,\\n        items: [\\n          {\\n            id: \'res-1\',\\n            modelName: \'Result\',\\n            name: \'Product 1\'\\n          },\\n          {\\n            id: \'res-2\',\\n            modelName: \'Result\',\\n            name: \'Product 2\'\\n          }\\n        ]\\n      };\\n    },\\n    methods: {\\n      setColumns(columns) {\\n        this.$x.emit(\'UserClickedColumnPicker\', columns);\\n      }\\n    }\\n  };\\n<\/script>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);