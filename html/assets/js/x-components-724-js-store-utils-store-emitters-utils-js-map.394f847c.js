(window.webpackJsonp=window.webpackJsonp||[]).push([[950],{1225:function(e,t){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"store-emitters.utils.js","sources":["../../../../src/store/utils/store-emitters.utils.ts"],"sourcesContent":["import { WatchOptions } from \'vue\';\\nimport { Dictionary, Returns } from \'../../utils/types\';\\nimport { XEvent, XEventPayload } from \'../../wiring/events.types\';\\nimport { AnyXStoreModule } from \'../store.types\';\\n\\n/**\\n * Selects a part of the store state or getters (AKA \\"getter\\" inside\\n * {@link https://vuex.vuejs.org/ | Vuex} watchers).\\n *\\n * @param ReturnType - The type of the state or getters property selected.\\n * @param State - The type of the state of the {@link XModule} where this selector is used.\\n * @param Getters - The type of the getters of the {@link XModule} where this selector is used.\\n * @public\\n */\\nexport type SimpleStateSelector<\\n  ReturnType,\\n  State extends Dictionary,\\n  Getters extends Dictionary\\n> = (state: State, getters: Getters) => ReturnType;\\n\\n/**\\n * Composition type of {@link SimpleStateSelector} which allows to indicate if the state selector\\n * should be executed in first instance (first assignment of values). Selector is the\\n * {@link SimpleStateSelector} and immediate flags if the selector should be executed when it is\\n * initialized for first time.\\n *\\n * @param ReturnType - The type of the state or getters property selected.\\n * @param State - The type of the state of the {@link XModule} where this selector is used.\\n * @param Getters - The type of the getters of the {@link XModule} where this selector is used.\\n * @public\\n */\\nexport interface StateSelector<ReturnType, State extends Dictionary, Getters extends Dictionary>\\n  extends WatchOptions {\\n  selector: SimpleStateSelector<ReturnType, State, Getters>;\\n  /**\\n   * Checks if the value of the selector has changed.\\n   *\\n   * @remarks\\n   * This function exist because Vue will not stop reactivity propagation if the observed variable\\n   * is an `object`, an `Array`, or the `deep` mode has been enabled.\\n   *\\n   * @param newValue - The new value.\\n   * @param oldValue - The old value.\\n   * @returns True if the value has really changed.\\n   */\\n  filter?(newValue: ReturnType, oldValue: ReturnType): boolean;\\n}\\n\\n/**\\n * Dictionary where the key is a {@link XEvent}, and the value is {@link SimpleStateSelector} or\\n * {@link StateSelector}. This {@link SimpleStateSelector} or {@link StateSelector} can only\\n * access the state and getters from the {@link XStoreModule} passed as param type. This\\n * dictionary is used to emits a {@link XEvent} when the part of the store selected by\\n * {@link SimpleStateSelector} changes.\\n *\\n * @param StoreModule - The store module that these store emitters will be able to access.\\n * @public\\n */\\nexport type StoreEmitters<StoreModule extends AnyXStoreModule> = {\\n  [Event in XEvent]?:\\n    | SimpleStateSelector<\\n        XEventPayload<Event>,\\n        ReturnType<StoreModule[\'state\']>,\\n        Returns<StoreModule[\'getters\']>\\n      >\\n    | StateSelector<\\n        XEventPayload<Event>,\\n        ReturnType<StoreModule[\'state\']>,\\n        Returns<StoreModule[\'getters\']>\\n      >;\\n};\\n/**\\n * Alias for any simple state selector.\\n *\\n * @public\\n */\\nexport type AnySimpleStateSelector = SimpleStateSelector<any, any, any>;\\n/**\\n * Alias for any state selector.\\n *\\n * @public\\n */\\nexport type AnyStateSelector = StateSelector<any, any, any>;\\n/**\\n * Alias for any store emitters.\\n *\\n * @public\\n */\\nexport type AnyStoreEmitters = StoreEmitters<AnyXStoreModule>;\\n\\n/**\\n * Helper function for creating type-safe {@link StoreEmitters}.\\n *\\n * @param storeModule - The store module that the emitters will be associated to.\\n * @param emitters - The {@link StoreEmitters} to create.\\n * @returns A type-safe function for storeEmitters.\\n * @public\\n */\\nexport function createStoreEmitters<\\n  Module extends AnyXStoreModule,\\n  Emitters extends StoreEmitters<Module>\\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars-experimental\\n>(storeModule: Module, emitters: Emitters): Emitters {\\n  return emitters;\\n}\\n"],"names":[],"mappings":"AA0FA;;;;;;;;SAQgB,mBAAmB,CAIjC,WAAmB,EAAE,QAAkB;IACvC,OAAO,QAAQ,CAAC;AAClB;;;;"}')}}]);