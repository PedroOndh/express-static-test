(window.webpackJsonp=window.webpackJsonp||[]).push([[676],{1031:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"base-column-picker-dropdown.vue.js","sources":["../../../../src/components/column-picker/base-column-picker-dropdown.vue"],"sourcesContent":["<template>\\n  <BaseDropdown\\n    @change=\\"emitEvent\\"\\n    :value=\\"selectedColumns\\"\\n    :items=\\"columns\\"\\n    :animation=\\"animation\\"\\n  >\\n    <template v-if=\\"$scopedSlots.toggle\\" #toggle=\\"{ item, isOpen }\\">\\n      \x3c!--\\n           @slot From `BaseDropdown` component: Used to render the contents of the dropdown toggle\\n           button. If not provided, it uses the `item` slot as fallback.\\n           @binding {string|number|Identifiable} item - The item data to render.\\n           @binding {boolean} isOpen - True if the dropdown is opened, and false if it is\\n           closed.\\n        --\x3e\\n      <slot name=\\"toggle\\" v-bind=\\"{ item, isOpen }\\" />\\n    </template>\\n    <template #item=\\"{ item, isSelected, isHighlighted }\\">\\n      \x3c!--\\n           @slot (required) From `BaseDropdown` component: Used to render each one of the items\\n           content, and as fallback for the toggle button content slot if it is not provided.\\n             @binding {string|number|Identifiable} item - Item to render\\n             @binding {boolean} isHighlighted - True when the item has the focus.\\n             @binding {boolean} isSelected - True when the item is selected.\\n        --\x3e\\n      <slot name=\\"item\\" v-bind=\\"{ item, isSelected, isHighlighted }\\" />\\n    </template>\\n  </BaseDropdown>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import { mixins } from \'vue-class-component\';\\n  import Vue from \'vue\';\\n  import BaseEventButton from \'../base-event-button.vue\';\\n  import BaseDropdown from \'../base-dropdown.vue\';\\n  import ColumnPickerMixin from \'./column-picker.mixin\';\\n\\n  /**\\n   * Column picker dropdown component renders {@link BaseDropdown | dropdown} component which\\n   * options are the different columns you can set for a grid.\\n   *\\n   * It emits {@link XEventsTypes.UserClickedColumnPicker | UserClickedColumnPicker} on dropdown\\n   * input.\\n   *\\n   * @remarks It extends {@link ColumnPickerMixin}.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: { BaseDropdown, BaseEventButton }\\n  })\\n  export default class BaseColumnPickerDropdown extends mixins(ColumnPickerMixin) {\\n    /**\\n     * The transition to use for opening and closing the dropdown.\\n     *\\n     * @public\\n     */\\n    @Prop()\\n    public animation?: string | typeof Vue;\\n\\n    /**\\n     * Emits a {@link XEventsTypes.UserClickedColumnPicker | UserClickedColumnPicker} and\\n     * {@link XEventsTypes.ColumnsNumberProvided | ColumnsNumberProvided} events.\\n     *\\n     * @param column - Column number payload.\\n     */\\n    emitEvent(column: number): void {\\n      this.$x.emit(\'UserClickedColumnPicker\', column);\\n      this.$x.emit(\'ColumnsNumberProvided\', column);\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Example\\n\\nColumn picker dropdown component renders a dropdown component which options are the different\\ncolumns you can set for a grid.\\n\\n### Usage\\n\\nNotice that the slots provided match with the `BaseDropdown` component. The `item` slot is required\\nunlike the `toggle`, which renders the same `item` slot defined by default.\\n\\n#### Default usage\\n\\n```vue\\n<template>\\n  <BaseColumnPickerDropdown v-model=\\"selectedColumns\\" :columns=\\"[2, 4, 6]\\">\\n    <template #item=\\"{ item, isSelected, isHighlighted }\\">\\n      <span v-if=\\"isHighlighted\\">üü¢</span>\\n      <span v-if=\\"isSelected\\">‚úÖ</span>\\n      <span>{{ item }}</span>\\n    </template>\\n  </BaseColumnPickerDropdown>\\n</template>\\n\\n<script>\\n  import { BaseColumnPickerDropdown } from \'@empathyco/x-components\';\\n\\n  export default {\\n    name: \'BaseColumnPickerDropdownTest\',\\n    components: {\\n      BaseColumnPickerDropdown\\n    },\\n    data() {\\n      return {\\n        selectedColumns: 2\\n      };\\n    }\\n  };\\n<\/script>\\n```\\n\\n#### Customizing toggle button\\n\\n```vue\\n<template>\\n  <BaseColumnPickerDropdown v-model=\\"selectedColumns\\" :columns=\\"[2, 4, 6]\\">\\n    <template #toggle=\\"{ item, isOpen }\\">Selected: {{ item }} {{ isOpen ? \'üîº\' : \'üîΩ\' }}Ô∏è</template>\\n    <template #item=\\"{ item, isSelected, isHighlighted }\\">\\n      <span v-if=\\"isHighlighted\\">üü¢</span>\\n      <span v-if=\\"isSelected\\">‚úÖ</span>\\n      <span>{{ item }}</span>\\n    </template>\\n  </BaseColumnPickerDropdown>\\n</template>\\n\\n<script>\\n  import { BaseColumnPickerDropdown } from \'@empathyco/x-components\';\\n\\n  export default {\\n    name: \'BaseColumnPickerDropdownTest\',\\n    components: {\\n      BaseColumnPickerDropdown\\n    },\\n    data() {\\n      return {\\n        selectedColumns: 2\\n      };\\n    }\\n  };\\n<\/script>\\n```\\n\\n#### Using it without v-model / value\\n\\nThe component emits an X Event, `UserClickedColumnPicker`, on column change and it also listens to\\nthat event from outside, so you don\'t need to store the current column value to keep it synchronized\\nwith other column pickers.\\n\\n```vue\\n<template>\\n  <BaseColumnPickerDropdown :columns=\\"[2, 4, 6]\\">\\n    <template #toggle=\\"{ item, isOpen }\\">Selected: {{ item }} {{ isOpen ? \'üîº\' : \'üîΩ\' }}Ô∏è</template>\\n    <template #item=\\"{ item, isSelected, isHighlighted }\\">\\n      <span v-if=\\"isHighlighted\\">üü¢</span>\\n      <span v-if=\\"isSelected\\">‚úÖ</span>\\n      <span>{{ item }}</span>\\n    </template>\\n  </BaseColumnPickerDropdown>\\n</template>\\n\\n<script>\\n  import { BaseColumnPickerDropdown } from \'@empathyco/x-components\';\\n\\n  export default {\\n    name: \'BaseColumnPickerDropdownTest\',\\n    components: {\\n      BaseColumnPickerDropdown\\n    }\\n  };\\n<\/script>\\n```\\n\\n## Events\\n\\nAn event that the component will emit:\\n\\n- `UserClickedColumnPicker`: the event is emitted after the user clicks an item in the dropdown. The\\n  event payload is the number of columns that the clicked item represents.\\n- `ColumnsNumberProvided`: the event is emitted on component mount, and whenever the value changes.\\n  The event payload is the current `selectedColumns` value.\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);