(window.webpackJsonp=window.webpackJsonp||[]).push([[911],{1190:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"base-result-link.vue.js","sources":["../../../../src/components/result/base-result-link.vue"],"sourcesContent":["<template>\\n  <a\\n    @click=\\"emitUserClickedAResult\\"\\n    @click.right=\\"emitUserClickedAResult\\"\\n    @click.middle=\\"emitUserClickedAResult\\"\\n    :href=\\"result.url\\"\\n    class=\\"x-result-link\\"\\n    data-test=\\"result-link\\"\\n  >\\n    \x3c!--\\n      @slot (Required) Link content with a text, an image, another component or both\\n          @binding {Result} result - Result data\\n     --\x3e\\n    <slot :result=\\"result\\" />\\n  </a>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { Result } from \'@empathyco/x-types\';\\n  import Vue from \'vue\';\\n  import { Component, Inject, Prop } from \'vue-property-decorator\';\\n  import { PropsWithType } from \'../../utils/types\';\\n  import { XEventsTypes } from \'../../wiring/events.types\';\\n\\n  /**\\n   * Component to be reused that renders an `<a>` wrapping the result contents.\\n   *\\n   * @remarks\\n   * It has the logic to emit {@link XEventsTypes.UserClickedAResult} to the bus on click mouse\\n   * events. Additionally, this component may be injected other events to be emitted on click\\n   * event, so, depending where it\'s used its father component may provide this events.\\n   *\\n   * @public\\n   */\\n  @Component\\n  export default class BaseResultLink extends Vue {\\n    /**\\n     * The rendered DOM element.\\n     *\\n     * @internal\\n     */\\n    public $el!: HTMLElement;\\n    /**\\n     * The list of additional events to be emitted by the component when user clicks the link.\\n     *\\n     * @internal\\n     */\\n    @Inject({ from: \'resultClickExtraEvents\', default: [] })\\n    protected resultClickExtraEvents!: PropsWithType<XEventsTypes, Result>[];\\n\\n    /**\\n     * (Required) The {@link @empathyco/x-types#Result | result} information.\\n     *\\n     * @public\\n     */\\n    @Prop({ required: true })\\n    protected result!: Result;\\n\\n    /**\\n     * Emits the {@link XEventsTypes.UserClickedAResult} when user clicks on the result, and also\\n     * additional events if have been injected in the component.\\n     *\\n     * @internal\\n     */\\n    protected emitUserClickedAResult(): void {\\n      this.$x.emit(\'UserClickedAResult\', this.result, { target: this.$el });\\n      this.resultClickExtraEvents.forEach(event => {\\n        this.$x.emit(event, this.result, { target: this.$el });\\n      });\\n    }\\n  }\\n<\/script>\\n\\n<style lang=\\"scss\\" scoped>\\n  .x-result-link {\\n    text-decoration: none;\\n  }\\n</style>\\n\\n<docs lang=\\"mdx\\">\\n## Events\\n\\nThis component emits the following event:\\n\\n- [`UserClickedAResult`](x-components.xeventstypes.userclickedaresult.md)\\n\\nThe component can emit more events on click using the `resultClickExtraEvents` prop.\\n\\n## See it in action\\n\\nThis component is a wrapper for the result contents (images, name, price...) It may be part of the\\nsearch result page, recommendations or other section which needs to include results.\\n\\nAdditionally, this component may be injected other events to be emitted on click event, so,\\ndepending where it\'s used its father component may provide this events.\\n\\nThe result prop is required. It will render a `<a></a>` with the href to the result URL:\\n\\n```vue\\n<BaseResultLink :result=\\"result\\">\\n  <template #default=\\"{ result }\\">\\n    <img :src=\\"result.images[0]\\"/>\\n    <span>{{ result.name }}</span>\\n  </template>\\n</BaseResultLink>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);