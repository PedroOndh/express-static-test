(window.webpackJsonp=window.webpackJsonp||[]).push([[1007],{1276:function(e,t){throw new Error("Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {\"version\":3,\"file\":\"facets-provider.vue.js\",\"sources\":[\"../../../../../../src/x-modules/facets/components/facets/facets-provider.vue\"],\"sourcesContent\":[\"<script lang=\\\"ts\\\">\\n  import { Facet, Filter } from '@empathyco/x-types';\\n  import Vue from 'vue';\\n  import { Component, Prop, Watch } from 'vue-property-decorator';\\n  import { XOn } from '../../../../components';\\n  import { xComponentMixin } from '../../../../components/x-component.mixin';\\n  import { areFiltersDifferent } from '../../../../utils/filters';\\n  import { FacetsGroup } from '../../service/types';\\n  import { GroupId } from '../../store/types';\\n  import { facetsXModule } from '../../x-module';\\n\\n  /**\\n   * This component allows to provide facets by prop, to add them to the state of the\\n   * `Facets X-Module`. These facets will be added to the `Facets X-Module` state together with\\n   * the facets emitted by the `Search X-Module` through the {@link SearchXEvents.FacetsChanged}\\n   * event.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    mixins: [xComponentMixin(facetsXModule)]\\n  })\\n  export default class FacetsProvider extends Vue {\\n    /**\\n     * An facet group identifier to distinguish the provided facets from other facets like the\\n     * `Search X-Module` facets.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: 'provided-facets' })\\n    public groupId!: GroupId;\\n\\n    /**\\n     * The facets to provide to the `Facets X-Module` state. They have to include the\\n     * {@link @empathyco/x-types#Filter | filters}.\\n     *\\n     * @internal\\n     */\\n    @Prop({ required: true })\\n    public facets!: Facet[];\\n\\n    /**\\n     * Temporarily stores the selected filters from the {@link FacetsProvider.facets} prop.\\n     * This is necessary to handle the {@link FacetsXEvents.UserChangedSelectedFilters} event.\\n     *\\n     * @internal\\n     */\\n    protected selectedFilters: Filter[] | null = null;\\n\\n    /**\\n     * A computed property to group the facets and the groupId. This is used by the watcher.\\n     *\\n     * @returns The FacetGroup with the facets and the group id.\\n     *\\n     * @internal\\n     */\\n    protected get facetsGroup(): FacetsGroup {\\n      return { id: this.groupId, facets: this.facets };\\n    }\\n\\n    /**\\n     * Emits the {@link FacetsXEvents.UserChangedSelectedFilters} event when the user changes\\n     * the selected filters.\\n     *\\n     * @param selectedFilters - The new list of selected filters.\\n     * @internal\\n     */\\n    @XOn('SelectedFiltersChanged')\\n    emitSelectedFiltersChanged(selectedFilters: Filter[]): void {\\n      if (\\n        this.selectedFilters === null ||\\n        areFiltersDifferent(this.selectedFilters, selectedFilters)\\n      ) {\\n        this.$x.emit('UserChangedSelectedFilters', selectedFilters);\\n      }\\n      this.selectedFilters = null;\\n    }\\n\\n    /**\\n     * Emits the {@link FacetsXEvents.FacetsGroupProvided} event with the\\n     * {@link FacetsProvider.facetsGroup} as payload. It also extracts and saves the selected\\n     * filters.\\n     */\\n    @Watch('facetsGroup', { immediate: true })\\n    provideFacets(): void {\\n      if (this.facetsGroup.facets) {\\n        this.$x.emit('FacetsGroupProvided', this.facetsGroup);\\n        this.extractSelectedFilters(this.facets);\\n      }\\n    }\\n\\n    /**\\n     * Extracts the selected filters from the facets and stores them in the\\n     * {@link FacetsProvider.selectedFilters} property.\\n     *\\n     * @param facets - The facets from whom extract the selected filters.\\n     * @internal\\n     */\\n    protected extractSelectedFilters(facets: Facet[]): void {\\n      this.selectedFilters = facets\\n        .flatMap(facet => facet.filters)\\n        .filter(filter => filter.selected);\\n    }\\n\\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\\n    render(): void {}\\n  }\\n<\/script>\\n\\n<style lang=\\\"scss\\\" scoped>\\n  .x-facets-list {\\n    list-style-type: none;\\n  }\\n</style>\\n\\n<docs lang=\\\"mdx\\\">\\n## Example\\n\\nThis component allows to provide facets by prop, to add them to the state of the `Facets X-Module`.\\nThese facets will be added to the `Facets X-Module` state together with the facets emitted by the\\n`Search X-Module` through the {@link SearchXEvents.FacetsChanged} event.\\n\\n```vue\\n<template>\\n  <FacetsProvider :facets=\\\"myFacets\\\" />\\n</template>\\n\\n<script>\\n  import { FacetsProvider } from '@empathyco/x-components/facets';\\n\\n  export default {\\n    components: {\\n      FacetsProvider\\n    },\\n    data() {\\n      return {\\n        myFacets: [\\n          {\\n            modelName: 'SimpleFacet',\\n            id: 'color-facet',\\n            label: 'Color',\\n            filters: [\\n              {\\n                modelName: 'SimpleFilter',\\n                id: 'color:red',\\n                facetId: 'color-facet',\\n                label: 'Red',\\n                selected: false,\\n                value: 'color:red',\\n                totalResults: 10\\n              },\\n              {\\n                modelName: 'SimpleFilter',\\n                id: 'color:blue',\\n                facetId: 'color-facet',\\n                label: 'Blue',\\n                selected: false,\\n                value: 'color:blue',\\n                totalResults: 10\\n              }\\n            ]\\n          }\\n        ]\\n      };\\n    }\\n  };\\n<\/script>\\n```\\n\\n## Events\\n\\nA list of events that the component will emit:\\n\\n- `UserChangedSelectedFilters`: the event is emitted after the user performed an action that changed\\n  the selected filters. The payload is the new list of selected filters.\\n- `FacetsGroupProvided`: the event is emitted after updating the facets prop with a new list of\\n  facets. The payload contains a Facets Group with the facets and the group id.\\n</docs>\\n\"],\"names\":[\"const\"],\"mappings\":\";;;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\"}")}}]);