(window.webpackJsonp=window.webpackJsonp||[]).push([[1005],{1274:function(e,t){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"clear-filters.vue.js","sources":["../../../../../src/x-modules/facets/components/clear-filters.vue"],"sourcesContent":["<template>\\n  <BaseEventButton\\n    v-if=\\"show\\"\\n    class=\\"x-button x-clear-filters\\"\\n    data-test=\\"clear-filters\\"\\n    :disabled=\\"!areThereSelectedFilters\\"\\n    :events=\\"events\\"\\n    :class=\\"cssClasses\\"\\n  >\\n    <slot :selectedFilters=\\"facetsSelectedFilters\\">\\n      Clear Filters ({{ facetsSelectedFilters.length }})\\n    </slot>\\n  </BaseEventButton>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { Facet, Filter, isFacetFilter } from \'@empathyco/x-types\';\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import { Getter, xComponentMixin } from \'../../../components\';\\n  import BaseEventButton from \'../../../components/base-event-button.vue\';\\n  import { VueCSSClasses } from \'../../../utils\';\\n  import { XEventsTypes } from \'../../../wiring\';\\n  import { facetsXModule } from \'../x-module\';\\n\\n  /**\\n   * Renders a simple button, emitting the needed events when clicked.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: { BaseEventButton },\\n    mixins: [xComponentMixin(facetsXModule)]\\n  })\\n  export default class ClearFilters extends Vue {\\n    /**\\n     * It handles if the ClearFilters button is always visible no matter if there are not\\n     * filters selected. If false, the ClearFilters button is not visible whether\\n     * there are no filters selected.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: false })\\n    public alwaysVisible!: boolean;\\n\\n    /**\\n     * Array of facets ids that will be passed to event like payload.\\n     *\\n     * @public\\n     */\\n    @Prop()\\n    public facetsIds?: Array<Facet[\'id\']>;\\n\\n    /**\\n     * Get the selected filters from store.\\n     *\\n     * @internal\\n     */\\n    @Getter(\'facets\', \'selectedFilters\')\\n    public allSelectedFilters!: Filter[];\\n\\n    /**\\n     * If alwaysVisible prop is true, ClearAllFilters button is always shown, but disabled\\n     * if there are no filters selected.\\n     * If alwaysVisible prop is false, ClearAllFilters button is shown whether there\\n     * are some filter selected.\\n     *\\n     * @returns True if alwaysVisible is true or in the opposite case true or false depends\\n     * on if there are selected filters or not.\\n     *\\n     * @internal\\n     */\\n    protected get show(): boolean {\\n      return this.alwaysVisible || this.areThereSelectedFilters;\\n    }\\n\\n    /**\\n     * Get selected filters.\\n     * If there are facets ids, get selected filters whose facet id match with some of facets ids.\\n     * If there aren\'t facets ids, get selected filters.\\n     *\\n     * @returns Array of selected filters depends on there are facets ids or not.\\n     * @internal\\n     */\\n    protected get facetsSelectedFilters(): Filter[] {\\n      if (this.facetsIds) {\\n        return this.allSelectedFilters.filter(\\n          filter => isFacetFilter(filter) && this.facetsIds!.includes(filter.facetId)\\n        );\\n      } else {\\n        return this.allSelectedFilters;\\n      }\\n    }\\n\\n    /**\\n     * Check if there are selected filters.\\n     *\\n     * @returns True or false depends on if there are facets ids and if there are selected filters.\\n     * @internal\\n     */\\n    protected get areThereSelectedFilters(): boolean {\\n      return !!this.facetsSelectedFilters.length;\\n    }\\n\\n    /**\\n     * The events that will be emitted when the button clear filters is clicked.\\n     *\\n     * @returns The events to be emitted when the button clear filters is clicked.\\n     * @internal\\n     */\\n    protected get events(): Partial<XEventsTypes> {\\n      return this.facetsIds\\n        ? {\\n            UserClickedClearAllFilters: this.facetsIds\\n          }\\n        : {\\n            UserClickedClearAllFilters: undefined\\n          };\\n    }\\n\\n    /**\\n     * Dynamic CSS classes to apply to the component.\\n     *\\n     * @returns The dynamic CSS classes to apply to the component.\\n     * @internal\\n     */\\n    protected get cssClasses(): VueCSSClasses {\\n      return {\\n        \'x-clear-filters--has-not-selected-filters\': !this.areThereSelectedFilters,\\n        \'x-clear-filters--has-selected-filters\': this.areThereSelectedFilters\\n      };\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\nThis component renders a button, which on clicked emits the `UserClickedClearAllFilters` or\\n`UserClickedClearAllFilters` event.\\n\\n### Basic usage\\n\\n```vue\\n<ClearFilters />\\n```\\n\\n### Customizing its contents\\n\\nIn this example, show the custom message in button.\\n\\n```vue\\n<ClearFilters v-slot=\\"{ selectedFilters }\\">\\n  Delete {{ selectedFilters.length }} selected\\n</ClearFilters>\\n```\\n\\nIn this example, show the custom message in button with always visible a true and list of facets\\nids.\\n\\n```vue\\n<ClearFilters v-slot=\\"{ selectedFilters }\\" :alwaysVisible=\\"true\\" :facetsIds=\\"facetsIds\\">\\n  Delete {{ selectedFilters.length }} selected\\n</ClearFilters>\\n```\\n\\n## Events\\n\\nA list of events that the component will emit:\\n\\n- `UserClickedClearAllFilters`: the event is emitted after the user clicks the button to clear a\\n  certain facets filter. The event payload is the id of the facets that are going to be cleared.\\n- `UserClickedClearAllFilters`: the event is emitted after the user clicks the button. The event\\n  payload is undefined.\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);