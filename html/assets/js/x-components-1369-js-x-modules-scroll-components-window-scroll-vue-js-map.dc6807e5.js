(window.webpackJsonp=window.webpackJsonp||[]).push([[664],{1440:function(e,n){throw new Error("Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {\"version\":3,\"file\":\"window-scroll.vue.js\",\"sources\":[\"../../../../../src/x-modules/scroll/components/window-scroll.vue\"],\"sourcesContent\":[\"<script lang=\\\"ts\\\">\\n  import { mixins } from 'vue-class-component';\\n  import { Component, Prop } from 'vue-property-decorator';\\n  import { ScrollDirection, ScrollMixin, xComponentMixin } from '../../../components';\\n  import { WireMetadata } from '../../../wiring';\\n  import { scrollXModule } from '../x-module';\\n  import { MainScrollId } from './scroll.const';\\n\\n  type ScrollableElement = 'html' | 'body';\\n\\n  /**\\n   * The `WindowScroll` component listens to either the `html` or `body` DOM scroll events, and\\n   * re-emits them as X Events. Additionally it also emits events related to the direction or\\n   * current position of these elements scroll.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    mixins: [xComponentMixin(scrollXModule)]\\n  })\\n  export default class WindowScroll extends mixins(ScrollMixin) {\\n    /**\\n     * Tag to identify the main scrollable element.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: 'html' })\\n    protected scrollableElement!: ScrollableElement;\\n    /**\\n     * Id to identify the component.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: MainScrollId })\\n    protected id!: string;\\n\\n    mounted(): void {\\n      this.initAndListenElement();\\n      this.$on('scroll', (position: number) => {\\n        this.$x.emit('UserScrolled', position, this.createXEventMetadata());\\n      });\\n      this.$on('scroll:direction-change', (direction: ScrollDirection) => {\\n        this.$x.emit('UserChangedScrollDirection', direction, this.createXEventMetadata());\\n      });\\n      this.$on('scroll:at-start', (hasReachedStart: boolean) => {\\n        this.$x.emit('UserReachedScrollStart', hasReachedStart, this.createXEventMetadata());\\n      });\\n      this.$on('scroll:almost-at-end', (hasAlmostReachedEnd: boolean) => {\\n        this.$x.emit(\\n          'UserAlmostReachedScrollEnd',\\n          hasAlmostReachedEnd,\\n          this.createXEventMetadata()\\n        );\\n      });\\n      this.$on('scroll:at-end', (hasReachedEnd: boolean) => {\\n        this.$x.emit('UserReachedScrollEnd', hasReachedEnd, this.createXEventMetadata());\\n      });\\n    }\\n\\n    /**\\n     * Sets the HTML element depending on {@link WindowScroll.scrollableElement}, and initialises\\n     * its events.\\n     *\\n     * @internal\\n     */\\n    protected initAndListenElement(): void {\\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\\n      // @ts-expect-error\\n      this.$el = this.scrollableElement === 'body' ? document.body : document.documentElement;\\n      this.$el.addEventListener('scroll', this.throttledStoreScrollData);\\n    }\\n\\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\\n    render(): void {}\\n\\n    /**\\n     * Cleanup listeners.\\n     */\\n    beforeDestroy(): void {\\n      this.$el.removeEventListener('scroll', this.throttledStoreScrollData);\\n    }\\n\\n    /**\\n     * Creates the metadata for the events of this component.\\n     *\\n     * @returns A {@link WireMetadata} for the events emitted by this component.\\n     * @internal\\n     */\\n    protected createXEventMetadata(): Partial<WireMetadata> {\\n      return { target: this.$el, id: this.id };\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\\"mdx\\\">\\n## Example\\n\\nThe `WindowScroll` component manages the scroll state of the `body` or `html` elements. It does the\\nnecessary calculations for knowing the direction of scroll, if the scroll has reached its starting\\nposition, if it is about to reach its ending position or if it has already reached it end. Whenever\\nthis state changes, it emits the appropiate X Event to the rest of the application\\n\\n### Custom usage\\n\\n#### Overriding the properties and using document scroll events.\\n\\n```vue\\n<template>\\n  <WindowScroll\\n    @scroll=\\\"scroll\\\"\\n    @scroll:direction-change=\\\"scrollDirectionChange\\\"\\n    @scroll:at-start=\\\"scrollAtStart\\\"\\n    @scroll:almost-at-end=\\\"scrollAlmostAtEnd\\\"\\n    @scroll:at-end=\\\"scrollAtEnd\\\"\\n    id=\\\"example-main-scroll\\\"\\n    throttleMs=\\\"100\\\"\\n    distanceToBottom=\\\"300\\\"\\n    scrollableElement=\\\"body\\\"\\n  />\\n</template>\\n\\n<script>\\n  import { WindowScroll } from '@empathyco/x-components/scroll';\\n\\n  export default {\\n    name: 'ScrollIdTest',\\n    components: {\\n      WindowScroll\\n    },\\n    methods: {\\n      scroll(position) {\\n        console.log('scroll', position);\\n      },\\n      scrollDirectionChange(direction) {\\n        console.log('scroll:direction-change', direction);\\n      },\\n      scrollAtStart() {\\n        console.log('scroll:at-start', isAtStart);\\n      },\\n      scrollAlmostAtEnd(isAlmostAtEnd) {\\n        console.log('scroll:almost-at-end', isAlmostAtEnd);\\n      },\\n      scrollAtEnd(isAtEnd) {\\n        console.log('scroll:at-end', isAtEnd);\\n      }\\n    }\\n  };\\n<\/script>\\n```\\n\\n#### Using body and XEvents.\\n\\nIf we want to listen scroll body we should do some changes in css for body. This is an example, so\\ntherefore the height of body can be get any value that you want. The template style should have a\\nsimilar styles the corresponding style for tag body like in the next example.\\n\\n```vue\\n<template>\\n  <WindowScroll\\n    id=\\\"example-main-scroll\\\"\\n    throttleMs=\\\"100\\\"\\n    distanceToBottom=\\\"300\\\"\\n    scrollableElement=\\\"body\\\"\\n  />\\n</template>\\n\\n<script>\\n  import { WindowScroll } from '@empathyco/x-components/scroll';\\n\\n  export default {\\n    name: 'MainComponent',\\n    components: {\\n      WindowScroll\\n    },\\n    mounted() {\\n      this.$x.on('UserScrolled').subscribe(distance => {\\n        console.log(distance);\\n      });\\n      this.$x.on('UserChangedScrollDirection').subscribe(direction => {\\n        console.log(direction);\\n      });\\n      this.$x.on('UserReachedScrollStart').subscribe(isAtStart => {\\n        console.log(isAtStart);\\n      });\\n      this.$x.on('UserAlmostReachedScrollEnd').subscribe(isAlmostAtEnd => {\\n        console.log(isAlmostAtEnd);\\n      });\\n      this.$x.on('UserReachedScrollEnd').subscribe(isAtEnd => {\\n        console.log(isAtEnd);\\n      });\\n    }\\n  };\\n<\/script>\\n<style lang=\\\"scss\\\">\\n  html {\\n    overflow: hidden;\\n  }\\n\\n  body {\\n    overflow-y: auto;\\n    height: 100vh;\\n  }\\n</style>\\n```\\n\\n## Vue Events\\n\\n- `scroll`: the event is emitted after the user scrolls in this container. The payload is the scroll\\n  top distance in pixels.\\n- `scroll:direction-change`: the event is emitted when the user changes the scroll direction. The\\n  payload is the new scrolling direction.\\n- `scroll:at-start`: the event is emitted when the user scrolls up to the initial position of the\\n  scroll.\\n- `scroll:almost-at-end`: the event is emitted when the user is about to reach the bottom part of\\n  the scroll.\\n- `scroll:at-end`: the event is emitted when the user has reached the bottom part of the scroll.\\n\\n## Events\\n\\nA list of events that the component will emit:\\n\\n- `UserScrolled`: the event is emitted after the user scrolls in this container. The payload is the\\n  scroll top distance in pixels.\\n- `UserChangedScrollDirection`: the event is emitted when the user changes the scroll direction. The\\n  payload is the new scrolling direction.\\n- `UserReachedScrollStart`: the event is emitted when the user scrolls up to the initial position of\\n  the scroll.\\n- `UserAlmostReachedScrollEnd`: the event is emitted when the user is about to reach the bottom part\\n  of the scroll.\\n- `UserReachedScrollEnd`: the event is emitted when the user has reached the bottom part of the\\n  scroll.\\n</docs>\\n\"],\"names\":[\"const\"],\"mappings\":\";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\"}")}}]);