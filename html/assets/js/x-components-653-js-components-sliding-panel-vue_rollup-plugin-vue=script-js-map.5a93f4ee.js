(window.webpackJsonp=window.webpackJsonp||[]).push([[925],{1202:function(A,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"sliding-panel.vue_rollup-plugin-vue=script.js","sources":["../../../src/components/sliding-panel.vue?rollup-plugin-vue=script.ts"],"sourcesContent":["\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nimport Vue from \'vue\';\\nimport { Component, Prop } from \'vue-property-decorator\';\\nimport { VueCSSClasses } from \'../utils/types\';\\nimport { Debounce } from \'./decorators/debounce.decorators\';\\n\\n/**\\n * This component allows for any other component or element inside it to be horizontally\\n * navigable. It also implements customizable buttons as well as other minor customizations to its\\n * general behavior.\\n *\\n * @public\\n */\\n@Component\\nexport default class SlidingPanel extends Vue {\\n  /**\\n   * Scroll factor that will dictate how much the scroll moves when pressing a navigation button.\\n   *\\n   * @public\\n   */\\n  @Prop({ default: 0.7 })\\n  public scrollFactor!: number;\\n\\n  /**\\n   * Would make the navigation buttons visible when they\'re needed or always hide them.\\n   *\\n   * @public\\n   */\\n  @Prop({ default: true })\\n  public showButtons!: boolean;\\n\\n  /**\\n   * When true, whenever the DOM content in the sliding panel slot changes, it will reset\\n   * the scroll position to 0.\\n   *\\n   * @public\\n   */\\n  @Prop({ default: true })\\n  public resetOnContentChange!: boolean;\\n\\n  /**\\n   * CSS classes to add to the buttons.\\n   *\\n   * @public\\n   */\\n  @Prop()\\n  public buttonClass?: string;\\n\\n  /**\\n   * Indicates if the scroll is at the start of the sliding panel.\\n   *\\n   * @internal\\n   */\\n  protected isScrollAtStart = true;\\n\\n  /**\\n   * Indicates if the scroll is at the end of the sliding panel.\\n   *\\n   * @internal\\n   */\\n  protected isScrollAtEnd = true;\\n\\n  /**\\n   * HTMLElement referencing the scroll of the component.\\n   *\\n   * @internal\\n   */\\n  public $refs!: {\\n    scrollContainer: HTMLElement;\\n  };\\n\\n  /**\\n   * CSS classes to apply based on the scroll position.\\n   *\\n   * @returns The CSS classes to apply.\\n   *\\n   * @internal\\n   */\\n  protected get cssClasses(): VueCSSClasses {\\n    return {\\n      \'x-sliding-panel--at-start\': this.isScrollAtStart,\\n      \'x-sliding-panel--at-end\': this.isScrollAtEnd\\n    };\\n  }\\n\\n  /**\\n   * Initialises browser platform code:\\n   * - Creates a mutation observer to detect content changes and reset scroll position.\\n   * - Stores initial size and scroll position values.\\n   *\\n   * @internal\\n   */\\n  mounted(): void {\\n    // eslint-disable-next-line @typescript-eslint/unbound-method\\n    const resizeObserver = new ResizeObserver(this.debouncedUpdateScrollPosition);\\n    resizeObserver.observe(this.$el);\\n    // eslint-disable-next-line @typescript-eslint/unbound-method\\n    const contentChangedObserver = new MutationObserver(this.restoreAndUpdateScroll);\\n    this.$watch(\\n      () => this.resetOnContentChange,\\n      shouldReset => {\\n        if (shouldReset) {\\n          contentChangedObserver.observe(this.$refs.scrollContainer, {\\n            attributes: false,\\n            childList: true,\\n            subtree: true,\\n            characterData: false\\n          });\\n        } else {\\n          contentChangedObserver.disconnect();\\n        }\\n      },\\n      { immediate: true }\\n    );\\n    this.$on(\'hook:beforeDestroy\', () => {\\n      contentChangedObserver.disconnect();\\n      resizeObserver.disconnect();\\n    });\\n\\n    this.updateScrollPosition();\\n  }\\n\\n  /**\\n   * Resets the scroll and updates the values of the scroll for the buttons to react.\\n   *\\n   * @internal\\n   */\\n  @Debounce(100, { leading: true })\\n  restoreAndUpdateScroll(): void {\\n    this.$refs.scrollContainer.scroll({ left: 0, behavior: \'smooth\' });\\n    this.updateScrollPosition();\\n  }\\n\\n  /**\\n   * Updates the values of the scroll positions to show or hide the buttons depending on it.\\n   *\\n   * @internal\\n   */\\n  protected updateScrollPosition(): void {\\n    const { scrollLeft, clientWidth, scrollWidth } = this.$refs.scrollContainer;\\n    this.isScrollAtStart = !scrollLeft;\\n    /* The 2 px extra is to fix some cases in some resolutions where the scroll + client size is\\n     *  less than the scroll width even when the scroll is at the end */\\n    this.isScrollAtEnd = scrollLeft + clientWidth + 2 >= scrollWidth;\\n  }\\n\\n  /**\\n   * Debounced version of the {@link SlidingPanel.updateScrollPosition | updateScrollPosition}\\n   * method.\\n   *\\n   * @internal\\n   */\\n  @Debounce(100, { leading: true })\\n  debouncedUpdateScrollPosition(): void {\\n    this.updateScrollPosition();\\n  }\\n\\n  /**\\n   * Scrolls the wrapper element to the left.\\n   *\\n   * @internal\\n   */\\n  protected scrollLeft(): void {\\n    this.scrollTo(-this.$refs.scrollContainer.clientWidth);\\n  }\\n\\n  /**\\n   * Scrolls the wrapper element to the right.\\n   *\\n   * @internal\\n   */\\n  protected scrollRight(): void {\\n    this.scrollTo(this.$refs.scrollContainer.clientWidth);\\n  }\\n\\n  /**\\n   * Scrolls the wrapper element towards the provided scroll value.\\n   *\\n   * @param scrollValue - The value the scroll will go towards.\\n   *\\n   * @internal\\n   */\\n  protected scrollTo(scrollValue: number): void {\\n    this.$refs.scrollContainer.scrollBy({\\n      left: scrollValue * this.scrollFactor,\\n      behavior: \'smooth\'\\n    });\\n  }\\n}\\n"],"names":[],"mappings":"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"}')}}]);