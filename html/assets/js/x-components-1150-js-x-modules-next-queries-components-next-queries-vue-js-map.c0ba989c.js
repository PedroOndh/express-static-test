(window.webpackJsonp=window.webpackJsonp||[]).push([[584],{1367:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"next-queries.vue.js","sources":["../../../../../src/x-modules/next-queries/components/next-queries.vue"],"sourcesContent":["<template>\\n  <BaseSuggestions\\n    :suggestions=\\"nextQueries\\"\\n    data-test=\\"next-queries\\"\\n    class=\\"x-next-queries\\"\\n    :animation=\\"animation\\"\\n    :maxItemsToRender=\\"maxItemsToRender\\"\\n  >\\n    <template #default=\\"{ suggestion, index }\\">\\n      \x3c!--\\n        @slot Next Query item\\n            @binding {Suggestion} suggestion - Next Query suggestion data\\n            @binding {number} index - Next Query suggestion index\\n            @binding {boolean} highlightCurated - True if the curated NQs should be highlighted\\n      --\x3e\\n      <slot name=\\"suggestion\\" v-bind=\\"{ suggestion, highlightCurated, index }\\">\\n        <NextQuery\\n          #default=\\"{ suggestion, shouldHighlightCurated }\\"\\n          :suggestion=\\"suggestion\\"\\n          :highlightCurated=\\"highlightCurated\\"\\n          class=\\"x-next-queries__suggestion\\"\\n        >\\n          \x3c!--\\n              @slot Next Query content\\n                  @binding {Suggestion} suggestion - Next Query suggestion data\\n                  @binding {boolean} shouldHighlightCurated - True if the curated NQ should\\n                  be highlighted\\n                  @binding {number} index - Next Query suggestion index\\n            --\x3e\\n          <slot name=\\"suggestion-content\\" v-bind=\\"{ suggestion, shouldHighlightCurated, index }\\" />\\n        </NextQuery>\\n      </slot>\\n    </template>\\n  </BaseSuggestions>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { NextQuery as NextQueryModel } from \'@empathyco/x-types\';\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import BaseSuggestions from \'../../../components/suggestions/base-suggestions.vue\';\\n  import { Getter } from \'../../../components/decorators/store.decorators\';\\n  import { xComponentMixin } from \'../../../components/x-component.mixin\';\\n  import { nextQueriesXModule } from \'../x-module\';\\n  import NextQuery from \'./next-query.vue\';\\n\\n  /**\\n   * Simple next-queries component that renders a list of suggestions, allowing the user to\\n   * select one of them, and emitting the needed events.\\n   * A next query is a suggestion for a new search, related to your previous query. I.e. If\\n   * people normally search for `shirts`, and then `trousers`, `trousers` would be a next query\\n   * of `shirts`.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: { NextQuery, BaseSuggestions },\\n    mixins: [xComponentMixin(nextQueriesXModule)]\\n  })\\n  export default class NextQueries extends Vue {\\n    /**\\n     * Animation component that will be used to animate the suggestions.\\n     *\\n     * @public\\n     */\\n    @Prop()\\n    protected animation!: Vue;\\n\\n    /**\\n     * Number of next queries to be rendered.\\n     *\\n     * @public\\n     */\\n    @Prop()\\n    protected maxItemsToRender?: number;\\n\\n    /**\\n     * The list of next queries.\\n     *\\n     * @internal\\n     */\\n    @Getter(\'nextQueries\', \'nextQueries\')\\n    public nextQueries!: NextQueryModel[];\\n\\n    /**\\n     * Flag to indicate if the curated next queries should be displayed different.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: false, type: Boolean })\\n    protected highlightCurated!: boolean;\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\n### Basic example\\n\\nYou don\'t need to pass any props, or slots. Simply add the component, and when it has any next\\nqueries it will show them\\n\\n```vue\\n<NextQueries />\\n```\\n\\nThe component has three optional props. `animation` to render the component with an animation,\\n`maxItemToRender` to limit the number of next queries will be rendered (by default it is 5) and\\n`highlightCurated` to indicate if the curated Next Queries inside the list should be highlighted.\\n\\n```vue\\n<NextQueries :animation=\\"FadeAndSlide\\" :maxItemsToRender=\\"10\\" :highlightCurated=\\"true\\" />\\n```\\n\\n### Overriding Next Queries\' Content\\n\\nYou can use your custom implementation of the Next Query\'s content. In the example below, instead of\\nusing the default Next Query\'s content, an icon is added, as well as a span with the query of the\\nNext Query suggestion.\\n\\n```vue\\n<NextQueries>\\n  <template #suggestion-content=\\"{suggestion}\\">\\n    <img src=\\"./next-query-icon.svg\\" class=\\"x-next-query__icon\\"/>\\n    <span class=\\"x-next-query__query\\">{{ suggestion.query }}</span>\\n  </template>\\n</NextQueries>\\n```\\n\\n### Adding a custom next query component\\n\\nYou can use your custom implementation of a next query component. To work correctly, it should use\\nthe `emitNextQuerySelected` function when the next query is selected. In the example below, instead\\nof using the default `button` tag for a next query, an icon is added, and the text of the next query\\nis wrapped in a `span`\\n\\n```vue\\n<NextQueries>\\n  <template #suggestion=\\"{suggestion}\\">\\n    <NextQuery :suggestion=\\"suggestion\\" class=\\"x-next-queries__suggestion\\">\\n      <template #default=\\"{suggestion}\\">\\n        <img src=\\"./next-query-icon.svg\\" class=\\"x-next-query__icon\\"/>\\n        <span class=\\"x-next-query__query\\">{{ suggestion.query }}</span>\\n      </template>\\n    </NextQuery>\\n    <button>Custom Behaviour</button>\\n  </template>\\n</NextQueries>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);