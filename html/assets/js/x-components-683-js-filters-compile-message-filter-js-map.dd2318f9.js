(window.webpackJsonp=window.webpackJsonp||[]).push([[936],{1212:function(e,A){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"compile-message.filter.js","sources":["../../../src/filters/compile-message.filter.ts"],"sourcesContent":["import { Dictionary } from \'../utils\';\\n\\n/**\\n * Replaces a key in compiledMessage for the provided key\'s value.\\n *\\n * @param compiledMessage - String containing the key to be replaced.\\n * @param keyValueEntry - Key would be the string replaced in compiledMessage and value the\\n * string that will get replaced with.\\n * @returns Formatted string.\\n * @internal\\n */\\nconst replaceParams = (compiledMessage: string, [key, value]: [string, string | number]): string =>\\n  compiledMessage.replace(new RegExp(`{${key}}`, \'g\'), value.toString());\\n\\n/**\\n * Replaces each key in compiledMessage for the provided key\'s value.\\n *\\n * @param message - String containing the keys to be replaced.\\n * @param params - Dictionary of key-values that will be used to format compiledMessage.\\n * @returns Formatted string.\\n * @public\\n */\\nexport function compileMessage(message: string, params: Dictionary<string | number>): string {\\n  return message && params\\n    ? Object.entries<string | number>(params).reduce(replaceParams, message)\\n    : message;\\n}\\n"],"names":[],"mappings":"AAEA;;;;;;;;;AASA,IAAM,aAAa,GAAG,UAAC,eAAuB,EAAE,EAAuC;QAAtC,GAAG,QAAA,EAAE,KAAK,QAAA;IACzD,OAAA,eAAe,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,MAAI,GAAG,MAAG,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC;AAAtE,CAAsE,CAAC;AAEzE;;;;;;;;SAQgB,cAAc,CAAC,OAAe,EAAE,MAAmC;IACjF,OAAO,OAAO,IAAI,MAAM;UACpB,MAAM,CAAC,OAAO,CAAkB,MAAM,CAAC,CAAC,MAAM,CAAC,aAAa,EAAE,OAAO,CAAC;UACtE,OAAO,CAAC;AACd;;;;"}')}}]);