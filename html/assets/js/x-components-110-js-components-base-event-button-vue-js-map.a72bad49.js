(window.webpackJsonp=window.webpackJsonp||[]).push([[566],{1021:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"base-event-button.vue.js","sources":["../../../src/components/base-event-button.vue"],"sourcesContent":["<template>\\n  <button v-on=\\"$listeners\\" @click=\\"emitEvents\\" data-test=\\"event-button\\">\\n    \x3c!-- @slot (Required) Button content with a text, an icon or both --\x3e\\n    <slot />\\n  </button>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import { XEvent, XEventsTypes } from \'../wiring\';\\n\\n  /**\\n   * Component to be reused that renders a `<button>` with the logic of emitting events to the bus\\n   * on click. The events are passed as an object to prop {@link XEventsTypes | events}.\\n   * The keys are the event name and the values are the payload of each event. All events are\\n   * emitted with its respective payload. If any event doesn\'t need payload a `undefined` must be\\n   * passed as value.\\n   *\\n   * @public\\n   */\\n  @Component\\n  export default class BaseEventButton extends Vue {\\n    /**\\n     * (Required) A object where the keys are the {@link XEvent} and the values\\n     * are the payload of each event.\\n     *\\n     * @public\\n     */\\n    @Prop({ required: true })\\n    protected events!: Partial<XEventsTypes>;\\n\\n    protected emitEvents(): void {\\n      Object.entries(this.events).forEach(([event, payload]) => {\\n        this.$x.emit(event as XEvent, payload, { target: this.$el as HTMLElement });\\n      });\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\n### Basic example\\n\\nThe event prop is required. It will render a <button></button> that emits the event passed as prop\\nwith the value as payload on click:\\n\\n```vue\\n<BaseEventButton :events=\\"{ myEvent: payload }\\" />\\n```\\n\\nIf the event doesn\'t need payload then `undefined` must be passed:\\n\\n```vue\\n<BaseEventButton :events=\\"{ myEvent: undefined }\\" />\\n```\\n\\nIt can emit multiple events at the same time:\\n\\n```vue\\n<BaseEventButton :events=\\"{ myFirstEvent: payload1, mySecondEvent: payload2 }\\" />\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);