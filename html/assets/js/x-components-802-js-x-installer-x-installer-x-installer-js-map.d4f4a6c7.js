(window.webpackJsonp=window.webpackJsonp||[]).push([[980],{1251:function(A,n){throw new Error("Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {\"version\":3,\"file\":\"x-installer.js\",\"sources\":[\"../../../../src/x-installer/x-installer/x-installer.ts\"],\"sourcesContent\":[\"import { EmpathyAdapterConfig } from '@empathyco/x-adapter';\\nimport { deepMerge } from '@empathyco/x-deep-merge';\\nimport Vue, { PluginObject, VueConstructor } from 'vue';\\nimport { BaseXBus } from '../../plugins/x-bus';\\nimport { XBus } from '../../plugins/x-bus.types';\\nimport { XPlugin } from '../../plugins/x-plugin';\\nimport { XPluginOptions } from '../../plugins/x-plugin.types';\\nimport { cleanUndefined } from '../../utils/object';\\nimport { DeepPartial } from '../../utils/types';\\nimport { SnippetConfig, XAPI } from '../api/api.types';\\nimport { BaseXAPI } from '../api/base-api';\\nimport { InstallXOptions, VueConstructorPartialArgument } from './types';\\n\\ndeclare global {\\n  interface Window {\\n    X?: XAPI;\\n  }\\n}\\n\\nconst defaultAdapterConfig: DeepPartial<EmpathyAdapterConfig> = {\\n  env: 'live',\\n  requestParams: {\\n    lang: 'es',\\n    scope: 'default'\\n  }\\n};\\n\\n/**\\n * The purpose of this class is to offer a quick way to initialize the XComponents in a setup\\n * project. It allows to receive all the options in {@link InstallXOptions} which is an extension\\n * of {@link XPluginOptions} with all the options for the plugin and some options more.\\n *\\n * This class does multiple things:\\n * 1. Install the {@link XPlugin} with the {@link XPluginOptions}.\\n * 2. Creates the public {@link XAPI} and add it to global window.\\n * 3. Creates the Vue Application for the customer project.\\n *\\n * The steps 2 & 3 are optional and depends on the options passed in {@link InstallXOptions}.\\n *\\n * @example The way to use this class is the next:\\n *    1. Create the installer passing in the {@link InstallXOptions}. This only save the options:\\n *\\n * ```\\n *        const installer = new XInstaller(installXOptions)\\n * ```\\n *\\n *    2. Initialize passing the {@link SnippetConfig}. This installs the plugin and creates the App.\\n *       There are 3 different ways to do this:\\n *\\n *        2.1 Using the created installer:\\n *\\n * ```\\n *            installer.init(snipetConfig)\\n * ```\\n *\\n *        2.2 If the API option is enabled (`createAPI` is `true` in {@link InstallXOptions}, or\\n *            is not present as the default value is `true`) then this init step can be done with\\n *            the Public API:\\n *\\n * ```\\n *            window.X.init(snippetConfig)\\n * ```\\n *\\n *        2.3 When the script of the project build is loaded it searches for a global `initX`\\n *            variable that the customer must have in their web site. This variable can be a\\n *            function that returns the {@link SnippetConfig} or an object that contains the\\n *            {@link SnippetConfig} itself:\\n *\\n * ```\\n *            window.initX = function() {\\n *                 return {\\n *                   instance,\\n *                   env,\\n *                   scope,\\n *                   lang,\\n *                   searchLang,\\n *                   currency,\\n *                   consent,\\n *                   documentDirection\\n *                 };\\n *              };\\n * ```\\n *\\n * ```\\n *            window.initX = {\\n *                 instance,\\n *                 env,\\n *                 scope,\\n *                 lang,\\n *                 searchLang,\\n *                 currency,\\n *                 consent,\\n *                 documentDirection\\n *               };\\n * ```\\n *\\n * @public\\n */\\nexport class XInstaller {\\n  private api?: XAPI;\\n\\n  /**\\n   * Receives the {@link InstallXOptions} and merges it with the default fallback options. Also\\n   * creates the public {@link XAPI}.\\n   *\\n   * @param options - The {@link InstallXOptions}.\\n   *\\n   * @public\\n   */\\n  public constructor(protected readonly options: InstallXOptions) {\\n    this.createAPI();\\n  }\\n\\n  /**\\n   * Creates the public {@link XAPI} using the `api` option from {@link InstallXOptions}. If this\\n   * `api` option is not passed, then a default {@link BaseXAPI} is created. To disable the API\\n   * creation the value `false` must be passed in the `api` option.\\n   *\\n   * @internal\\n   */\\n  protected createAPI(): void {\\n    const { api } = this.options;\\n    if (api !== false) {\\n      this.api = api ?? new BaseXAPI();\\n      this.api.setInitCallback(this.init.bind(this));\\n      window.X = this.api;\\n    }\\n  }\\n\\n  /**\\n   * Receives the {@link SnippetConfig | snippet config}, installs the plugin and initializes\\n   * the Vue application.\\n   *\\n   * @param snippetConfig - The {@link SnippetConfig} that receives from snippet\\n   * integration.\\n   *\\n   * @returns Object with the {@link XAPI}, the {@link XBus}, the {@link XPlugin} and the Vue App\\n   * used in the application.\\n   *\\n   * @public\\n   */\\n  async init(snippetConfig: SnippetConfig): Promise<{\\n    app: Vue | undefined;\\n    api: XAPI | undefined;\\n    bus: XBus;\\n    plugin: PluginObject<XPluginOptions>;\\n  }> {\\n    const adapterConfig = this.getAdapterConfig(snippetConfig);\\n    this.applyConfigToAdapter(adapterConfig);\\n    const bus = this.createBus();\\n    const pluginOptions = this.getPluginOptions();\\n    const plugin = this.installPlugin(pluginOptions, bus);\\n    const extraPlugins = await this.installExtraPlugins(snippetConfig, bus);\\n    const app = this.createApp(extraPlugins, snippetConfig);\\n    this.api?.setBus(bus);\\n\\n    return {\\n      api: this.api,\\n      app,\\n      bus,\\n      plugin\\n    };\\n  }\\n\\n  /**\\n   * Creates the Adapter Config object using the {@link SnippetConfig} to do it. It also\\n   * merges the default configuration.\\n   *\\n   * @param options - The {@link SnippetConfig}.\\n   *\\n   * @returns The Adapter Config object.\\n   *\\n   * @internal\\n   */\\n  protected getAdapterConfig({ instance, env, lang, searchLang, scope }: SnippetConfig): unknown {\\n    return deepMerge(\\n      defaultAdapterConfig,\\n      cleanUndefined<DeepPartial<EmpathyAdapterConfig>>({\\n        instance,\\n        env,\\n        requestParams: {\\n          lang: searchLang ?? lang,\\n          scope\\n        }\\n      })\\n    );\\n  }\\n\\n  /**\\n   * Creates the {@link XPluginOptions} object.\\n   *\\n   * @returns The {@link XPluginOptions} object.\\n   *\\n   * @internal\\n   */\\n  protected getPluginOptions(): XPluginOptions {\\n    const { adapter, store, initialXModules, xModules, __PRIVATE__xModules } = this.options;\\n    return {\\n      adapter,\\n      store,\\n      xModules,\\n      initialXModules,\\n      __PRIVATE__xModules\\n    };\\n  }\\n\\n  /**\\n   * It applies the snippet configuration to the Adapter. Not all the parameters are for the Adapter\\n   * but they appear destructured to not include them in the `extraParams` parameter.\\n   *\\n   * @param adapterConfig - The Adapter config object.\\n   *\\n   * @internal\\n   */\\n  protected applyConfigToAdapter(adapterConfig: any): void {\\n    this.options.adapter.setConfig?.(adapterConfig);\\n  }\\n\\n  /**\\n   * This method returns the bus instance to be used in the {@link XPlugin} and in the {@link XAPI}.\\n   * It returns the `bus` parameter in the {@link InstallXOptions} or if not provided, then\\n   * creates a new instance of {@link BaseXBus}.\\n   *\\n   * @returns XBus - The bus instance.\\n   *\\n   * @internal\\n   */\\n  protected createBus(): XBus {\\n    return this.options.bus ?? new BaseXBus();\\n  }\\n\\n  /**\\n   * This method returns the VueConstructor to use to create the App instance.\\n   * It returns the `vue` parameter in the {@link InstallXOptions} or if not provided, then\\n   * returns the default Vue.\\n   *\\n   * @remarks The purpose of this option is mainly the testing. In a test we can use this option\\n   * to pass the local vue instance created by `createLocalVue` method.\\n   *\\n   * @returns VueConstructor - The vue constructor to create the App instance.\\n   *\\n   * @internal\\n   */\\n  protected getVue(): VueConstructor {\\n    return this.options.vue ?? Vue;\\n  }\\n\\n  /**\\n   * Creates and install the Vue Plugin. If `plugin` parameter is passed in the\\n   * {@link InstallXOptions}, then it is used. If not, then a new instance of {@link XPlugin} is\\n   * created and installed.\\n   *\\n   * @param pluginOptions - The {@link XPluginOptions} to passed as parameter to the install method\\n   * of the plugin.\\n   * @param bus - The {@link XBus} to be used to create the XPlugin.\\n   *\\n   * @returns PluginObject<XPluginOption> - The plugin instance.\\n   * @internal\\n   */\\n  protected installPlugin(pluginOptions: XPluginOptions, bus: XBus): PluginObject<XPluginOptions> {\\n    const plugin = this.options.plugin ?? new XPlugin(bus);\\n    const vue = this.getVue();\\n    vue.use(plugin, pluginOptions);\\n    return plugin;\\n  }\\n\\n  /**\\n   * Install more plugins to Vue defined by the user.\\n   *\\n   * @param snippet - The snippet configuration.\\n   * @param bus - The events bus used in the application.\\n   * @returns The arguments from the plugins installation to be used in Vue's constructor.\\n   * @internal\\n   */\\n  protected installExtraPlugins(\\n    snippet: SnippetConfig,\\n    bus: XBus\\n  ): Promise<VueConstructorPartialArgument> {\\n    const vue = this.getVue();\\n    return Promise.resolve(this.options.installExtraPlugins?.({ vue, snippet, bus }));\\n  }\\n\\n  /**\\n   * In the case that the `app` parameter is present in the {@link InstallXOptions}, then a new Vue\\n   * application is created using that app.\\n   *\\n   * @param extraPlugins - Vue plugins initialisation data.\\n   * @param snippetConfig - Configuration from the client snippet.\\n   * @returns The Created Vue application or undefined if not created.\\n   *\\n   * @internal\\n   */\\n  protected createApp(\\n    extraPlugins: VueConstructorPartialArgument,\\n    snippetConfig: SnippetConfig\\n  ): Vue | undefined {\\n    if (this.options.app !== undefined) {\\n      const vue = this.getVue();\\n      snippetConfig = vue.observable(snippetConfig);\\n      return new vue({\\n        ...extraPlugins,\\n        ...this.options.vueOptions,\\n        provide() {\\n          return {\\n            snippetConfig\\n          };\\n        },\\n        store: this.options.store,\\n        el: this.getMountingTarget(this.options.domElement),\\n        render: h => h(this.options.app)\\n      });\\n    }\\n  }\\n\\n  /**\\n   * It returns the HTML element to mount the Vue Application. If the `domElement` parameter in the\\n   * {@link InstallXOptions} is an Element or a string, then it is used. If it is\\n   * not present then a new <div> Element is created and append to the body to be used.\\n   *\\n   * @param elementOrSelector - String or Element used to mount the Vue App.\\n   *\\n   * @returns The Element to use as mounting point for the Vue App.\\n   * @internal\\n   */\\n  protected getMountingTarget(elementOrSelector?: string | Element): Element {\\n    if (typeof elementOrSelector === 'string') {\\n      const target = document.querySelector(elementOrSelector);\\n      if (!target) {\\n        throw Error(\\n          `XComponents app couldn't be mounted: Element \\\"${elementOrSelector}\\\" couldn't be found`\\n        );\\n      }\\n      return target;\\n    } else if (elementOrSelector !== undefined) {\\n      return elementOrSelector;\\n    } else {\\n      return document.body.appendChild(document.createElement('div'));\\n    }\\n  }\\n}\\n\"],\"names\":[],\"mappings\":\"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\"}")}}]);