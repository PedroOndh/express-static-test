(window.webpackJsonp=window.webpackJsonp||[]).push([[537],{1324:function(A,e){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"utils.js","sources":["../../../../src/x-modules/facets/utils.ts"],"sourcesContent":["import { isStringEmpty } from \'../../utils/string\';\\n\\n/**\\n * Compares two queries to know if the new one is a refined query from the previous one or a new\\n * one.\\n *\\n * A refined query is a query which has the previous query or part of it.\\n * Example:\\n * - previousQuery = \'lego star\'.\\n * - newQuery = \'lego star wars\'.\\n *\\n * Example:\\n * - previousQuery = \'lego star wars\'.\\n * - newQuery = \'lego star\'.\\n *\\n * A new query is a query which has not the previous query.\\n * Example:\\n * - previousQuery = \'lego star\'.\\n * - newQuery = \'lego wars\'.\\n *\\n * In this case, it is changing the word set, because a word is changed by another one, so\\n * this is changing the search intention.\\n *\\n * @param newQuery - The new query.\\n * @param previousQuery - The previous query.\\n *\\n * @returns A boolean which flags if the query is refined or not.\\n *\\n * @public\\n */\\nexport function isNewQuery(newQuery: string, previousQuery: string): boolean {\\n  const isNewQueryEmpty = isStringEmpty(newQuery);\\n  const isPreviousQueryEmpty = isStringEmpty(previousQuery);\\n  const previousQueryWords = previousQuery.split(\' \');\\n  const newQueryWords = newQuery.split(\' \');\\n  return (\\n    !previousQueryWords.every(previousQueryWord =>\\n      newQueryWords.some(\\n        newQueryWord =>\\n          newQueryWord.includes(previousQueryWord) || previousQueryWord.includes(newQueryWord)\\n      )\\n    ) ||\\n    (isNewQueryEmpty && !isPreviousQueryEmpty) ||\\n    (!isNewQueryEmpty && isPreviousQueryEmpty)\\n  );\\n}\\n"],"names":[],"mappings":";;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA4BgB,UAAU,CAAC,QAAgB,EAAE,aAAqB;IAChE,IAAM,eAAe,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;IAChD,IAAM,oBAAoB,GAAG,aAAa,CAAC,aAAa,CAAC,CAAC;IAC1D,IAAM,kBAAkB,GAAG,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACpD,IAAM,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC1C,QACE,CAAC,kBAAkB,CAAC,KAAK,CAAC,UAAA,iBAAiB;QACzC,OAAA,aAAa,CAAC,IAAI,CAChB,UAAA,YAAY;YACV,OAAA,YAAY,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,iBAAiB,CAAC,QAAQ,CAAC,YAAY,CAAC;SAAA,CACvF;KAAA,CACF;SACA,eAAe,IAAI,CAAC,oBAAoB,CAAC;SACzC,CAAC,eAAe,IAAI,oBAAoB,CAAC,EAC1C;AACJ;;;;"}')}}]);