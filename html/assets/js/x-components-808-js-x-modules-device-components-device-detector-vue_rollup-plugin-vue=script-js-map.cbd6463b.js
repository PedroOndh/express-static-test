(window.webpackJsonp=window.webpackJsonp||[]).push([[982],{1253:function(A,e){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"device-detector.vue_rollup-plugin-vue=script.js","sources":["../../../../../src/x-modules/device/components/device-detector.vue?rollup-plugin-vue=script.ts"],"sourcesContent":["\\n\\n\\n\\n\\nimport Vue from \'vue\';\\nimport GlobalEvents from \'vue-global-events\';\\nimport { Component, Prop, Watch } from \'vue-property-decorator\';\\nimport { xComponentMixin } from \'../../../components/x-component.mixin\';\\nimport { XEmit } from \'../../../components/decorators/bus.decorators\';\\nimport { throttle } from \'../../../utils/throttle\';\\nimport { deviceXModule } from \'../x-module\';\\n\\n/** Alias just to improve code readiness. */\\ntype Device = string;\\n/** Alias just to improve code readiness. */\\ntype MaxWidth = number;\\n\\n/**\\n * This component helps detecting or setting a device, that can be used later to create\\n * different layouts optimized for different devices. This detected device is available under\\n * the {@link XComponentAliasAPI.device} property.\\n *\\n * @public\\n */\\n@Component({\\n  mixins: [xComponentMixin(deviceXModule)],\\n  components: {\\n    GlobalEvents\\n  }\\n})\\nexport default class DeviceDetector extends Vue {\\n  /**\\n   * Record of the device name, that can be whatever you want `xs`, `mobile`, `big`... And\\n   * the max width in pixels for that device.\\n   *\\n   * @public\\n   */\\n  @Prop({ default: () => ({}) })\\n  public readonly breakpoints!: Record<Device, MaxWidth>;\\n\\n  /**\\n   * Forces a device, ignoring the {@link DeviceDetector.breakpoints} prop.\\n   *\\n   * @public\\n   */\\n  @Prop()\\n  public readonly force?: Device;\\n\\n  /**\\n   * Time in milliseconds to throttle the resize events used to detect the device.\\n   *\\n   * @public\\n   */\\n  @Prop({ default: 100 })\\n  public readonly throttleMs!: number;\\n\\n  /**\\n   * The width in pixels of the window where the app is being rendered.\\n   *\\n   * @internal\\n   */\\n  protected windowWidthPx: number | null = null;\\n\\n  /**\\n   * Throttled version of {@link DeviceDetector.storeWindowWidth} function.\\n   *\\n   * @internal\\n   */\\n  // eslint-disable-next-line @typescript-eslint/unbound-method\\n  protected throttledStoreWindowWidth = this.storeWindowWidth;\\n\\n  /**\\n   * List of each of the entries of the breakpoints sorted from the smallest to the biggest\\n   * max width.\\n   *\\n   * @returns A list of the breakpoints sorted by its max width in ascending order.\\n   *\\n   * @internal\\n   */\\n  protected get sortedBreakpoints(): [Device, MaxWidth][] {\\n    return Object.entries(this.breakpoints).sort(([, aWidth], [, bWidth]) => aWidth - bWidth);\\n  }\\n\\n  /**\\n   * The device detected by this component, or the value provided in {@link DeviceDetector.force}\\n   * prop.\\n   *\\n   * @returns The detected device, or the value provided in {@link DeviceDetector.force}\\n   * prop.\\n   *\\n   * @internal\\n   */\\n  @XEmit(\'DeviceProvided\')\\n  public get detectedDevice(): string | null {\\n    if (this.force) {\\n      return this.force;\\n    } else if (this.windowWidthPx === null) {\\n      return null;\\n    } else {\\n      return (\\n        this.sortedBreakpoints.find(([, width]) => this.windowWidthPx! <= width)?.[0] ?? null\\n      );\\n    }\\n  }\\n\\n  /**\\n   * Stores the window width in {@link DeviceDetector.windowWidthPx}.\\n   *\\n   * @internal\\n   */\\n  protected storeWindowWidth(): void {\\n    this.windowWidthPx = window.innerWidth;\\n  }\\n\\n  /**\\n   * Updates {@link DeviceDetector.throttledStoreWindowWidth} with the throttle time at\\n   * {@link DeviceDetector.throttleMs}.\\n   *\\n   * @param throttleMs - The new duration in milliseconds for the throttle.\\n   *\\n   * @internal\\n   */\\n  @Watch(\'throttleMs\', { immediate: true })\\n  protected updateThrottledStoreWindowWidth(throttleMs: number): void {\\n    // eslint-disable-next-line @typescript-eslint/unbound-method\\n    this.throttledStoreWindowWidth = throttle(this.storeWindowWidth, throttleMs);\\n  }\\n\\n  /**\\n   * Initialises the store window width.\\n   *\\n   * @remarks This is done this way to ensure SSR compatibility.\\n   *\\n   * @internal\\n   */\\n  mounted(): void {\\n    this.storeWindowWidth();\\n  }\\n}\\n"],"names":[],"mappings":";;;;;;;;;AAkBA;;;;;;;AAaA;IAA4C,kCAAG;IAA/C;QAAA,qEA4GC;;;;;;QA7EW,mBAAa,GAAkB,IAAI,CAAC;;;;;;;QAQpC,+BAAyB,GAAG,KAAI,CAAC,gBAAgB,CAAC;;KAqE7D;IA3DC,sBAAc,6CAAiB;;;;;;;;;aAA/B;YACE,OAAO,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,UAAC,EAAU,EAAE,EAAU;oBAAnB,MAAM,QAAA;oBAAM,MAAM,QAAA;gBAAM,OAAA,MAAM,GAAG,MAAM;aAAA,CAAC,CAAC;SAC3F;;;OAAA;IAYD,sBAAW,0CAAc;;;;;;;;;;aAAzB;YADA,iBAWC;;YATC,IAAI,IAAI,CAAC,KAAK,EAAE;gBACd,OAAO,IAAI,CAAC,KAAK,CAAC;aACnB;iBAAM,IAAI,IAAI,CAAC,aAAa,KAAK,IAAI,EAAE;gBACtC,OAAO,IAAI,CAAC;aACb;iBAAM;gBACL,QACE,MAAA,MAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAC,EAAS;wBAAN,KAAK,QAAA;oBAAM,OAAA,KAAI,CAAC,aAAc,IAAI,KAAK;iBAAA,CAAC,0CAAG,CAAC,CAAC,mCAAI,IAAI,EACrF;aACH;SACF;;;OAAA;;;;;;IAOS,yCAAgB,GAA1B;QACE,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,UAAU,CAAC;KACxC;;;;;;;;;IAWS,wDAA+B,GAAzC,UAA0C,UAAkB;;QAE1D,IAAI,CAAC,yBAAyB,GAAG,QAAQ,CAAC,IAAI,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC;KAC9E;;;;;;;;IASD,gCAAO,GAAP;QACE,IAAI,CAAC,gBAAgB,EAAE,CAAC;KACzB;IAnGD;QADC,IAAI,CAAC,EAAE,OAAO,EAAE,cAAM,QAAC,EAAE,IAAC,EAAE,CAAC;uDACyB;IAQvD;QADC,IAAI,EAAE;iDACwB;IAQ/B;QADC,IAAI,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;sDACa;IAuCpC;QADC,KAAK,CAAC,gBAAgB,CAAC;wDAWvB;IAoBD;QADC,KAAK,CAAC,YAAY,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;yEAIxC;IAhGkB,cAAc;QANlC,SAAS,CAAC;YACT,MAAM,EAAE,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;YACxC,UAAU,EAAE;gBACV,YAAY,cAAA;aACb;SACF,CAAC;OACmB,cAAc,CA4GlC;IAAD,qBAAC;CAAA,CA5G2C,GAAG;;;;"}')}}]);