(window.webpackJsonp=window.webpackJsonp||[]).push([[641],{1419:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"related-tags.vue.js","sources":["../../../../../src/x-modules/related-tags/components/related-tags.vue"],"sourcesContent":["<template>\\n  <component\\n    :is=\\"animation\\"\\n    v-if=\\"relatedTags.length\\"\\n    tag=\\"ul\\"\\n    class=\\"x-list x-related-tags\\"\\n    data-test=\\"related-tags\\"\\n  >\\n    <li\\n      v-for=\\"relatedTag in relatedTags\\"\\n      :key=\\"relatedTag.tag\\"\\n      class=\\"x-related-tags__item\\"\\n      data-test=\\"related-tag-item\\"\\n    >\\n      \x3c!--\\n        @slot Custom content that replaces the RelatedTag component.\\n        @binding {RelatedTag} relatedTag - Related tag data.\\n        @binding {boolean} highlightCurated - True if the curated RTs should be displayed.\\n       --\x3e\\n      <slot name=\\"related-tag\\" v-bind=\\"{ relatedTag, highlightCurated }\\">\\n        <RelatedTag :highlightCurated=\\"highlightCurated\\" :relatedTag=\\"relatedTag\\">\\n          <template #default=\\"{ relatedTag, isSelected, shouldHighlightCurated }\\">\\n            \x3c!-- eslint-disable max-len --\x3e\\n            \x3c!--\\n              @slot Custom content that replaces the RelatedTag default content.\\n              @binding {RelatedTag} relatedTag - Related tag data.\\n              @binding {boolean} isSelected - Related tag status.\\n              @binding {boolean} shouldHighlightCurated - True if the curated RTs should be displayed.\\n            --\x3e\\n            <slot\\n              name=\\"related-tag-content\\"\\n              v-bind=\\"{ relatedTag, isSelected, shouldHighlightCurated }\\"\\n            />\\n          </template>\\n        </RelatedTag>\\n      </slot>\\n    </li>\\n  </component>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { RelatedTag as RelatedTagModel } from \'@empathyco/x-types\';\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import { Getter } from \'../../../components/decorators/store.decorators\';\\n  import { xComponentMixin } from \'../../../components/x-component.mixin\';\\n  import { relatedTagsXModule } from \'../x-module\';\\n  import RelatedTag from \'./related-tag.vue\';\\n\\n  /**\\n   * This component renders a set of [`RelatedTag`](./x-components.related-tag) components by\\n   * default to select from after a query is performed to fine-tune search.\\n   * For example, if you are searching for *lego*, different related tags could be *city*,\\n   * *friends*, or *harry potter*, refining the search with *lego city*, *lego friends*,\\n   * or *lego harry potter*.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: { RelatedTag },\\n    mixins: [xComponentMixin(relatedTagsXModule)]\\n  })\\n  export default class RelatedTags extends Vue {\\n    /**\\n     * Animation component that will be used to animate the suggestion.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: \'ul\' })\\n    protected animation!: Vue;\\n\\n    /**\\n     * Number of related tags to be rendered.\\n     *\\n     * @public\\n     */\\n    @Prop()\\n    protected maxItemsToRender?: number;\\n\\n    /**\\n     * Flag to indicate if the curated tags should be displayed different.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: false, type: Boolean })\\n    protected highlightCurated!: boolean;\\n\\n    @Getter(\'relatedTags\', \'relatedTags\')\\n    public storedRelatedTags!: RelatedTagModel[];\\n\\n    protected get relatedTags(): RelatedTagModel[] {\\n      return this.storedRelatedTags.slice(0, this.maxItemsToRender);\\n    }\\n  }\\n<\/script>\\n\\n<style lang=\\"scss\\" scoped>\\n  .x-related-tags {\\n    display: flex;\\n    list-style: none;\\n  }\\n</style>\\n\\n<docs lang=\\"mdx\\">\\n## See it in action\\n\\n\x3c!-- prettier-ignore-start --\x3e\\n:::warning Backend microservice required\\nTo use this component, the QuerySignals microservice must be implemented.\\n:::\\n\x3c!-- prettier-ignore-end --\x3e\\n\\nThis example shows how related tags can be rendered without any additional effects.\\n\\n_Search for a toy and press enter._\\n\\n```vue\\n<template>\\n  <div>\\n    <SearchInput></SearchInput>\\n    <RelatedTags></RelatedTags>\\n  </div>\\n</template>\\n\\n<script>\\n  import { SearchInput } from \'@empathyco/x-components/search-box\';\\n  import { RelatedTags } from \'@empathyco/x-components/related-tags\';\\n\\n  export default {\\n    name: \'RelatedTagsDemo\',\\n    components: {\\n      SearchInput,\\n      RelatedTags\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Play with props\\n\\nIn this example, the number of related tags rendered has been limited to 3. A fade and slide effect\\nhas been added so that the related tags appear with a delay, then slide upwards and fade.\\n\\n_Search for a toy and press Enter to see the related tags with the animation effect._\\n\\n```vue\\n<template>\\n  <div>\\n    <SearchInput></SearchInput>\\n    <RelatedTags animation=\\"StaggeredFadeAndSlide\\" :maxItemsToRender=\\"3\\"></RelatedTags>\\n  </div>\\n</template>\\n\\n<script>\\n  import Vue from \'vue\';\\n  import { SearchInput } from \'@empathyco/x-components/search-box\';\\n  import { RelatedTags } from \'@empathyco/x-components/related-tags\';\\n  import { StaggeredFadeAndSlide } from \'@empathyco/x-components\';\\n\\n  Vue.component(\'StaggeredFadeAndSlide\', StaggeredFadeAndSlide);\\n  export default {\\n    name: \'RelatedTagsDemo\',\\n    components: {\\n      SearchInput,\\n      RelatedTags\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Play with related-tag slot\\n\\nIn this example, the [`RelatedTag`](./x-components.related-tag.md) component is passed in the\\n`related-tag` slot (although any other component could potentially be passed).\\n\\n_Search for a toy and see how the related tags can be rendered._\\n\\n```vue\\n<template>\\n  <div>\\n    <SearchInput></SearchInput>\\n    <RelatedTags #related-tag=\\"{ relatedTag }\\">\\n      <RelatedTag :relatedTag=\\"relatedTag\\"></RelatedTag>\\n    </RelatedTags>\\n  </div>\\n</template>\\n\\n<script>\\n  import { SearchInput } from \'@empathyco/x-components/search-box\';\\n  import { RelatedTags, RelatedTag } from \'@empathyco/x-components/related-tags\';\\n\\n  export default {\\n    name: \'RelatedTagsDemo\',\\n    components: {\\n      SearchInput,\\n      RelatedTags,\\n      RelatedTag\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Play with related-tag-content slot\\n\\nTo continue the previous example, the [`RelatedTag`](./x-components.related-tag.md) component is\\npassed in the `related-tag-content` slot, but in addition, an HTML span tag for the text are also\\npassed.\\n\\n_Search for a toy and see how the related tags are rendered._\\n\\n```vue\\n<template>\\n  <div>\\n    <SearchInput></SearchInput>\\n    <RelatedTags #related-tag-content=\\"{ relatedTag }\\">\\n      <span>{{ relatedTag.tag }}</span>\\n    </RelatedTags>\\n  </div>\\n</template>\\n\\n<script>\\n  import { SearchInput } from \'@empathyco/x-components/search-box\';\\n  import { RelatedTags } from \'@empathyco/x-components/related-tags\';\\n\\n  export default {\\n    name: \'RelatedTagsDemo\',\\n    components: {\\n      SearchInput,\\n      RelatedTags\\n    }\\n  };\\n<\/script>\\n```\\n\\n## Extending the component\\n\\nComponents can be combined and communicate with each other. The `RelatedTags` component can\\ncommunicate with the [`SearchInput`](../search-box/x-components.search-input.md) as follows:\\n\\n_Search for a toy and see how the related tags can be rendered._\\n\\n```vue\\n<template>\\n  <div>\\n    <SearchInput></SearchInput>\\n    <RelatedTags></RelatedTags>\\n    <ResultsList></ResultsList>\\n  </div>\\n</template>\\n\\n<script>\\n  import { SearchInput } from \'@empathyco/x-components/search-box\';\\n  import { RelatedTags } from \'@empathyco/x-components/related-tags\';\\n  import { ResultsList } from \'@empathyco/x-components/search\';\\n\\n  export default {\\n    name: \'RelatedTagsDemo\',\\n    components: {\\n      SearchInput,\\n      RelatedTags,\\n      ResultsList\\n    }\\n  };\\n<\/script>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);