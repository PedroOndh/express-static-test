(window.webpackJsonp=window.webpackJsonp||[]).push([[675],{1450:function(e,t){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"partial-query-button.vue.js","sources":["../../../../../src/x-modules/search/components/partial-query-button.vue"],"sourcesContent":["<template>\\n  <button\\n    @click=\\"emitEvents\\"\\n    class=\\"x-button x-partial-query-button\\"\\n    data-test=\\"partial-query-button\\"\\n  >\\n    <slot v-bind=\\"{ query }\\">{{ query }}</slot>\\n  </button>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import { xComponentMixin } from \'../../../components/x-component.mixin\';\\n  import { WireMetadata } from \'../../../wiring/wiring.types\';\\n  import { searchXModule } from \'../x-module\';\\n\\n  /**\\n   * A button that when pressed emits the {@link XEventsTypes.UserAcceptedAQuery}\\n   * and {@link SearchXEvents.UserClickedPartialQuery} events, expressing the user\\n   * intention to set the partial query.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    mixins: [xComponentMixin(searchXModule)]\\n  })\\n  export default class PartialQueryButton extends Vue {\\n    /**\\n     * The query property.\\n     *\\n     * @public\\n     */\\n    @Prop({ required: true })\\n    public query!: string;\\n\\n    /**\\n     * Generates the {@link WireMetadata | event metadata} object omitting the moduleName.\\n     *\\n     * @returns The {@link WireMetadata} object omitting the moduleName.\\n     * @internal\\n     */\\n    protected createEventMetadata(): Omit<WireMetadata, \'moduleName\'> {\\n      return {\\n        target: this.$el as HTMLElement,\\n        feature: \'partial_result\'\\n      };\\n    }\\n\\n    /**\\n     * Emits events when the button is clicked.\\n     *\\n     * @public\\n     */\\n    protected emitEvents(): void {\\n      this.$x.emit(\'UserAcceptedAQuery\', this.query, this.createEventMetadata());\\n      this.$x.emit(\'UserClickedPartialQuery\', this.query, this.createEventMetadata());\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\n### Basic example\\n\\nA button that when pressed emits the {@link XEventsTypes.UserAcceptedAQuery} and {@link\\nSearchXEvents.UserClickedPartialQuery} events, expressing the user intention to set the partial\\nquery.\\n\\nThe component sets the current query as the new query and emits the `UserAcceptedAQuery` and\\n`UserClickedPartialQuery` events when is clicked.\\n\\n```vue\\n<template>\\n  <PartialQueryButton :query=\\"query\\" />\\n</template>\\n```\\n\\n### Customizing its contents\\n\\n```vue\\n<template>\\n  <PartialQueryButton>\\n    <template #default=\\"{ query }\\">\\n      <span class=\\"x-partial-query-button__text\\">\\n        Set the Partial query as the new query: {{ query }}!\\n      </span>\\n    </template>\\n  </PartialQueryButton>\\n</template>\\n\\n<script>\\n  import { PartialQueryButton } from \'@empathyco/x-components/search\';\\n\\n  export default {\\n    components: {\\n      PartialQueryButton\\n    }\\n  };\\n<\/script>\\n```\\n\\n## Events\\n\\nThis component emits 2 different events:\\n\\n- UserAcceptedAQuery: the event is emitted after the user clicks the partial query. The event\\n  payload is the partial query data.\\n- UserClickedPartialQuery: the event is emitted after the user clicks the partial query. The event\\n  payload is the partial query data.\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);