(window.webpackJsonp=window.webpackJsonp||[]).push([[724],{1494:function(n,e){throw new Error("Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {\"version\":3,\"file\":\"tagging.vue_rollup-plugin-vue=script.js\",\"sources\":[\"../../../../../src/x-modules/tagging/components/tagging.vue?rollup-plugin-vue=script.ts\"],\"sourcesContent\":[\"\\nimport Vue from 'vue';\\nimport { Component, Inject, Prop } from 'vue-property-decorator';\\nimport { XEmit } from '../../../components/decorators/bus.decorators';\\nimport { xComponentMixin } from '../../../components/x-component.mixin';\\nimport { SnippetConfig } from '../../../x-installer/api/api.types';\\nimport { taggingXModule } from '../x-module';\\n\\n/**\\n * This component enables and manages the sending of information to the\\n * {@link https://empathy.co/docs/tagging-api/ | Empathy Tagging API}. It allows to enable or\\n * disable the session id management through the `consent` prop.\\n *\\n * @public\\n */\\n@Component({\\n  mixins: [xComponentMixin(taggingXModule)]\\n})\\nexport default class Tagging extends Vue {\\n  /**\\n   * It injects {@link SnippetConfig} provided by an ancestor as snippetConfig.\\n   *\\n   * @internal\\n   */\\n  @Inject('snippetConfig')\\n  protected snippetConfig?: SnippetConfig;\\n\\n  /**\\n   * The session TTL in milliseconds.\\n   *\\n   * @internal\\n   */\\n  @Prop()\\n  @XEmit('SessionDurationProvided')\\n  public sessionTTLMs: number | undefined;\\n\\n  /**\\n   * The debounce time in milliseconds to track the query.\\n   *\\n   * @internal\\n   */\\n  @Prop()\\n  @XEmit('QueryTaggingDebounceProvided')\\n  public queryTaggingDebounceMs: number | undefined;\\n\\n  /**\\n   * The consent to be emitted.\\n   *\\n   * @public\\n   */\\n  @Prop()\\n  protected consent?: boolean;\\n\\n  /**\\n   * The active consent, selected from the `consent` prop and the `snippetConfig.consent`\\n   * property. False by default.\\n   *\\n   * @remarks If the consent is undefined in the prop and in the snippetConfig, it will return\\n   * false.\\n   *\\n   * @returns A boolean that represents if the consent is accepted or not.\\n   */\\n  @XEmit('ConsentProvided')\\n  public get activeConsent(): boolean {\\n    return this.consent ?? this.snippetConfig?.consent ?? false;\\n  }\\n\\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\\n  render(): void {}\\n}\\n\"],\"names\":[],\"mappings\":\";;;;;;;AAQA;;;;;;;AAUA;IAAqC,2BAAG;IAAxC;;KAmDC;IANC,sBAAW,kCAAa;;;;;;;;;;aAAxB;;YACE,OAAO,MAAA,MAAA,IAAI,CAAC,OAAO,mCAAI,MAAA,IAAI,CAAC,aAAa,0CAAE,OAAO,mCAAI,KAAK,CAAC;SAC7D;;;OAAA;;IAGD,wBAAM,GAAN,eAAiB;IA3CjB;QADC,MAAM,CAAC,eAAe,CAAC;kDACgB;IASxC;QAFC,IAAI,EAAE;QACN,KAAK,CAAC,yBAAyB,CAAC;iDACO;IASxC;QAFC,IAAI,EAAE;QACN,KAAK,CAAC,8BAA8B,CAAC;2DACY;IAQlD;QADC,IAAI,EAAE;4CACqB;IAY5B;QADC,KAAK,CAAC,iBAAiB,CAAC;gDAGxB;IA/CkB,OAAO;QAH3B,SAAS,CAAC;YACT,MAAM,EAAE,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;SAC1C,CAAC;OACmB,OAAO,CAmD3B;IAAD,cAAC;CAAA,CAnDoC,GAAG;;;;\"}")}}]);