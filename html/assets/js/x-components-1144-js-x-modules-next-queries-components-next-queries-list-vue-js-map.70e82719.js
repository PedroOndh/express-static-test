(window.webpackJsonp=window.webpackJsonp||[]).push([[582],{1365:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"next-queries-list.vue.js","sources":["../../../../../src/x-modules/next-queries/components/next-queries-list.vue"],"sourcesContent":["<template>\\n  <NoElement>\\n    \x3c!--\\n      @slot Next queries list layout.\\n        @binding {SearchItem[]} items - Next queries groups plus the injected list items to\\n        render.\\n        @binding {Vue | string} animation - Animation to animate the elements.\\n    --\x3e\\n    <slot v-bind=\\"{ items, animation }\\">\\n      <ItemsList :animation=\\"animation\\" :items=\\"items\\">\\n        <template v-for=\\"(_, slotName) in $scopedSlots\\" v-slot:[slotName]=\\"{ item }\\">\\n          <slot :name=\\"slotName\\" :item=\\"item\\" />\\n        </template>\\n      </ItemsList>\\n    </slot>\\n  </NoElement>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { NextQuery } from \'@empathyco/x-types\';\\n  import { mixins } from \'vue-class-component\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import { Getter } from \'../../../components/decorators/store.decorators\';\\n  import { NoElement } from \'../../../components/no-element\';\\n  import { ItemsListInjectionMixin } from \'../../../components/items-list-injection.mixin\';\\n  import ItemsList from \'../../../components/items-list.vue\';\\n  import { xComponentMixin } from \'../../../components/x-component.mixin\';\\n  import { groupItemsBy } from \'../../../utils/array\';\\n  import { ListItem } from \'../../../utils/types\';\\n  import ResultsList from \'../../search/components/results-list.vue\';\\n  import { NextQueriesGroup } from \'../types\';\\n  import { nextQueriesXModule } from \'../x-module\';\\n\\n  /**\\n   * Component that inserts groups of next queries in different positions of the injected search\\n   * items list, based on the provided configuration.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: {\\n      ResultsList,\\n      NoElement,\\n      ItemsList\\n    },\\n    mixins: [xComponentMixin(nextQueriesXModule)]\\n  })\\n  export default class NextQueriesList extends mixins(ItemsListInjectionMixin) {\\n    /**\\n     * Animation component that will be used to animate the next queries groups.\\n     *\\n     * @public\\n     */\\n    @Prop()\\n    protected animation?: Vue | string;\\n\\n    /**\\n     * The first index to insert a group of next queries at.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: 24 })\\n    public offset!: number;\\n\\n    /**\\n     * The items cycle size to keep inserting next queries groups at.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: 24 })\\n    public frequency!: number;\\n\\n    /**\\n     * The maximum amount of next queries to add in a single group.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: 4 })\\n    public maxNextQueriesPerGroup!: number;\\n\\n    /**\\n     * The maximum number of groups to insert into the injected list items list.\\n     *\\n     * @public\\n     */\\n    @Prop()\\n    public maxGroups!: number;\\n\\n    /**\\n     * The state next queries.\\n     *\\n     * @internal\\n     */\\n    @Getter(\'nextQueries\', \'nextQueries\')\\n    public nextQueries!: NextQuery[];\\n\\n    /**\\n     * The grouped next queries based on the given config.\\n     *\\n     * @returns A list of next queries groups.\\n     * @internal\\n     */\\n    protected get nextQueriesGroups(): NextQueriesGroup[] {\\n      return Object.values(\\n        groupItemsBy(this.nextQueries, (_, index) =>\\n          Math.floor(index / this.maxNextQueriesPerGroup)\\n        )\\n      )\\n        .slice(0, this.maxGroups)\\n        .map(nextQueries => ({\\n          modelName: \'NextQueriesGroup\' as const,\\n          id: nextQueries.map(nextQuery => nextQuery.query).join(\',\'),\\n          nextQueries\\n        }));\\n    }\\n\\n    /**\\n     * New list of {@link ListItem}s to render.\\n     *\\n     * @returns The new list of {@link ListItem}s with the next queries groups inserted.\\n     * @internal\\n     */\\n    public override get items(): ListItem[] {\\n      if (!this.injectedListItems) {\\n        return this.nextQueriesGroups;\\n      }\\n\\n      return this.nextQueriesGroups.reduce(\\n        (items, nextQueriesGroup, index) => {\\n          const targetIndex = this.offset + this.frequency * index;\\n          if (targetIndex <= items.length) {\\n            items.splice(targetIndex, 0, nextQueriesGroup);\\n          }\\n          return items;\\n        },\\n        [...this.injectedListItems]\\n      );\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Events\\n\\nThis component emits no events.\\n\\n## See it in action\\n\\n\x3c!-- prettier-ignore-start --\x3e\\n:::warning Backend microservice required\\nTo use this component, the <b>QuerySignals</b> microservice must be\\nimplemented.\\n:::\\n\x3c!-- prettier-ignore-end --\x3e\\n\\nUsually, this component is going to be used together with the `ResultsList` one. Next queries groups\\nwill be inserted between the results, guiding users to discover new searches directly from the\\nresults list.\\n\\n```vue\\n<template>\\n  <div>\\n    <SearchInput />\\n    <ResultsList>\\n      <NextQueriesList />\\n    </ResultsList>\\n  </div>\\n</template>\\n\\n<script>\\n  import { NextQueriesList } from \'@empathyco/x-components/next-queries\';\\n  import { ResultsList } from \'@empathyco/x-components/search\';\\n  import { SearchInput } from \'@empathyco/x-components/search-box\';\\n\\n  export default {\\n    name: \'NextQueriesListDemo\',\\n    components: {\\n      NextQueriesList,\\n      ResultsList,\\n      SearchInput\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Play with the index that next queries groups are inserted at\\n\\nThe component allows to customise where are the next queries groups inserted. In the following\\nexample, the first group of next queries will be inserted at the index `48` (`offset`), and then a\\nsecond group will be inserted at index `120` because of the `frequency` prop configured to `72`.\\nFinally, a third group will be inserted at index `192`. Because `maxGroups` is configured to `3`, no\\nmore groups will be inserted. Each one of this groups will have up to `6` next queries\\n(`maxNextQueriesPerGroup`).\\n\\n```vue\\n<template>\\n  <div>\\n    <SearchInput />\\n    <ResultsList>\\n      <NextQueriesList :offset=\\"48\\" :frequency=\\"72\\" :maxNextQueriesPerGroup=\\"6\\" :maxGroups=\\"3\\" />\\n    </ResultsList>\\n  </div>\\n</template>\\n\\n<script>\\n  import { NextQueriesList } from \'@empathyco/x-components/next-queries\';\\n  import { ResultsList } from \'@empathyco/x-components/search\';\\n  import { SearchInput } from \'@empathyco/x-components/search-box\';\\n\\n  export default {\\n    name: \'NextQueriesListDemo\',\\n    components: {\\n      NextQueriesList,\\n      ResultsList,\\n      SearchInput\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Customise the layout of the component\\n\\nThis component will render by default the `id` of each search item, both the injected, and for the\\ngroups of next queries generated, but the common case is to integrate it with another layout\\ncomponent, for example the `BaseGrid`. To do so, you can use the `default` slot\\n\\n```vue\\n<template>\\n  <div>\\n    <SearchInput />\\n    <ResultsList>\\n      <NextQueriesList\\n        :offset=\\"48\\"\\n        :frequency=\\"72\\"\\n        :maxNextQueriesPerGroup=\\"6\\"\\n        :maxGroups=\\"3\\"\\n        #default=\\"{ items }\\"\\n      >\\n        <BaseGrid :items=\\"items\\" :animation=\\"animation\\">\\n          <template #next-queries-group=\\"{ item }\\">\\n            <span>NextQueriesGroup: {{ item.queries.join(\', \') }}</span>\\n          </template>\\n          <template #result=\\"{ item }\\">\\n            <span>Result: {{ item.name }}</span>\\n          </template>\\n          <template #default=\\"{ item }\\">\\n            <span>Default: {{ item }}</span>\\n          </template>\\n        </BaseGrid>\\n      </NextQueriesList>\\n    </ResultsList>\\n  </div>\\n</template>\\n\\n<script>\\n  import { NextQueriesList } from \'@empathyco/x-components/next-queries\';\\n  import { ResultsList } from \'@empathyco/x-components/search\';\\n  import { SearchInput } from \'@empathyco/x-components/search-box\';\\n  import { BaseGrid } from \'@empathyco/x-components\';\\n\\n  export default {\\n    name: \'NextQueriesListDemo\',\\n    components: {\\n      NextQueriesList,\\n      ResultsList,\\n      BaseGrid,\\n      SearchInput\\n    }\\n  };\\n<\/script>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);