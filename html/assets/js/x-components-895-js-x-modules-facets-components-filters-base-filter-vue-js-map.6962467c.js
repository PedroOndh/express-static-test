(window.webpackJsonp=window.webpackJsonp||[]).push([[1014],{1282:function(e,t){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"base-filter.vue.js","sources":["../../../../../../src/x-modules/facets/components/filters/base-filter.vue"],"sourcesContent":["<template>\\n  <BaseEventButton\\n    class=\\"x-filter\\"\\n    data-test=\\"filter\\"\\n    role=\\"checkbox\\"\\n    :aria-checked=\\"filter.selected.toString()\\"\\n    :events=\\"events\\"\\n    :disabled=\\"isDisabled\\"\\n    :class=\\"cssClasses\\"\\n  >\\n    \x3c!--\\n        @slot The content to render inside the button\\n            @binding {Filter} filter - The filter data\\n      --\x3e\\n    <slot :filter=\\"filter\\">{{ filter.label }}</slot>\\n  </BaseEventButton>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { BooleanFilter } from \'@empathyco/x-types\';\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import { xComponentMixin } from \'../../../../components\';\\n  import BaseEventButton from \'../../../../components/base-event-button.vue\';\\n  import { VueCSSClasses } from \'../../../../utils/types\';\\n  import { XEventsTypes } from \'../../../../wiring/events.types\';\\n  import { facetsXModule } from \'../../x-module\';\\n\\n  /**\\n   * Renders a button with a default slot. It receives a\\n   * {@link @empathyco/x-types#BooleanFilter | BooleanFilter} that will be used in the\\n   * default slot and the {@link XEvent | XEvents} that will be emitted when clicking the button.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: { BaseEventButton },\\n    mixins: [xComponentMixin(facetsXModule)]\\n  })\\n  export default class BaseFilter extends Vue {\\n    /** The filter data to render. */\\n    @Prop({ required: true })\\n    public filter!: BooleanFilter;\\n\\n    /** Additional events with its payload to emit when the filter is clicked. */\\n    @Prop()\\n    public clickEvents?: Partial<XEventsTypes>;\\n\\n    /**\\n     * The events that will be emitted when the filter is clicked.\\n     *\\n     * @returns The events to be emitted when the filter is clicked.\\n     * @internal\\n     */\\n    protected get events(): Partial<XEventsTypes> {\\n      return {\\n        UserClickedAFilter: this.filter,\\n        ...this.clickEvents\\n      };\\n    }\\n\\n    /**\\n     * Returns `true` when the filter should be disabled.\\n     *\\n     * @returns `true` if the filter should be disabled.\\n     * @internal\\n     */\\n    protected get isDisabled(): boolean {\\n      return this.filter.totalResults === 0;\\n    }\\n\\n    /**\\n     * Dynamic CSS classes to apply to the component.\\n     *\\n     * @returns The dynamic CSS classes to apply to the component.\\n     * @internal\\n     */\\n    protected get cssClasses(): VueCSSClasses {\\n      return {\\n        \'x-filter--is-selected\': this.filter.selected,\\n        \'x-filter--is-disabled\': this.isDisabled\\n      };\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\nThis component receives a `filter` as prop and renders a button, which on clicked emits the\\n`UserClickedAFilter` event. If more events are needed to be emitted they can be passed using the\\n`clickEvents` prop. By default it renders the filter label as the button text.\\n\\n### Basic usage\\n\\n```vue\\n<BaseFilter :filter=\\"filter\\" />\\n```\\n\\n### Customizing its contents\\n\\n```vue\\n<BaseFilter :filter=\\"filter\\" v-slot=\\"{ filter }\\">\\n  <img src=\\"checkbox.png\\"/>\\n  <span>{{ filter.label }}</span>\\n</BaseFilter>\\n```\\n\\n### Extending the emitted events\\n\\n```vue\\n<template>\\n  <BaseFilter :filter=\\"filter\\" :clickEvents=\\"clickEvents\\" />\\n</template>\\n\\n<script>\\n  import { BaseFilter } from \'@empathyco/x-components\';\\n\\n  export default {\\n    components: {\\n      BaseFilter\\n    },\\n    props: [\'filter\'], // Imagine this filter is of type HierarchicalFilter\\n    computed: {\\n      clickEvents() {\\n        return { UserClickedAHierarchicalFilter: this.filter };\\n      }\\n    }\\n  };\\n<\/script>\\n```\\n\\n## Events\\n\\nA list of events that the component will emit:\\n\\n- `UserClickedAFilter`: the event is emitted after the user clicks the filter. The event payload is\\n  the filter data.\\n- Custom events defined in the `clickEvents` prop.\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);