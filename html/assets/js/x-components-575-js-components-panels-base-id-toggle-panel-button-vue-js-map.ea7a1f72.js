(window.webpackJsonp=window.webpackJsonp||[]).push([[896],{1176:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"base-id-toggle-panel-button.vue.js","sources":["../../../../src/components/panels/base-id-toggle-panel-button.vue"],"sourcesContent":["<template>\\n  <BaseEventButton\\n    v-on=\\"$listeners\\"\\n    :events=\\"events\\"\\n    class=\\"x-button x-base-id-toggle-panel-button\\"\\n    data-test=\\"base-id-toggle-button\\"\\n  >\\n    \x3c!-- @slot (Required) Button content with a text, an icon or both --\x3e\\n    <slot :isPanelOpen=\\"isPanelOpen\\" />\\n  </BaseEventButton>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import { XEventsTypes } from \'../../wiring/events.types\';\\n  import { WireMetadata } from \'../../wiring/wiring.types\';\\n  import BaseEventButton from \'../base-event-button.vue\';\\n  import { XOn } from \'../decorators/bus.decorators\';\\n\\n  /**\\n   * Component containing an event button that emits\\n   * {@link XEventsTypes.UserClickedPanelToggleButton} when clicked with\\n   * the panelId as payload.\\n   *\\n   * It has a default slot to customize its contents.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: { BaseEventButton }\\n  })\\n  export default class BaseIdTogglePanelButton extends Vue {\\n    /**\\n     * The panel state to pass through the slot.\\n     */\\n    protected isPanelOpen = false;\\n\\n    /** The panelId to use for the toggle event listeners. */\\n    @Prop({ required: true })\\n    protected panelId!: string;\\n\\n    /**\\n     * List of events to emit by the BaseEventButton.\\n     *\\n     * @returns An object with the event and payload.\\n     *\\n     * @internal\\n     */\\n    protected get events(): Partial<XEventsTypes> {\\n      return { UserClickedPanelToggleButton: this.panelId };\\n    }\\n\\n    /**\\n     * The subscription to the {@link XEventsTypes.TogglePanelStateChanged} event\\n     * to update the `isPanelOpen` property.\\n     *\\n     * @param newState - The new isOpen state of the panel.\\n     * @param id - The `panelId`.\\n     */\\n    @XOn(\'TogglePanelStateChanged\')\\n    updatePanelState(newState: boolean, { id }: WireMetadata): void {\\n      if (this.panelId === id) {\\n        this.isPanelOpen = newState;\\n      }\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\n### Basic example\\n\\nThe component rendering content passed to the default slot and opening the panel toggle with panelId\\n`my-toggle`.\\n\\n```vue\\n<template>\\n  <div>\\n    <BaseIdTogglePanelButton v-slot=\\"{ isPanelOpen }\\" panelId=\\"myToggle\\">\\n      <template #default=\\"{ isPanelOpen }\\" v-if=\\"isPanelOpen\\">\\n        <img src=\\"./close-button-icon.svg\\" />\\n        <span>Close aside</span>\\n      </template>\\n      <template v-else>\\n        <img src=\\"./open-button-icon.svg\\" />\\n        <span>Open aside</span>\\n      </template>\\n    </BaseIdTogglePanelButton>\\n    <BaseIdTogglePanel :startOpen=\\"true\\" :animation=\\"animation\\" panelId=\\"myToggle\\">\\n      <div class=\\"x-text\\">My toggle</div>\\n    </BaseIdTogglePanel>\\n  </div>\\n</template>\\n\\n<script>\\n  import {\\n    BaseIdTogglePanel,\\n    BaseIdTogglePanelButton,\\n    CollapseFromTop\\n  } from \'@empathyco/x-components\';\\n\\n  export default {\\n    components: {\\n      BaseIdTogglePanel,\\n      BaseIdTogglePanelButton,\\n      CollapseFromTop\\n    },\\n    data: function () {\\n      return {\\n        animation: CollapseFromTop\\n      };\\n    }\\n  };\\n<\/script>\\n```\\n\\n## Events\\n\\nA list of events that the component will emit:\\n\\n- `UserClickedPanelToggleButton`: the event is emitted after the user clicks the button. The event\\n  payload is the id of the panelId that is going to be toggled.\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);