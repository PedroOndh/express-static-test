(window.webpackJsonp=window.webpackJsonp||[]).push([[955],{1230:function(A,e){throw new Error("Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {\"version\":3,\"file\":\"currency-formatter.js\",\"sources\":[\"../../../src/utils/currency-formatter.ts\"],\"sourcesContent\":[\"/**\\n * Regex to detect the format.\\n */\\nconst FORMAT_REGEX = /(i([^id]+))?i+(([^id?]+)(d+)(\\\\?)?)?/;\\n\\n/**\\n * Configuration for format currency.\\n */\\ninterface CurrencyConfig {\\n  /** The character between a group of three integer 'i's and the following one. */\\n  integerSeparator: string;\\n  /** The character between a group of three integer 'i's and the following one. It also\\n   * supports more than one single character. */\\n  decimalSeparator: string;\\n  /** Length of decimals numbers. It counts the number of 'd's after the integer part. */\\n  decimalsNumber: number;\\n  /** Boolean value to hide or show the decimal part when it has 0. */\\n  hideIntegerDecimals: boolean;\\n}\\n\\n/**\\n * Parts of number: integer and decimal.\\n */\\ninterface NumberParts {\\n  /** Integer part of the number as string. */\\n  integer: string;\\n  /** Decimal part of the number as string. */\\n  decimal: string;\\n}\\n\\n/**\\n * Format a value with a given format.\\n *\\n * @param value - Numeric value to be formatted.\\n * @param format - Format or mask to be defined as string.\\n *\\n * @remarks\\n * Format:\\n * - Use 'i' to define integer numbers.\\n * - Use 'd' to define decimal numbers. You can define the length of the decimal part. If the\\n * doesn't include decimals, it is filled with zeros until reach the length defined with 'd's.\\n * - Integer separator must be defined between the 3rd and the 4th integer 'i' of a group.\\n * - Decimal separator must be defined between the last 'i' and the first 'd'. It can be more\\n * than one character.\\n * - Set whatever you need around the integers and decimals marks.\\n * - Default mask: 'i.iii,dd' which returns '1.345,67'.\\n * - If you want to hide the decimal part if it's zero (non significant), you can add the `?` symbol\\n * after the decimal characters (e.g. 'i.iii,dd?', for `1234` you would get `1.234` instead of\\n * `1.234,00`). It defines the value of `hideIntegerDecimals`:\\n * - If true (exists) and the value is an integer without decimals, the decimal non significant\\n * zeroes are hidden.\\n * - If false, the default behaviour will fill with zeros the remaining length until getting\\n * the one defined with the 'd's.\\n *\\n * @returns Formatted number.\\n *\\n * @public\\n */\\nexport function currencyFormatter(value: number, format = 'i.iii,dd'): string {\\n  const { integer, decimal } = numberParts(value);\\n  const { decimalSeparator, decimalsNumber, integerSeparator, hideIntegerDecimals } =\\n    currencyConfig(format);\\n\\n  const formattedInteger = formatInteger(integer, integerSeparator);\\n  const formattedDecimal = formatDecimal(decimal, {\\n    decimalsNumber,\\n    hideIntegerDecimals,\\n    decimalSeparator\\n  });\\n  return format.replace(FORMAT_REGEX, `${formattedInteger}${formattedDecimal}`);\\n}\\n\\n/**\\n * Returns the formatted integer part. This computed returns:\\n * - integer part with the integer separator added.\\n *\\n * @param integer - Integer value as a string.\\n * @param integerSeparator - Separator to apply in the integer side.\\n *\\n * The regexp adds the integer separator for each thousand group (each 3 numbers).\\n *\\n * @returns Formatted integer.\\n *\\n * @internal\\n */\\nfunction formatInteger(integer: string, integerSeparator: string): string {\\n  return integer.replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, integerSeparator);\\n}\\n\\n/**\\n * Returns the formatted decimal. This computed returns:\\n * - decimal part filled with zeros until complete remaining slots defined with the decimal\\n * length in the format.\\n * - decimal part truncated. The decimal numbers length, defined with the number of 'd's in the\\n * format prop. This must MATCH with the number of decimals provided from the adapter.\\n *\\n * @param decimal - Decimal part as a string.\\n * @param CurrencyConfig - From which the `decimalsNumber`, `decimalsSeparator` and\\n * `hideIntegerDecimals` are obtained.\\n *\\n * @returns Formatted integer.\\n *\\n * @internal\\n */\\nfunction formatDecimal(\\n  decimal: string,\\n  {\\n    decimalsNumber,\\n    decimalSeparator,\\n    hideIntegerDecimals\\n  }: Omit<CurrencyConfig, 'integerSeparator'>\\n): string {\\n  return hideIntegerDecimals && !+decimal\\n    ? ''\\n    : `${decimalSeparator}${decimal.padEnd(decimalsNumber, '0').substring(0, decimalsNumber)}`;\\n}\\n\\n/**\\n * Function that divide fhe format passed as value for get integerSeparator, decimalSeparator\\n * and decimalsNumber.\\n *\\n * @param format - Format or mask to apply to the value.\\n *\\n * @returns Object with properties of the currency config.\\n *\\n * @internal\\n */\\nfunction currencyConfig(format: string): CurrencyConfig {\\n  const [\\n    ,\\n    ,\\n    integerSeparator = '',\\n    ,\\n    decimalSeparator = '',\\n    decimals = '',\\n    hideIntegerDecimals = ''\\n  ] = FORMAT_REGEX.exec(format) ?? [];\\n  return {\\n    integerSeparator,\\n    decimalSeparator,\\n    decimalsNumber: decimals.length,\\n    hideIntegerDecimals: !!hideIntegerDecimals\\n  };\\n}\\n\\n/**\\n * Divide the number in two parts by separator '.', one of them is the integer number and other\\n * the decimals numbers.\\n *\\n * @param value - Numeric value to be formatted.\\n *\\n * @returns Parts of number.\\n *\\n * @internal\\n */\\nfunction numberParts(value: number): NumberParts {\\n  const [integer, decimal = ''] = `${value}`.split('.');\\n  return {\\n    integer,\\n    decimal\\n  };\\n}\\n\"],\"names\":[],\"mappings\":\"AAAA;;;AAGA,IAAM,YAAY,GAAG,qCAAqC,CAAC;AA2B3D;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA4BgB,iBAAiB,CAAC,KAAa,EAAE,MAAmB;IAAnB,uBAAA,EAAA,mBAAmB;IAC5D,IAAA,KAAuB,WAAW,CAAC,KAAK,CAAC,EAAvC,OAAO,aAAA,EAAE,OAAO,aAAuB,CAAC;IAC1C,IAAA,KACJ,cAAc,CAAC,MAAM,CAAC,EADhB,gBAAgB,sBAAA,EAAE,cAAc,oBAAA,EAAE,gBAAgB,sBAAA,EAAE,mBAAmB,yBACvD,CAAC;IAEzB,IAAM,gBAAgB,GAAG,aAAa,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;IAClE,IAAM,gBAAgB,GAAG,aAAa,CAAC,OAAO,EAAE;QAC9C,cAAc,gBAAA;QACd,mBAAmB,qBAAA;QACnB,gBAAgB,kBAAA;KACjB,CAAC,CAAC;IACH,OAAO,MAAM,CAAC,OAAO,CAAC,YAAY,EAAE,KAAG,gBAAgB,GAAG,gBAAkB,CAAC,CAAC;AAChF,CAAC;AAED;;;;;;;;;;;;;AAaA,SAAS,aAAa,CAAC,OAAe,EAAE,gBAAwB;IAC9D,OAAO,OAAO,CAAC,OAAO,CAAC,uBAAuB,EAAE,gBAAgB,CAAC,CAAC;AACpE,CAAC;AAED;;;;;;;;;;;;;;;AAeA,SAAS,aAAa,CACpB,OAAe,EACf,EAI2C;QAHzC,cAAc,oBAAA,EACd,gBAAgB,sBAAA,EAChB,mBAAmB,yBAAA;IAGrB,OAAO,mBAAmB,IAAI,CAAC,CAAC,OAAO;UACnC,EAAE;UACF,KAAG,gBAAgB,GAAG,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,cAAc,CAAG,CAAC;AAC/F,CAAC;AAED;;;;;;;;;;AAUA,SAAS,cAAc,CAAC,MAAc;;IAC9B,IAAA,KAQF,MAAA,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,mCAAI,EAAE,EALjC,UAAqB,EAArB,gBAAgB,mBAAG,EAAE,KAAA,EAErB,UAAqB,EAArB,gBAAgB,mBAAG,EAAE,KAAA,EACrB,UAAa,EAAb,QAAQ,mBAAG,EAAE,KAAA,EACb,UAAwB,EAAxB,mBAAmB,mBAAG,EAAE,KACS,CAAC;IACpC,OAAO;QACL,gBAAgB,kBAAA;QAChB,gBAAgB,kBAAA;QAChB,cAAc,EAAE,QAAQ,CAAC,MAAM;QAC/B,mBAAmB,EAAE,CAAC,CAAC,mBAAmB;KAC3C,CAAC;AACJ,CAAC;AAED;;;;;;;;;;AAUA,SAAS,WAAW,CAAC,KAAa;IAC1B,IAAA,KAA0B,CAAA,KAAG,KAAO,EAAC,KAAK,CAAC,GAAG,CAAC,EAA9C,OAAO,QAAA,EAAE,UAAY,EAAZ,OAAO,mBAAG,EAAE,KAAyB,CAAC;IACtD,OAAO;QACL,OAAO,SAAA;QACP,OAAO,SAAA;KACR,CAAC;AACJ;;;;\"}")}}]);