(window.webpackJsonp=window.webpackJsonp||[]).push([[926],{1203:function(n,e){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"snippet-callbacks.vue.js","sources":["../../../src/components/snippet-callbacks.vue"],"sourcesContent":["<template>\\n  <GlobalXBus v-on=\\"eventListeners\\" />\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import { Component, Inject } from \'vue-property-decorator\';\\n  import Vue from \'vue\';\\n  import { map } from \'../utils/object\';\\n  import { WireMetadata } from \'../wiring\';\\n  import { SnippetConfig, XEventListeners } from \'../x-installer/api/api.types\';\\n  import GlobalXBus from \'./global-x-bus.vue\';\\n\\n  /**\\n   * This component subscribes to any {@link XEvent} with a custom callbacks provided by the snippet\\n   * configuration.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: { GlobalXBus }\\n  })\\n  export default class SnippetCallbacks extends Vue {\\n    /**\\n     * Injects {@link SnippetConfig} provided by an ancestor as snippetConfig.\\n     *\\n     * @internal\\n     */\\n    @Inject(\'snippetConfig\')\\n    public snippetConfig!: SnippetConfig;\\n\\n    /**\\n     * It maps all the callbacks provided by the snippetConfig and adds an emit to each one.\\n     *\\n     * @returns The event listeners with the {@link XEventsTypes.SnippetCallbackExecuted} emit in\\n     * the callback.\\n     *\\n     * @internal\\n     *\\n     */\\n    protected get eventListeners(): XEventListeners {\\n      const { callbacks } = this.snippetConfig;\\n      return callbacks\\n        ? map(callbacks, (eventName, callback) => {\\n            return (payload: unknown, metadata: WireMetadata) => {\\n              const callbackReturn = callback(payload as never, metadata);\\n              this.$x.emit(\'SnippetCallbackExecuted\', {\\n                event: eventName,\\n                callbackReturn\\n              });\\n            };\\n          })\\n        : ({} as XEventListeners);\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Events\\n\\nThe `SnippetCallbacks` will emit the `SnippetCallbackExecuted` each time a callback provided by the\\nsnippetConfig is fired.\\n\\n## See it in action\\n\\nThis component does not render anything. Its only responsibility is to receive any callback that\\nwill be triggered once its listened event is emitted.\\n\\n```vue\\n<template>\\n  <SnippetCallbacks />\\n</template>\\n\\n<script>\\n  import { SnippetCallbacks } from \'@empathyco/x-components\';\\n  export default {\\n    name: \'SnippetCallbacksTest\',\\n    components: {\\n      SnippetCallbacks\\n    }\\n  };\\n<\/script>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);