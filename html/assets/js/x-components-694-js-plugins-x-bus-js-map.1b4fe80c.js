(window.webpackJsonp=window.webpackJsonp||[]).push([[939],{1215:function(e,A){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"x-bus.js","sources":["../../../src/plugins/x-bus.ts"],"sourcesContent":["import { Observable, ReplaySubject } from \'rxjs\';\\nimport { map } from \'rxjs/operators\';\\nimport { XEvent, XEventPayload } from \'../wiring/events.types\';\\nimport { WireMetadata, WirePayload } from \'../wiring/wiring.types\';\\nimport { Emitter, Emitters, XBus } from \'./x-bus.types\';\\n\\n/**\\n * Default {@link XBus} implementation.\\n *\\n * @public\\n */\\nexport class BaseXBus implements XBus {\\n  /**\\n   * Dictionary to store the created event emitters.\\n   *\\n   * @internal\\n   */\\n  protected emitters: Emitters = {};\\n\\n  /**\\n   * Emits an event. See {@link XBus.(emit:2)}.\\n   *\\n   * @param event - Event to be emitted.\\n   * @param payload - Event payload.\\n   * @param metadata - Information of who emits the event.\\n   */\\n  emit<Event extends XEvent>(\\n    event: Event,\\n    payload?: XEventPayload<Event>,\\n    metadata: WireMetadata = { moduleName: null }\\n  ): void {\\n    // Payload is defined here as an optional argument (which is wrong), but as this\\n    // implementation must be used with the type XBus there is no problem\\n    const value: WirePayload<XEventPayload<Event>> = {\\n      eventPayload: payload as any,\\n      metadata\\n    };\\n    const emitter = this.getOrCreateEmitter(event);\\n    emitter.next(value);\\n  }\\n\\n  /**\\n   * Retrieves an observable. See {@link XBus.(on:3)}.\\n   *\\n   * @public\\n   * @param event - Event to listener.\\n   * @param withMetadata - Option to listener with info about event emitter.\\n   * @returns The emitter for the event passed.\\n   */\\n  on<Event extends XEvent>(\\n    event: Event,\\n    withMetadata = false\\n  ): Observable<WirePayload<XEventPayload<Event>> | XEventPayload<Event>> {\\n    return withMetadata\\n      ? this.getOrCreateEmitter(event)\\n      : this.getOrCreateEmitter(event).pipe(map(value => value.eventPayload));\\n  }\\n\\n  /**\\n   * Retrieves an event emitter for a given event.\\n   *\\n   * @param event - The event to retrieve the emitter for.\\n   * @returns The emitter for the event passed.\\n   * @remarks The emitter is implemented with a\\n   * {@Link https://www.learnrxjs.io/learn-rxjs/subjects/replaysubject | ReplaySubject} to allow any\\n   * new subscriber receive the last emitted value.\\n   * @internal\\n   */\\n  protected getOrCreateEmitter<Event extends XEvent>(event: Event): Emitter<Event> {\\n    // TODO I Don\'t get why the types are not working here\\n    return (\\n      this.emitters[event] ??\\n      (this.emitters[event] = new ReplaySubject<WirePayload<XEventPayload<Event>>>(1) as any)\\n    );\\n  }\\n}\\n\\n/** @internal The bus instance. Will be replaced by injection */\\nexport const bus: XBus = new BaseXBus();\\n// TODO Remove this instantiation and replace with injection where used\\n"],"names":[],"mappings":";;;AAMA;;;;;;IAKA;;;;;;QAMY,aAAQ,GAAa,EAAE,CAAC;KA0DnC;;;;;;;;IAjDC,uBAAI,GAAJ,UACE,KAAY,EACZ,OAA8B,EAC9B,QAA6C;QAA7C,yBAAA,EAAA,aAA2B,UAAU,EAAE,IAAI,EAAE;;;QAI7C,IAAM,KAAK,GAAsC;YAC/C,YAAY,EAAE,OAAc;YAC5B,QAAQ,UAAA;SACT,CAAC;QACF,IAAM,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAC/C,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACrB;;;;;;;;;IAUD,qBAAE,GAAF,UACE,KAAY,EACZ,YAAoB;QAApB,6BAAA,EAAA,oBAAoB;QAEpB,OAAO,YAAY;cACf,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;cAC9B,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,YAAY,GAAA,CAAC,CAAC,CAAC;KAC3E;;;;;;;;;;;IAYS,qCAAkB,GAA5B,UAAmD,KAAY;;;QAE7D,QACE,MAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,oCACnB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,aAAa,CAAoC,CAAC,CAAQ,CAAC,EACvF;KACH;IACH,eAAC;AAAD,CAAC,IAAA;AAED;IACa,GAAG,GAAS,IAAI,QAAQ,GAAG;AACxC;;;;"}')}}]);