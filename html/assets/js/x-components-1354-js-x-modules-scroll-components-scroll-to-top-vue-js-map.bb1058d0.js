(window.webpackJsonp=window.webpackJsonp||[]).push([[659],{1435:function(n,e){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"scroll-to-top.vue.js","sources":["../../../../../src/x-modules/scroll/components/scroll-to-top.vue"],"sourcesContent":["<template>\\n  <component :is=\\"animation\\">\\n    <BaseEventButton\\n      v-if=\\"isVisible\\"\\n      v-on=\\"$listeners\\"\\n      class=\\"x-button x-scroll-to-top\\"\\n      data-test=\\"scroll-to-top\\"\\n      :events=\\"events\\"\\n    >\\n      \x3c!-- @slot (Required) Button content with a text, an icon or both --\x3e\\n      <slot />\\n    </BaseEventButton>\\n  </component>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import { State, xComponentMixin } from \'../../../components\';\\n  import BaseEventButton from \'../../../components/base-event-button.vue\';\\n  import { NoElement } from \'../../../components/no-element\';\\n  import { Dictionary } from \'../../../utils\';\\n  import { XEventsTypes } from \'../../../wiring\';\\n  import { ScrollComponentState } from \'../store\';\\n  import { scrollXModule } from \'../x-module\';\\n  import { MainScrollId } from \'./scroll.const\';\\n\\n  /**\\n   * The `ScrollToTop` component is a button that the user can click to make a container scroll\\n   * up to its initial position.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    mixins: [xComponentMixin(scrollXModule)],\\n    components: { BaseEventButton }\\n  })\\n  export default class ScrollToTop extends Vue {\\n    /**\\n     * Animation to use for showing/hiding the button.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: () => NoElement })\\n    public animation!: Vue | string;\\n\\n    /**\\n     * Threshold in pixels from the top to show the button.\\n     *\\n     * @public\\n     */\\n    @Prop()\\n    public thresholdPx?: number;\\n\\n    /**\\n     * Id of the target scroll component.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: MainScrollId })\\n    public scrollId!: string;\\n\\n    /**\\n     * State of all the scroll components in this module.\\n     *\\n     * @internal\\n     */\\n    // TODO: Directly retrieve the needed data in this computed property\\n    @State(\'scroll\', \'data\')\\n    public scrollPositionsMap!: Dictionary<ScrollComponentState>;\\n\\n    /**\\n     * The scroll data retrieved for this component.\\n     *\\n     * @returns The scroll data for this component if a valid {@link ScrollToTop.scrollId} has been\\n     * passed. Otherwise it returns `null`.\\n     * @internal\\n     */\\n    protected get scrollData(): ScrollComponentState {\\n      return this.scrollId && this.scrollPositionsMap[this.scrollId]\\n        ? this.scrollPositionsMap[this.scrollId]\\n        : {\\n            position: 0,\\n            direction: \'UP\',\\n            hasReachedStart: false,\\n            hasAlmostReachedEnd: false,\\n            hasReachedEnd: false\\n          };\\n    }\\n\\n    /**\\n     * Event that will be emitted when the scroll to top is clicked.\\n     *\\n     * @returns The event to be emitted when the scroll to top is clicked. The id as a payload.\\n     * @internal\\n     */\\n    protected get events(): Partial<XEventsTypes> {\\n      return { UserClickedScrollToTop: this.scrollId };\\n    }\\n\\n    /**\\n     * Checks if the thresholdPx prop has been provided and if it is a number.\\n     *\\n     * @returns If the thresholdPx is a number or not.\\n     * @internal\\n     */\\n    protected get useThresholdStrategy(): boolean {\\n      return typeof this.thresholdPx === \'number\';\\n    }\\n\\n    /**\\n     * Checks if the threshold has been reached in case the threshold strategy is in use.\\n     *\\n     * @returns If the scrollTop is bigger than the thresholdPx.\\n     * @internal\\n     */\\n    protected get isThresholdReached(): boolean {\\n      return this.useThresholdStrategy && this.scrollData.position > this.thresholdPx!;\\n    }\\n\\n    /**\\n     * Whether if the button is visible or not depending on the strategy being used.\\n     *\\n     * @returns If the button should be visible or not.\\n     * @internal\\n     */\\n    protected get isVisible(): boolean {\\n      return this.useThresholdStrategy ? this.isThresholdReached : this.hasAlmostReachedScrollEnd;\\n    }\\n\\n    /**\\n     * Returns if the scroll has almost reached its end or not.\\n     *\\n     * @returns True if the scroll has almost reached the end and the user is still scrolling down.\\n     * @internal\\n     */\\n    protected get hasAlmostReachedScrollEnd(): boolean {\\n      return this.scrollData.hasAlmostReachedEnd && this.scrollData.direction === \'DOWN\';\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\n### Basic example\\n\\nThe component renders whatever is passed to it in the default slot and scrolls to top the scroll\\nwith an id `scrollId`.\\n\\nIt also receives an optional threshold in pixels. When the threshold is reached from the top, the\\ncomponent will be shown once the user scrolls `UP`.\\n\\nIf this parameter is not provided the button will be visible when the user almost reaches the end of\\nthe scroll.\\n\\n```vue\\n<template>\\n  <div>\\n    <ScrollToTop scroll-id=\\"scrollId\\" :threshold-px=\\"1000\\">\\n      <span>Scroll to top</span>\\n    </ScrollToTop>\\n  </div>\\n</template>\\n\\n<script>\\n  import { ScrollToTop } from \'@empathyco/x-components/scroll\';\\n\\n  export default {\\n    name: \'ScrollToTopTest\',\\n    components: {\\n      ScrollToTop\\n    }\\n  };\\n<\/script>\\n```\\n\\n## Events\\n\\nA list of events that the component will emit:\\n\\n- `UserClickedScrollToTop`: the event is emitted after the user clicks the button. The event payload\\n  is the id of the scroll that it going to be scrolled.\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);