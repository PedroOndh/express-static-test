(window.webpackJsonp=window.webpackJsonp||[]).push([[974],{1247:function(e,A){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"wires.factory.js","sources":["../../../src/wiring/wires.factory.ts"],"sourcesContent":["import { Store } from \'vuex\';\\nimport { RootXStoreState } from \'../store/store.types\';\\nimport {\\n  AnyWire,\\n  PayloadFactoryData,\\n  Wire,\\n  WireParams,\\n  WirePayload,\\n  WireService,\\n  WireServiceWithoutPayload\\n} from \'./wiring.types\';\\n\\n/**\\n * Creates a wire that executes the function passed. This function will receive a\\n * {@link WireParams} object.\\n *\\n * @param fn - The function to execute whenever a new value is emitted to the observable.\\n * @returns The Wire function.\\n * @public\\n */\\nexport function createWireFromFunction<Payload>(\\n  fn: (parameters: WireParams<Payload>) => void\\n): Wire<Payload> {\\n  return (observable, store) =>\\n    observable.subscribe(({ metadata, eventPayload }) => {\\n      fn({ eventPayload, store, metadata });\\n    });\\n}\\n\\n/**\\n * Creates a wire that commits a mutation to the store. This wire receives a function. This function\\n * is used to get the actual payload value passed to mutation.\\n * This wire can be used in every event, as it does not have a payload type associated.\\n *\\n * @param mutation - The full mutation path to commit. I.e. `x/searchBox/setQuery`.\\n * @param payloadFactory - A function that receives a {@link PayloadFactoryData | object}\\n * with the Store state, getters, payload and metadata as parameter.\\n * @returns A {@link AnyWire} wire that commits the mutation with the payload returned by the\\n * payloadFactory.\\n * @public\\n */\\nexport function wireCommit<Payload>(\\n  mutation: string,\\n  payloadFactory: (params: PayloadFactoryData<Payload>) => any\\n): AnyWire;\\n/**\\n * Creates a wire that commits a mutation to the store. This wire can receive any value as payload.\\n * This wire can be used in every event, as it does not have a payload type associated.\\n *\\n * @param mutation - The full mutation path to commit. I.e. `x/searchBox/setQuery`.\\n * @param staticPayload - A static payload to pass to the mutation.\\n * @returns {@link AnyWire} A wire that commits the mutation with the staticPayload payload.\\n * @public\\n */\\nexport function wireCommit(mutation: string, staticPayload: any): AnyWire;\\n/**\\n * Creates a wire that commits a mutation to the store. This wire will commit to the store the\\n * payload that it receives in the observable.\\n *\\n * @param mutation - The full mutation path to commit. I.e. `x/searchBox/setQuery`.\\n * @typeParam Payload - The type of the payload that this wire will receive\\n * @returns {@link Wire} A wire that commits the mutation with the payload that it receives\\n * in the observable.\\n * @public\\n */\\nexport function wireCommit<Payload>(mutation: string): Wire<Payload>;\\n// eslint-disable-next-line jsdoc/require-jsdoc\\nexport function wireCommit<Payload>(mutation: string, payload?: Payload): Wire<Payload> {\\n  return (observable, store) =>\\n    observable.subscribe(createSubscriptionCallback(store, \'commit\', mutation, payload));\\n}\\n\\n/**\\n * Creates a wire that commits a mutation to the store, but without any payload. This wire can\\n * be used in every event, as it does not have a payload type associated.\\n *\\n * @param mutation - The full mutation path to commit. I.e. `x/searchBox/setQuery`.\\n * @returns {@link AnyWire} A wire that commits the mutation without any payload.\\n * @public\\n */\\nexport function wireCommitWithoutPayload(mutation: string): AnyWire {\\n  return (observable, store) => observable.subscribe(() => store.commit(mutation));\\n}\\n\\n/**\\n * Creates a wire that dispatch an action to the store. This wire receives a function. This function\\n * is used to get the actual payload value passed to action.\\n * This wire can be used in every event, as it does not have a payload type associated.\\n *\\n * @param action - The full action path to dispatch. I.e. `x/querySuggestions/fetchSuggestions`.\\n * @param payloadFactory - A function that receives a {@link PayloadFactoryData | object}\\n * with the Store state, getters, payload and metadata as parameter.\\n * @returns A {@link AnyWire} wire that dispatches the action with the payload returned by the\\n * payloadFactory.\\n * @public\\n */\\nexport function wireDispatch<Payload>(\\n  action: string,\\n  payloadFactory: (params: PayloadFactoryData<Payload>) => any\\n): AnyWire;\\n/**\\n * Creates a wire that dispatches an action to the store. This wire can be used in every event,\\n * as it does not have a payload type associated.\\n *\\n * @param action - The full action path to dispatch. I.e. `x/querySuggestions/fetchSuggestions`.\\n * @param staticPayload - A static payload to pass to the action which will be dispatched.\\n * @returns {@link AnyWire} A wire that dispatches the action with the staticPayload payload.\\n * @public\\n */\\nexport function wireDispatch(action: string, staticPayload: any): AnyWire;\\n/**\\n * Creates a wire that dispatches an action to the store. This wire will pass the payload\\n * received in the observable to the action.\\n *\\n * @param action - The full action path to dispatch. I.e. `x/querySuggestions/fetchSuggestions`.\\n * @typeParam Payload - The type of the payload that this wire will receive\\n * @returns {@link Wire} A wire that dispatches the action with the payload that it receives\\n * in the observable.\\n * @public\\n */\\nexport function wireDispatch<Payload>(action: string): Wire<Payload>;\\n// eslint-disable-next-line jsdoc/require-jsdoc\\nexport function wireDispatch<Payload>(action: string, payload?: Payload): Wire<Payload> {\\n  return (observable, store) =>\\n    observable.subscribe(createSubscriptionCallback(store, \'dispatch\', action, payload));\\n}\\n\\n/**\\n * Creates a wire that dispatches an action to the store, but without any payload. This wire can\\n * be used in every event, as it does not have a payload type associated.\\n *\\n * @param action - The full action path to dispatch. I.e. `x/querySuggestions/fetchSuggestions`.\\n * @returns {@link AnyWire} A wire that dispatches the action without any payload.\\n * @public\\n */\\nexport function wireDispatchWithoutPayload(action: string): AnyWire {\\n  return (observable, store) => observable.subscribe(() => store.dispatch(action));\\n}\\n\\n/**\\n * Creates a wires factory that can create wires that will invoke the service methods.\\n *\\n * @param service - The service to invoke its methods.\\n * @returns A factory to create wires that invoke the service methods.\\n * @public\\n */\\nexport function wireService<SomeService>(service: SomeService): WireService<SomeService> {\\n  return (method, payload?) => {\\n    return observable =>\\n      observable.subscribe(\\n        payload !== undefined\\n          ? () => service[method](payload)\\n          : observablePayload => service[method](observablePayload.eventPayload)\\n      );\\n  };\\n}\\n\\n/**\\n * Creates a wires factory that can create wires that will invoke the service methods but\\n * without payload.\\n *\\n * @param service - The service to invoke its methods.\\n * @returns A factory to create wires that invoke the service methods without payload.\\n * @public\\n */\\nexport function wireServiceWithoutPayload<SomeService>(\\n  service: SomeService\\n): WireServiceWithoutPayload<SomeService> {\\n  return method => {\\n    return observable => observable.subscribe(() => service[method]());\\n  };\\n}\\n\\n/**\\n * Creates the callback function for the {@link wireCommit} and {@link wireDispatch}\\n * subscriptions. It can be based on the payload as function which retrieves the observable\\n * payload from the store, a static payload or the event value from the observable.\\n *\\n * @param store - The {@link RootXStoreState} store.\\n * @param commitOrDispatch - The executor over store. It can be `commit` or `dispatch`.\\n * @param mutationOrAction - The mutation or action to commit or dispatch respectively.\\n * @param payload - The payload for the store executor. It can be a function which retrieves the\\n * payload from the store, a static payload or the event value from the observable.\\n * @typeParam Payload - The type of the payload to get the observable event value type.\\n * @returns A function to commit or dispatch a payload value over store.\\n * @internal\\n */\\nfunction createSubscriptionCallback<Payload>(\\n  store: Store<RootXStoreState>,\\n  commitOrDispatch: \'commit\' | \'dispatch\',\\n  mutationOrAction: string,\\n  payload?: Payload\\n): (observableValue: WirePayload<Payload>) => void {\\n  const storeExecutor = store[commitOrDispatch];\\n  return typeof payload === \'function\'\\n    ? wirePayload => {\\n        return storeExecutor(\\n          mutationOrAction,\\n          payload({\\n            state: store.state,\\n            getters: store.getters,\\n            ...wirePayload\\n          })\\n        );\\n      }\\n    : payload !== undefined\\n    ? () => {\\n        storeExecutor(mutationOrAction, payload);\\n      }\\n    : observableValue => {\\n        storeExecutor(mutationOrAction, observableValue.eventPayload);\\n      };\\n}\\n"],"names":[],"mappings":";;AAYA;;;;;;;;SAQgB,sBAAsB,CACpC,EAA6C;IAE7C,OAAO,UAAC,UAAU,EAAE,KAAK;QACvB,OAAA,UAAU,CAAC,SAAS,CAAC,UAAC,EAA0B;gBAAxB,QAAQ,cAAA,EAAE,YAAY,kBAAA;YAC5C,EAAE,CAAC,EAAE,YAAY,cAAA,EAAE,KAAK,OAAA,EAAE,QAAQ,UAAA,EAAE,CAAC,CAAC;SACvC,CAAC;KAAA,CAAC;AACP,CAAC;AAuCD;SACgB,UAAU,CAAU,QAAgB,EAAE,OAAiB;IACrE,OAAO,UAAC,UAAU,EAAE,KAAK;QACvB,OAAA,UAAU,CAAC,SAAS,CAAC,0BAA0B,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;KAAA,CAAC;AACzF,CAAC;AAED;;;;;;;;SAQgB,wBAAwB,CAAC,QAAgB;IACvD,OAAO,UAAC,UAAU,EAAE,KAAK,IAAK,OAAA,UAAU,CAAC,SAAS,CAAC,cAAM,OAAA,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAA,CAAC,GAAA,CAAC;AACnF,CAAC;AAuCD;SACgB,YAAY,CAAU,MAAc,EAAE,OAAiB;IACrE,OAAO,UAAC,UAAU,EAAE,KAAK;QACvB,OAAA,UAAU,CAAC,SAAS,CAAC,0BAA0B,CAAC,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;KAAA,CAAC;AACzF,CAAC;AAED;;;;;;;;SAQgB,0BAA0B,CAAC,MAAc;IACvD,OAAO,UAAC,UAAU,EAAE,KAAK,IAAK,OAAA,UAAU,CAAC,SAAS,CAAC,cAAM,OAAA,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAA,CAAC,GAAA,CAAC;AACnF,CAAC;AAED;;;;;;;SAOgB,WAAW,CAAc,OAAoB;IAC3D,OAAO,UAAC,MAAM,EAAE,OAAQ;QACtB,OAAO,UAAA,UAAU;YACf,OAAA,UAAU,CAAC,SAAS,CAClB,OAAO,KAAK,SAAS;kBACjB,cAAM,OAAA,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAA;kBAC9B,UAAA,iBAAiB,IAAI,OAAA,OAAO,CAAC,MAAM,CAAC,CAAC,iBAAiB,CAAC,YAAY,CAAC,GAAA,CACzE;SAAA,CAAC;KACL,CAAC;AACJ,CAAC;AAED;;;;;;;;SAQgB,yBAAyB,CACvC,OAAoB;IAEpB,OAAO,UAAA,MAAM;QACX,OAAO,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,SAAS,CAAC,cAAM,OAAA,OAAO,CAAC,MAAM,CAAC,EAAE,GAAA,CAAC,GAAA,CAAC;KACpE,CAAC;AACJ,CAAC;AAED;;;;;;;;;;;;;;AAcA,SAAS,0BAA0B,CACjC,KAA6B,EAC7B,gBAAuC,EACvC,gBAAwB,EACxB,OAAiB;IAEjB,IAAM,aAAa,GAAG,KAAK,CAAC,gBAAgB,CAAC,CAAC;IAC9C,OAAO,OAAO,OAAO,KAAK,UAAU;UAChC,UAAA,WAAW;YACT,OAAO,aAAa,CAClB,gBAAgB,EAChB,OAAO,YACL,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,OAAO,EAAE,KAAK,CAAC,OAAO,IACnB,WAAW,EACd,CACH,CAAC;SACH;UACD,OAAO,KAAK,SAAS;cACrB;gBACE,aAAa,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;aAC1C;cACD,UAAA,eAAe;gBACb,aAAa,CAAC,gBAAgB,EAAE,eAAe,CAAC,YAAY,CAAC,CAAC;aAC/D,CAAC;AACR;;;;"}')}}]);