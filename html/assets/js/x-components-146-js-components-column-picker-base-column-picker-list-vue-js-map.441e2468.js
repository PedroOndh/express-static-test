(window.webpackJsonp=window.webpackJsonp||[]).push([[698],{1033:function(n,e){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"base-column-picker-list.vue.js","sources":["../../../../src/components/column-picker/base-column-picker-list.vue"],"sourcesContent":["<template>\\n  <ul class=\\"x-option-list x-column-picker-list\\" data-test=\\"column-picker-list\\">\\n    <li\\n      v-for=\\"{ column, cssClasses, events, isSelected } in columnsWithCssClasses\\"\\n      :key=\\"column\\"\\n      :class=\\"cssClasses\\"\\n      class=\\"x-option-list__item x-column-picker-list__item\\"\\n      data-test=\\"column-picker-item\\"\\n    >\\n      <BaseEventButton\\n        class=\\"x-button column-picker-item__button\\"\\n        data-test=\\"column-picker-button\\"\\n        :aria-selected=\\"isSelected.toString()\\"\\n        :events=\\"events\\"\\n      >\\n        \x3c!--\\n          @slot Customized Column Picker Button content. Specifying a slot with the column value\\n          will result in the column using that slot composition to render.\\n            @binding {number} column - Columns Number to pick.\\n            @binding {boolean} isSelected - True if the columns number are the chosen value.\\n        --\x3e\\n        <slot v-bind=\\"{ column, isSelected }\\">\\n          {{ column }}\\n        </slot>\\n      </BaseEventButton>\\n    </li>\\n  </ul>\\n</template>\\n\\n<style lang=\\"scss\\" scoped>\\n  .x-column-picker-list {\\n    display: flex;\\n    list-style-type: none;\\n  }\\n</style>\\n\\n<script lang=\\"ts\\">\\n  import { mixins } from \'vue-class-component\';\\n  import { Component } from \'vue-property-decorator\';\\n  import { VueCSSClasses } from \'../../utils/types\';\\n  import { XEventsTypes } from \'../../wiring\';\\n  import BaseEventButton from \'../base-event-button.vue\';\\n  import ColumnPickerMixin from \'./column-picker.mixin\';\\n\\n  interface ColumnPickerItem {\\n    column: number;\\n    cssClasses: VueCSSClasses;\\n    events: Partial<XEventsTypes>;\\n    isSelected: boolean;\\n  }\\n\\n  /**\\n   * Column picker list component renders a list of buttons to choose the columns number.\\n   *\\n   * @remarks It extends {@link ColumnPickerMixin}.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: { BaseEventButton }\\n  })\\n  export default class BaseColumnPickerList extends mixins(ColumnPickerMixin) {\\n    /**\\n     * Maps the column to an object containing: the `column` and `CSS classes`.\\n     *\\n     * @returns An array of objects containing the column number and CSS classes.\\n     *\\n     * @internal\\n     */\\n    protected get columnsWithCssClasses(): ColumnPickerItem[] {\\n      return this.columns.map(column => ({\\n        column,\\n        cssClasses: [\\n          `x-column-picker-list__item--${column}-cols`,\\n          {\\n            \'x-column-picker-list__item--is-selected\': this.selectedColumns === column,\\n            \'x-option-list__item--is-selected\': this.selectedColumns === column\\n          }\\n        ],\\n        isSelected: this.selectedColumns === column,\\n        events: {\\n          UserClickedColumnPicker: column,\\n          ColumnsNumberProvided: column\\n        }\\n      }));\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\nThis component renders a list of elements in different slots depending on the columns prop. Each\\nelement will emit the needed events to sync other instances of columns pickers, or grids with the\\nnumber of columns that it is being selected when it is clicked.\\n\\n### Default usage\\n\\nIt is required to send the columns prop.\\n\\n```vue\\n<template>\\n  <BaseColumnPickerList :columns=\\"columns\\" />\\n</template>\\n<script>\\n  import { BaseColumnPickerList } from \'@empathyco/xcomponents\';\\n\\n  export default {\\n    components: {\\n      BaseColumnPickerList\\n    },\\n    data() {\\n      return { columns: [2, 4, 6] };\\n    }\\n  };\\n<\/script>\\n```\\n\\n#### Using v-model\\n\\nIt is possible to do two way binding in order to synchronize the value with the parents. It will be\\nupdated if it changed the value or if the parent changes it.\\n\\n```vue\\n<template>\\n  <BaseColumnPickerList :columns=\\"columns\\" v-model=\\"selectedColumns\\" />\\n</template>\\n<script>\\n  import { BaseColumnPickerList } from \'@empathyco/xcomponents\';\\n\\n  export default {\\n    components: {\\n      BaseColumnPickerList\\n    },\\n    data() {\\n      return { columns: [2, 4, 6], selectedColumns: 4 };\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Customized usage\\n\\n#### Overriding the slots\\n\\nIt is possible to override the column picker button content.\\n\\n```vue\\n<template>\\n  <BaseColumnPickerList :columns=\\"columns\\" #default=\\"{ column, isSelected }\\">\\n    <span>{{ column }} {{ isSelected ? \'ðŸŸ¢\' : \'\' }}</span>\\n  </BaseColumnPickerList>\\n</template>\\n<script>\\n  import { BaseColumnPickerList } from \'@empathyco/xcomponents\';\\n\\n  export default {\\n    components: {\\n      BaseColumnPickerList\\n    },\\n    data() {\\n      return { columns: [2, 4, 6] };\\n    }\\n  };\\n<\/script>\\n```\\n\\n## Events\\n\\nA list of events that the component will emit:\\n\\n- `UserClickedColumnPicker`: the event is emitted after the user clicks an item. The event payload\\n  is the number of columns that the clicked item represents.\\n- `ColumnsNumberProvided`: the event is emitted on component mount. The event payload is the current\\n  `selectedColumns` value.\\n</docs>\\n"],"names":["const"],"mappings":";;;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);