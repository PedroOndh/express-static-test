(window.webpackJsonp=window.webpackJsonp||[]).push([[930],{1207:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"base-suggestions.vue.js","sources":["../../../../src/components/suggestions/base-suggestions.vue"],"sourcesContent":["<template>\\n  <component :is=\\"animation\\" v-if=\\"suggestions.length\\" tag=\\"ul\\" class=\\"x-list x-suggestions\\">\\n    <li\\n      v-for=\\"(suggestion, index) in suggestionsToRender\\"\\n      :key=\\"suggestionsKeys[index]\\"\\n      class=\\"x-suggestions__item\\"\\n      data-test=\\"suggestion-item\\"\\n    >\\n      \x3c!--\\n        @slot (Required) List item content\\n            @binding {Suggestion} suggestion - Suggestion data\\n            @binding {number} index - Suggestion index\\n       --\x3e\\n      <slot v-bind=\\"{ suggestion, index }\\" />\\n    </li>\\n  </component>\\n</template>\\n\\n<style lang=\\"scss\\" scoped>\\n  .x-suggestions {\\n    list-style-type: none;\\n  }\\n</style>\\n\\n<script lang=\\"ts\\">\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import { Suggestion, Facet } from \'@empathyco/x-types\';\\n  import Vue from \'vue\';\\n  import { isArrayEmpty } from \'../../utils/array\';\\n\\n  /**\\n   * Paints a list of suggestions passed in by prop. Requires a component for a single suggestion\\n   * in the default slot for working.\\n   *\\n   * @public\\n   */\\n  @Component\\n  export default class BaseSuggestions extends Vue {\\n    /**\\n     * The list of suggestions to render.\\n     *\\n     * @public\\n     */\\n    @Prop({ required: true })\\n    protected suggestions!: Suggestion[];\\n\\n    /**\\n     * Animation component that will be used to animate the suggestion.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: \'ul\' })\\n    protected animation!: Vue | string;\\n\\n    /**\\n     * Number of suggestions to be rendered.\\n     *\\n     * @public\\n     */\\n    @Prop()\\n    protected maxItemsToRender?: number;\\n\\n    /**\\n     * An array with the unique keys for each suggestion. Required by the `v-for` loop.\\n     *\\n     * @returns An array with the unique keys of the suggestions.\\n     * @internal\\n     */\\n    protected get suggestionsKeys(): string[] {\\n      return this.suggestions.map(suggestion =>\\n        isArrayEmpty(suggestion.facets)\\n          ? suggestion.query\\n          : `${suggestion.query}-in-${this.getFacetsKey(suggestion.facets)}`\\n      );\\n    }\\n\\n    /**\\n     * Generates a string from the given facets.\\n     *\\n     * @param facets - The list of facets to reduce to a string.\\n     * @returns - A string representing the list of facets.\\n     * @internal\\n     */\\n    protected getFacetsKey(facets: Facet[]): string {\\n      // Component methods are bound by Vue:\\n      // eslint-disable-next-line @typescript-eslint/unbound-method\\n      return facets.map(this.getFacetKey).join(\'&\');\\n    }\\n\\n    /**\\n     * Generates a string from the given facet.\\n     *\\n     * @param facet - The facet to reduce to a string.\\n     * @returns - A string representing the facet.\\n     * @internal\\n     */\\n    protected getFacetKey(facet: Facet): string {\\n      return facet.filters.map(filter => filter.id).join(\'&\');\\n    }\\n\\n    /**\\n     * Slices the suggestions from the state.\\n     *\\n     * @returns - The list of suggestions slice by the number of items to render.\\n     *\\n     * @internal\\n     */\\n    protected get suggestionsToRender(): Suggestion[] {\\n      return this.suggestions.slice(0, this.maxItemsToRender);\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\nFor this component to work, you will need to set a list of suggestions as prop, and also to\\nimplement the component for single suggestion, which handles the click event. In the following\\nexample, the suggestions are retrieved from a property called `suggestions`, and the implementation\\nof the suggestion component is a simple `button`, that calls the `emitSuggestionSelected` method\\nwhen clicked.\\n\\n```vue\\n<BaseSuggestions :suggestions=\\"suggestions\\">\\n  <template #default=\\"{ suggestion }\\">\\n    <button @click=\\"emitSuggestionSelected($event, suggestion)\\">\\n      {{ suggestion.query }}\\n    </button>\\n  </template>\\n</BaseSuggestions>\\n```\\n\\nFollowing the previous example, the component options object could be something like this:\\n\\n```js\\nexport default {\\n  computed: {\\n    ...mapGetters([\'x\', \'querySuggestions\'], { suggestions: \'suggestions\' })\\n  },\\n  methods: {\\n    emitSuggestionSelected(event, suggestion) {\\n      this.$x.emit(\'UserAcceptedAQuery\', suggestion.query, { target: event.target });\\n      this.$x.emit(\'UserSelectedAQuerySuggestion\', suggestion, { target: event.target });\\n    }\\n  }\\n};\\n```\\n\\n### Play with props\\n\\nIn this example, the suggestions has been limited to render a maximum of 3 items.\\n\\n_Type “puzzle” or another toy in the input field to try it out!_\\n\\n```vue\\n<template>\\n  <BaseSuggestions :suggestions=\\"suggestions\\" :maxItemToRender=\\"3\\" />\\n</template>\\n\\n<script>\\n  import { BaseSuggestions } from \'@empathyco/x-components\';\\n\\n  export default {\\n    name: \'BaseSuggestionsDemo\',\\n    components: {\\n      BaseSuggestions\\n    },\\n    data() {\\n      return {\\n        suggestions: [\\n          {\\n            facets: [],\\n            key: \'chips\',\\n            query: \'Chips\',\\n            totalResults: 10,\\n            results: [],\\n            modelName: \'PopularSearch\'\\n          }\\n        ]\\n      };\\n    }\\n  };\\n<\/script>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);