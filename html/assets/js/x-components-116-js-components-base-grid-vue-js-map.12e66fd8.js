(window.webpackJsonp=window.webpackJsonp||[]).push([[588],{1023:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"base-grid.vue.js","sources":["../../../src/components/base-grid.vue"],"sourcesContent":["<template>\\n  <component\\n    :is=\\"animation\\"\\n    :style=\\"style\\"\\n    class=\\"x-grid x-base-grid\\"\\n    :class=\\"cssClasses\\"\\n    tag=\\"ul\\"\\n    data-test=\\"grid\\"\\n  >\\n    <li\\n      v-for=\\"{ slotName, item, cssClass } in gridItems\\"\\n      :key=\\"item.id\\"\\n      :class=\\"cssClass\\"\\n      class=\\"x-grid__item x-base-grid__item\\"\\n    >\\n      \x3c!--\\n        @slot Customized item rendering. Specifying a slot with the item\'s modelName will result in\\n        the item using that slot composition to render.\\n            @binding {item} item - Item to render\\n      --\x3e\\n      <slot v-if=\\"$scopedSlots[slotName]\\" :name=\\"slotName\\" :item=\\"item\\" />\\n      \x3c!--\\n        @slot (required) Default item rendering. This slot will be used by default for rendering\\n        the item without an specific slot implementation.\\n            @binding {item} item - Item to render\\n      --\x3e\\n      <slot v-else :item=\\"item\\">{{ item.name || item.modelName || item.id || item }}</slot>\\n    </li>\\n  </component>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import Vue from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import { toKebabCase } from \'../utils/string\';\\n  import { ListItem, VueCSSClasses } from \'../utils/types\';\\n  import { XInject } from \'./decorators/injection.decorators\';\\n  import { LIST_ITEMS_KEY } from \'./decorators/injection.consts\';\\n\\n  /**\\n   * The type returned by the gridItems function. Basically it\'s a list of items with its CSS\\n   * classes and a slotName.\\n   *\\n   * @internal\\n   */\\n  interface GridItem {\\n    slotName: string;\\n    item: ListItem;\\n    cssClass: VueCSSClasses;\\n  }\\n\\n  /**\\n   * Grid component that is able to render different items based on their modelName value. In order\\n   * to achieve this, it exposes a scopedSlot for each different modelName. In case the items used\\n   * do not have modelName property, the default slot is used instead. It has a required property:\\n   * the `items` to render; and an optional one: the number `columns` the grid is divided in. If the\\n   * number of columns is not specified, the grid automatically fills the rows with as many columns\\n   * as it can fit.\\n   *\\n   * @public\\n   */\\n  @Component({})\\n  export default class BaseGrid extends Vue {\\n    /**\\n     * Animation component that will be used to animate the base grid.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: \'ul\' })\\n    protected animation!: Vue | string;\\n\\n    /**\\n     * Number of columns the grid is divided into. By default, its value is 0, setting the grid\\n     * columns mode to auto-fill.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: 0 })\\n    protected columns!: number;\\n\\n    /**\\n     * The list of items to be rendered.\\n     *\\n     * @remarks The items must have an id property.\\n     *\\n     * @public\\n     */\\n    @Prop()\\n    protected items!: ListItem[];\\n\\n    /**\\n     * It injects {@link ListItem} provided by an ancestor.\\n     *\\n     * @internal\\n     */\\n    @XInject(LIST_ITEMS_KEY)\\n    public injectedListItems!: ListItem[];\\n\\n    /**\\n     * It returns the items passed as props or the injected ones.\\n     *\\n     * @returns List of grid items.\\n     *\\n     * @public\\n     */\\n    protected get computedItems(): ListItem[] {\\n      return (\\n        this.items ??\\n        this.injectedListItems ??\\n        //TODO: add here logger\\n        //eslint-disable-next-line no-console\\n        console.warn(\'It is necessary to pass a prop or inject the list of filters\')\\n      );\\n    }\\n\\n    /**\\n     * CSS class based on the column property value so items inside the grid can fill different\\n     * amount of columns or rows based on how many columns the grid is divided into.\\n     *\\n     * @returns CSS class with the column property value.\\n     *\\n     * @internal\\n     */\\n    protected get cssClasses(): VueCSSClasses {\\n      return this.columns ? `x-grid--cols-${this.columns}` : \'x-grid--cols-auto\';\\n    }\\n\\n    /**\\n     * CSSStyleDeclaration object specifying the number of columns the grid is divided into based on\\n     * the column property value.\\n     *\\n     * @returns A CSSStyleDeclaration to use as the style attribute.\\n     *\\n     * @internal\\n     */\\n    protected get style(): Partial<CSSStyleDeclaration> {\\n      return {\\n        gridTemplateColumns: this.columns\\n          ? `repeat(${this.columns}, minmax(0, 1fr))`\\n          : \'repeat(auto-fill, minmax(var(--x-size-min-width-grid-item, 150px), auto))\'\\n      };\\n    }\\n\\n    /**\\n     * Maps the item to an object containing: the `item`, its `CSS class` and its slot name.\\n     *\\n     * @returns An array of objects containing the item and its CSS class.\\n     *\\n     * @internal\\n     */\\n    protected get gridItems(): GridItem[] {\\n      return this.computedItems.map(item => {\\n        const slotName = toKebabCase(item.modelName);\\n        return {\\n          slotName,\\n          item,\\n          cssClass: `x-base-grid__${slotName}`\\n        };\\n      });\\n    }\\n  }\\n<\/script>\\n\\n<style lang=\\"scss\\" scoped>\\n  .x-base-grid {\\n    padding: var(--x-size-padding-grid, 0);\\n    margin: 0;\\n    display: grid;\\n    grid-auto-flow: dense;\\n    list-style: none;\\n\\n    &__banner {\\n      grid-column-start: 1;\\n      grid-column-end: -1;\\n    }\\n  }\\n</style>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\nThis component renders a list of elements in different slots depending on their modelName. In order\\nto achieve this, it exposes a scopedSlot for each different modelName. In case the items used do not\\nhave modelName property, the default slot is used instead. It has a required property, the `items`\\nto render, and an optional one, the number of `columns` the grid is divided in. If the number of\\ncolumns is not specified, the grid automatically fills the rows with as many columns as it can fit.\\n\\n### Basic example\\n\\nIt renders a list of items using the default slot:\\n\\n```vue\\n<template>\\n  <BaseGrid :items=\\"items\\">\\n    <template #default=\\"{ item }\\">\\n      {{ `Default slot content: ${item.id}` }}\\n    </template>\\n  </BaseGrid>\\n</template>\\n```\\n\\n### Configuring the number of columns\\n\\nIt renders a grid with 12 columns instead of 6, which is the default value:\\n\\n```vue\\n<template>\\n  <BaseGrid :items=\\"items\\" :columns=\\"12\\">\\n    <template #default=\\"{ item }\\">\\n      {{ `Default slot content: ${item.id}` }}\\n    </template>\\n  </BaseGrid>\\n</template>\\n```\\n\\n### Rendering usage\\n\\nConfiguring the number of columns.\\n\\nIt renders a list of items using the different scopedSlots created by the item\'s modelName. For\\nexample, if you want to use this component as the search grid, you pass the search results (results,\\nbanners, promoted, next queries...etc) as items. Each of these results have a different modelName\\nand are rendered in different slots.\\n\\n```vue\\n<template>\\n  <BaseGrid :animation=\\"animation\\" :items=\\"items\\">\\n    <template #banner=\\"{ item }\\">\\n      <span class=\\"banner\\">\\n        {{ `${item.title} banner` }}\\n      </span>\\n    </template>\\n    <template #next-queries=\\"{ item }\\">\\n      <span>\\n        {{ `${item.totalResults} next queries` }}\\n      </span>\\n    </template>\\n    <template #promoted=\\"{ item }\\">\\n      <span class=\\"promoted\\">\\n        {{ `${item.title} promoted` }}\\n      </span>\\n    </template>\\n    <template #result=\\"{ item }\\">\\n      <BaseResultLink :result=\\"item\\">\\n        {{ item.name }}\\n      </BaseResultLink>\\n    </template>\\n  </BaseGrid>\\n</template>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);