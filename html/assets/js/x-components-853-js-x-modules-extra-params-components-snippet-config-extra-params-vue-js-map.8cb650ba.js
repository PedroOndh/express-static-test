(window.webpackJsonp=window.webpackJsonp||[]).push([[998],{1268:function(n,e){throw new Error("Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {\"version\":3,\"file\":\"snippet-config-extra-params.vue.js\",\"sources\":[\"../../../../../src/x-modules/extra-params/components/snippet-config-extra-params.vue\"],\"sourcesContent\":[\"<template>\\n  <ExtraParams :values=\\\"extraParams\\\" />\\n</template>\\n\\n<script lang=\\\"ts\\\">\\n  import Vue from 'vue';\\n  import { Component, Watch, Inject } from 'vue-property-decorator';\\n  import { xComponentMixin } from '../../../components';\\n  import { Dictionary, forEach } from '../../../utils';\\n  import { SnippetConfig } from '../../../x-installer';\\n  import { extraParamsXModule } from '../x-module';\\n  import ExtraParams from './extra-params.vue';\\n\\n  /**\\n   * Extracts the extra parameters from the {@link SnippetConfig} and syncs it with the request\\n   * objects of every x-module.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: { ExtraParams },\\n    mixins: [xComponentMixin(extraParamsXModule)]\\n  })\\n  export default class SnippetConfigExtraParams extends Vue {\\n    /**\\n     * It injects {@link SnippetConfig} provided by an ancestor as snippetConfig.\\n     *\\n     * @internal\\n     */\\n    @Inject('snippetConfig')\\n    public snippetConfig!: SnippetConfig;\\n\\n    /**\\n     * Custom object containing the extra params from the snippet config.\\n     *\\n     * @remarks This object keeps manually the desired snippet config properties to avoid\\n     * unnecessary re-renders.\\n     *\\n     * @internal\\n     */\\n    protected extraParams: Dictionary<unknown> = {};\\n\\n    /**\\n     * Collection of properties from the snippet config not allowed to be sent as extra params.\\n     *\\n     * @internal\\n     */\\n    protected notAllowedExtraParams: Array<keyof SnippetConfig> = ['callbacks'];\\n\\n    /**\\n     * Updates the extraParams object when the snippet config changes.\\n     *\\n     * @param snippetConfig - The new snippet config.\\n     *\\n     * @internal\\n     */\\n    @Watch('snippetConfig', { deep: true, immediate: true })\\n    syncExtraParams({\\n      instance,\\n      scope,\\n      lang,\\n      searchLang,\\n      consent,\\n      documentDirection,\\n      currency,\\n      ...snippetExtraParams\\n    }: SnippetConfig): void {\\n      forEach(snippetExtraParams, (name, value) => {\\n        if (this.notAllowedExtraParams.includes(name)) {\\n          return;\\n        }\\n        this.$set(this.extraParams, name, value);\\n      });\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\\"mdx\\\">\\n## See it in action\\n\\n_See how the snippet config is injected and passed to the SnippetConfigExtraParams component._\\n\\n```vue\\n<template>\\n  <Provider>\\n    <SnippetConfigExtraParams />\\n  </Provider>\\n</template>\\n\\n<script>\\n  import { SnippetConfigExtraParams } from '@empathyco/x-components/extra-params';\\n\\n  const Provider = {\\n    provide: {\\n      snippetConfig: {\\n        instance: 'demo',\\n        lang: 'es',\\n        warehouse: 1234\\n      }\\n    }\\n  };\\n\\n  export default {\\n    name: 'SnippetConfigExtraParamsDemo',\\n    components: {\\n      Provider,\\n      SnippetConfigExtraParams\\n    }\\n  };\\n<\/script>\\n```\\n</docs>\\n\"],\"names\":[\"const\"],\"mappings\":\";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\"}")}}]);