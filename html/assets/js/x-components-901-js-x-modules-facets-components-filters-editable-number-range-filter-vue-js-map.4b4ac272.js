(window.webpackJsonp=window.webpackJsonp||[]).push([[1016],{1284:function(n,e){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"editable-number-range-filter.vue.js","sources":["../../../../../../src/x-modules/facets/components/filters/editable-number-range-filter.vue"],"sourcesContent":["<template>\\n  <div\\n    class=\\"x-editable-number-range-filter\\"\\n    :class=\\"cssClasses\\"\\n    data-test=\\"editable-number-range-filter\\"\\n  >\\n    \x3c!--\\n        @slot Empty slot used to customize the whole component.\\n          @binding {min} number - Component min value.\\n          @binding {max} number - Component max value.\\n          @binding {setMin} function - Component min setter.\\n          @binding {setMax} function - Component max setter.\\n          @binding {emitUserModifiedFilter} function - It emits the\\n          `UserModifiedEditableNumberRangeFilter` X event.\\n          @binding {clearValues} function - It sets component min and max values to null.\\n          @binding {hasError} boolean - Returns true when there is an error with component values.\\n    --\x3e\\n    <slot v-bind=\\"{ min, max, setMin, setMax, emitUserModifiedFilter, clearValues, hasError }\\">\\n      \x3c!-- eslint-disable max-len --\x3e\\n      <input\\n        @change=\\"setMin($event.target.valueAsNumber)\\"\\n        name=\\"min\\"\\n        type=\\"number\\"\\n        class=\\"\\n          x-input\\n          x-editable-number-range-filter__input x-editable-number-range-filter__input--min\\n        \\"\\n        :value=\\"min\\"\\n        data-test=\\"range-min\\"\\n      />\\n\\n      <input\\n        @change=\\"setMax($event.target.valueAsNumber)\\"\\n        name=\\"max\\"\\n        type=\\"number\\"\\n        class=\\"\\n          x-input\\n          x-editable-number-range-filter__input x-editable-number-range-filter__input--max\\n        \\"\\n        :value=\\"max\\"\\n        data-test=\\"range-max\\"\\n      />\\n      \x3c!-- eslint-enable max-len --\x3e\\n\\n      <button\\n        v-if=\\"!isInstant\\"\\n        @click=\\"emitUserModifiedFilter\\"\\n        class=\\"x-button x-editable-number-range-filter__apply\\"\\n        :disabled=\\"hasError\\"\\n        data-test=\\"range-apply\\"\\n      >\\n        \x3c!--\\n            @slot Slot used to customize the apply button content.\\n        --\x3e\\n        <slot name=\\"apply-content\\">‚úì</slot>\\n      </button>\\n\\n      <button\\n        v-if=\\"renderClearButton\\"\\n        @click=\\"clearValues\\"\\n        class=\\"x-button x-editable-number-range-filter__clear\\"\\n        data-test=\\"range-clear\\"\\n      >\\n        \x3c!--\\n            @slot Slot used to customize the clear button content.\\n        --\x3e\\n        <slot name=\\"clear-content\\">êÑÇ</slot>\\n      </button>\\n    </slot>\\n  </div>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import {\\n    EditableNumberRangeFilter as EditableNumberRangeFilterModel,\\n    RangeValue\\n  } from \'@empathyco/x-types\';\\n  import { Component, Prop, Vue, Watch } from \'vue-property-decorator\';\\n  import { VueCSSClasses } from \'../../../../utils/types\';\\n  import { facetsXModule } from \'../../x-module\';\\n  import { xComponentMixin } from \'../../../../components/x-component.mixin\';\\n\\n  /**\\n   * Renders an editable number range filter. It has two input fields to handle min and max values,\\n   * emitting the needed events when clicked.\\n   *\\n   * It provides a default slot, with some utils bind, to customize the whole component; and two\\n   * named slots `apply-content` and `clear-content` to override each button content.\\n   *\\n   * If `instant` prop is true, the needed events are emitted immediately; else, apply button is\\n   * rendered to confirm to do it. False by default.\\n   *\\n   * If `clear` prop is true, clear button, which sets to null component min and max values, is\\n   * rendered. True by default.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    mixins: [xComponentMixin(facetsXModule)]\\n  })\\n  export default class EditableNumberRangeFilter extends Vue {\\n    /**\\n     * Component min value.\\n     *\\n     * @internal\\n     */\\n    protected min: RangeValue[\'min\'] = null;\\n    /**\\n     * Component max value.\\n     *\\n     * @internal\\n     */\\n    protected max: RangeValue[\'max\'] = null;\\n\\n    /**\\n     * The filter data to render and edit.\\n     *\\n     * @public\\n     */\\n    @Prop({ required: true })\\n    public filter!: EditableNumberRangeFilterModel;\\n\\n    /**\\n     * If `instant` prop is true, the needed events are emitted immediately; else, apply button is\\n     * rendered to confirm to do it. False by default.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: false })\\n    public isInstant!: boolean;\\n\\n    /**\\n     * If `clear` prop is true, clear button, which sets to null component min and max values, is\\n     * rendered. True by default.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: true })\\n    public hasClearButton!: boolean;\\n\\n    /**\\n     * It watches the filter range values passed as property and updates component range values if\\n     * they change.\\n     *\\n     * @param newRange - New range value.\\n     *\\n     * @internal\\n     */\\n    @Watch(\'filter.range\', { immediate: true, deep: true })\\n    onFilterChanged(newRange: RangeValue): void {\\n      this.min = newRange.min;\\n      this.max = newRange.max;\\n    }\\n\\n    /**\\n     * It watches range values in order to emit the event with the change if `isInstant`\\n     * property is true.\\n     *\\n     * @internal\\n     */\\n    @Watch(\'range\', { deep: true })\\n    protected instantEmitUserModifiedFilter(): void {\\n      if (this.isInstant) {\\n        this.emitUserModifiedFilter();\\n      }\\n    }\\n\\n    /**\\n     * Dynamic CSS classes.\\n     *\\n     * @returns Object which contains dynamic CSS classes.\\n     *\\n     * @internal\\n     */\\n    protected get cssClasses(): VueCSSClasses {\\n      return { \'x-editable-number-range-filter--error\': this.hasError };\\n    }\\n\\n    /**\\n     * Returns {@link @empathyco/x-types#RangeValue | RangeValue} with component min and max\\n     * values.\\n     *\\n     * @returns Range value object with component values.\\n     *\\n     * @internal\\n     */\\n    protected get range(): RangeValue {\\n      return { min: this.min, max: this.max };\\n    }\\n\\n    /**\\n     * It returns true if the property `hasClearButton` is true and there are values to clear.\\n     *\\n     * @returns True if the clear button has to be rendered.\\n     *\\n     * @internal\\n     */\\n    protected get renderClearButton(): boolean {\\n      return this.hasClearButton && (this.min !== null || this.max !== null);\\n    }\\n\\n    /**\\n     * It checks if component min and max values are valid.\\n     *\\n     * @returns True if there is any error in the component min and max values.\\n     *\\n     * @internal\\n     */\\n    protected get hasError(): boolean {\\n      return this.min !== null && this.max !== null && this.min > this.max;\\n    }\\n\\n    /**\\n     * It checks if component min and max values are different than the ones within the filter\\n     * provided as property.\\n     *\\n     * @returns True if they are different.\\n     *\\n     * @internal\\n     */\\n    protected get areValuesDifferent(): boolean {\\n      return this.min !== this.filter.range.min || this.max !== this.filter.range.max;\\n    }\\n\\n    /**\\n     * It returns the number if possible or null otherwise.\\n     *\\n     * @param value - Value.\\n     * @returns The element value as a number if possible or null.\\n     *\\n     * @internal\\n     */\\n    protected parseRangeValue(value: number): number | null {\\n      return isNaN(value) ? null : value;\\n    }\\n\\n    /**\\n     * `min` setter.\\n     *\\n     * @param value - The component `min` value to be set.\\n     *\\n     * @internal\\n     */\\n    protected setMin(value: number): void {\\n      this.min = this.parseRangeValue(value);\\n    }\\n\\n    /**\\n     * `max` setter.\\n     *\\n     * @param value - The component `max` value to be set.\\n     *\\n     * @internal\\n     */\\n    protected setMax(value: number): void {\\n      this.max = this.parseRangeValue(value);\\n    }\\n\\n    /**\\n     * It sets component `min` and `max` values to null and it emits the change if component is\\n     * working in instant mode.\\n     *\\n     * @internal\\n     */\\n    protected clearValues(): void {\\n      this.min = null;\\n      this.max = null;\\n    }\\n\\n    /**\\n     * It emits {@link FacetsXEvents.UserModifiedEditableNumberRangeFilter} event if there are no\\n     * errors and component `min` and `max` values are different than `filter.range` ones.\\n     *\\n     * @internal\\n     */\\n    protected emitUserModifiedFilter(): void {\\n      if (!this.hasError && this.areValuesDifferent) {\\n        this.$x.emit(\'UserModifiedEditableNumberRangeFilter\', {\\n          ...this.filter,\\n          range: this.range\\n        });\\n      }\\n    }\\n  }\\n<\/script>\\n\\n<style lang=\\"scss\\">\\n  .x-editable-number-range-filter {\\n    &--error {\\n      .x-editable-number-range-filter__input {\\n        border-color: red;\\n      }\\n    }\\n  }\\n</style>\\n\\n<docs lang=\\"mdx\\">\\n## Example\\n\\nRenders an editable number range filter. It has two input fields to handle min and max values,\\nemitting the needed events when clicked.\\n\\nIt provides a default slot, with some utils bind, to customize the whole component; and two named\\nslots `apply-content` and `clear-content` to override each button content.\\n\\nIf `instant` prop is true, the needed events are emitted immediately; else, apply button is rendered\\nto confirm to do it. False by default.\\n\\nIf `clear` prop is true, clear button, which sets to null component min and max values, is rendered.\\nTrue by default.\\n\\n### Basic usage\\n\\n```vue\\n<template>\\n  <EditableNumberRangeFilter :filter=\\"editableFilter\\" />\\n</template>\\n\\n<script>\\n  import { EditableNumberRangeFilter } from \'@empathyco/x-components/facets\';\\n\\n  export default {\\n    components: {\\n      EditableNumberRangeFilter\\n    },\\n    data() {\\n      return {\\n        editableFilter: {\\n          facetId: \'age\',\\n          id: \'age:primary\',\\n          label: \'primary\',\\n          modelName: \'EditableNumberRangeFilter\',\\n          range: {\\n            min: null,\\n            max: null\\n          }\\n        }\\n      };\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Properties\\n\\n```vue\\n<template>\\n  <EditableNumberRangeFilter :filter=\\"editableFilter\\" :isInstant=\\"true\\" :hasClearButton=\\"false\\" />\\n</template>\\n\\n<script>\\n  import { EditableNumberRangeFilter } from \'@empathyco/x-components/facets\';\\n\\n  export default {\\n    components: {\\n      EditableNumberRangeFilter\\n    },\\n    data() {\\n      return {\\n        editableFilter: {\\n          facetId: \'age\',\\n          id: \'age:primary\',\\n          label: \'primary\',\\n          modelName: \'EditableNumberRangeFilter\',\\n          range: {\\n            min: null,\\n            max: null\\n          }\\n        }\\n      };\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Customizing content slots\\n\\n```vue\\n<template>\\n  <EditableNumberRangeFilter :filter=\\"editableFilter\\">\\n    <template name=\\"apply-content\\">Apply</template>\\n    <template name=\\"clear-content\\">Clear</template>\\n  </EditableNumberRangeFilter>\\n</template>\\n\\n<script>\\n  import { EditableNumberRangeFilter } from \'@empathyco/x-components/facets\';\\n\\n  export default {\\n    components: {\\n      EditableNumberRangeFilter\\n    },\\n    data() {\\n      return {\\n        editableFilter: {\\n          facetId: \'age\',\\n          id: \'age:primary\',\\n          label: \'primary\',\\n          modelName: \'EditableNumberRangeFilter\',\\n          range: {\\n            min: null,\\n            max: null\\n          }\\n        }\\n      };\\n    }\\n  };\\n<\/script>\\n```\\n\\n### Customizing default slot\\n\\n```vue\\n<template>\\n  <EditableNumberRangeFilter\\n    :filter=\\"editableFilter\\"\\n    #default=\\"{ min, max, setMin, setMax, emitUserModifiedFilter, clearValues, hasError }\\"\\n  >\\n    <button @click=\\"emitUserModifiedFilter\\">‚úÖ Apply!</button>\\n    <button @click=\\"clearValues\\">üóë Clear!</button>\\n    <input :value=\\"min\\" @change=\\"setMin($event.target.valueAsNumber)\\" />\\n    <input :value=\\"max\\" @change=\\"setMax($event.target.valueAsNumber)\\" />\\n    <div class=\\"has-error\\" v-if=\\"hasError\\">‚ö†Ô∏è Invalid range values</div>\\n  </EditableNumberRangeFilter>\\n</template>\\n\\n<script>\\n  import { EditableNumberRangeFilter } from \'@empathyco/x-components/facets\';\\n\\n  export default {\\n    components: {\\n      EditableNumberRangeFilter\\n    },\\n    data() {\\n      return {\\n        editableFilter: {\\n          facetId: \'age\',\\n          id: \'age:primary\',\\n          label: \'primary\',\\n          modelName: \'EditableNumberRangeFilter\',\\n          range: {\\n            min: null,\\n            max: null\\n          }\\n        }\\n      };\\n    }\\n  };\\n<\/script>\\n```\\n\\n## Events\\n\\nA list of events that the component will emit:\\n\\n- `UserModifiedEditableNumberRangeFilter`: this event is emitted instantly after typing the value or\\n  clicking the submit button. The event payload in both cases is an object containing the filter and\\n  the new value for the range.\\n</docs>\\n"],"names":["const"],"mappings":";;;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);