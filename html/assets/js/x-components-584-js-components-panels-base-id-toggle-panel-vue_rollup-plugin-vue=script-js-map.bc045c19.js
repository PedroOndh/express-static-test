(window.webpackJsonp=window.webpackJsonp||[]).push([[899],{1179:function(A,e){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"base-id-toggle-panel.vue_rollup-plugin-vue=script.js","sources":["../../../../src/components/panels/base-id-toggle-panel.vue?rollup-plugin-vue=script.ts"],"sourcesContent":["\\n\\n\\n\\n\\n\\n\\n\\nimport Vue from \'vue\';\\nimport { Component, Prop, Watch } from \'vue-property-decorator\';\\nimport { XOn } from \'../decorators/bus.decorators\';\\nimport { NoElement } from \'../no-element\';\\nimport BaseTogglePanel from \'./base-toggle-panel.vue\';\\n\\n/**\\n * Simple panel that could receives its initial open state via prop, if not the default is opens\\n * and a required prop, named `panelId`, which are responsible of rendering default slot\\n * inside a configurable transition.\\n *\\n * It reacts to `UserClickedPanelToggleButton` event, when their payload matches the component\'s\\n * \'panelId\' prop, to handle its open/close state.\\n *\\n * The default slot offers the possibility to customise the modal content.\\n *\\n * @public\\n */\\n@Component({\\n  components: {\\n    BaseTogglePanel\\n  }\\n})\\nexport default class BaseIdTogglePanel extends Vue {\\n  /**\\n   * Shows the panel open at the beginning or not, depending on its state.\\n   *\\n   * @public\\n   */\\n  @Prop({ default: true })\\n  protected startOpen!: boolean;\\n\\n  /** Whether the toggle panel is open or not. */\\n  protected isOpen = this.startOpen;\\n\\n  /**\\n   * Animation component that will be used to animate the panel content.\\n   *\\n   * @public\\n   */\\n  @Prop({ default: () => NoElement })\\n  protected animation!: Vue;\\n\\n  /**\\n   * The id to link with the BaseIdTogglePanelButton.\\n   * Both components must use the same Id to make them interact.\\n   */\\n  @Prop({ required: true })\\n  public panelId!: string;\\n\\n  /**\\n   * Method to subscribe to the {@link XEventsTypes.UserClickedPanelToggleButton} event.\\n   *\\n   * @param panelId - The payload of the {@link XEventsTypes.UserClickedPanelToggleButton} event.\\n   *\\n   * @public\\n   */\\n  @XOn(\'UserClickedPanelToggleButton\')\\n  togglePanel(panelId: string): void {\\n    if (this.panelId === panelId) {\\n      this.isOpen = !this.isOpen;\\n    }\\n  }\\n\\n  /**\\n   * Emits the {@link XEventsTypes.TogglePanelStateChanged} event, when the internal state\\n   * changes.\\n   *\\n   * @remarks This event is necessary to link the state with the {@link BaseIdTogglePanelButton}\\n   * component.\\n   * @public\\n   */\\n  @Watch(\'isOpen\', { immediate: true })\\n  emitStateEvent(): void {\\n    this.$x.emit(\'TogglePanelStateChanged\', this.isOpen, {\\n      id: this.panelId,\\n      target: this.$el as HTMLElement\\n    });\\n  }\\n}\\n"],"names":[],"mappings":";;;;;;;AAcA;;;;;;;;;;;;AAiBA;IAA+C,qCAAG;IAAlD;QAAA,qEAwDC;;QA9CW,YAAM,GAAG,KAAI,CAAC,SAAS,CAAC;;KA8CnC;;;;;;;;IArBC,uCAAW,GAAX,UAAY,OAAe;QACzB,IAAI,IAAI,CAAC,OAAO,KAAK,OAAO,EAAE;YAC5B,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;SAC5B;KACF;;;;;;;;;IAWD,0CAAc,GAAd;QACE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,yBAAyB,EAAE,IAAI,CAAC,MAAM,EAAE;YACnD,EAAE,EAAE,IAAI,CAAC,OAAO;YAChB,MAAM,EAAE,IAAI,CAAC,GAAkB;SAChC,CAAC,CAAC;KACJ;IAhDD;QADC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;wDACM;IAW9B;QADC,IAAI,CAAC,EAAE,OAAO,EAAE,cAAM,OAAA,SAAS,GAAA,EAAE,CAAC;wDACT;IAO1B;QADC,IAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;sDACD;IAUxB;QADC,GAAG,CAAC,8BAA8B,CAAC;wDAKnC;IAWD;QADC,KAAK,CAAC,QAAQ,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;2DAMpC;IAvDkB,iBAAiB;QALrC,SAAS,CAAC;YACT,UAAU,EAAE;gBACV,eAAe,iBAAA;aAChB;SACF,CAAC;OACmB,iBAAiB,CAwDrC;IAAD,wBAAC;CAAA,CAxD8C,GAAG;;;;"}')}}]);