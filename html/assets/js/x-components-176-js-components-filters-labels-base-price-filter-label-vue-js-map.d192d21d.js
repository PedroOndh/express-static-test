(window.webpackJsonp=window.webpackJsonp||[]).push([[755],{1043:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"base-price-filter-label.vue.js","sources":["../../../../../src/components/filters/labels/base-price-filter-label.vue"],"sourcesContent":["<script lang=\\"ts\\">\\n  import Vue, { CreateElement, VNode, VNodeChildren } from \'vue\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import { RangeValue } from \'@empathyco/x-types\';\\n  import BaseCurrency from \'../../currency/base-currency.vue\';\\n\\n  /**\\n   * Renders a label for a price filter, allowing to select different messages depending on the\\n   * value of the filter.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    components: { BaseCurrency }\\n  })\\n  export default class BasePriceFilterLabel extends Vue {\\n    /** The filter data for get min and max value. */\\n    @Prop({ required: true })\\n    public filter!: { range: RangeValue };\\n\\n    /** Configuration for show the label. */\\n    @Prop()\\n    public format?: string;\\n\\n    /**\\n     * Message shown when the filter hasn\'t got the min value defined.\\n     *\\n     * @public\\n     */\\n    @Prop({ required: true })\\n    public lessThan!: string;\\n\\n    /**\\n     * Message shown when the filter has both the min and max values defined.\\n     *\\n     * @public\\n     */\\n    @Prop({ required: true })\\n    public fromTo!: string;\\n\\n    /**\\n     * Message shown when the filter hasn\'t got max value defined.\\n     *\\n     * @public\\n     */\\n    @Prop({ required: true })\\n    public from!: string;\\n\\n    /**\\n     * The active label, retrieved from the provided props.\\n     * It depends on the min and max values of the filter.\\n     *\\n     * @returns The active label to be formatted with the min and max values of the filter.\\n     */\\n    protected get label(): string {\\n      return this.filter.range.min === null\\n        ? this.lessThan\\n        : this.filter.range.max === null\\n        ? this.from\\n        : this.fromTo;\\n    }\\n\\n    render(createElement: CreateElement): VNode {\\n      const labelParts = this.label.split(/({min}|{max})/);\\n\\n      const children: VNodeChildren = labelParts.map(partMessage => {\\n        if (partMessage === \'{min}\') {\\n          return createElement(\'BaseCurrency\', {\\n            props: {\\n              value: this.filter.range.min,\\n              format: this.format\\n            }\\n          });\\n        } else if (partMessage === \'{max}\') {\\n          return createElement(\'BaseCurrency\', {\\n            props: {\\n              value: this.filter.range.max,\\n              format: this.format\\n            }\\n          });\\n        }\\n        return partMessage;\\n      });\\n\\n      return createElement(\'span\', { class: \'x-price-filter-label\' }, children);\\n    }\\n  }\\n<\/script>\\n\\n<docs lang=\\"mdx\\">\\n## Example\\n\\nRenders a label for a price filter, allowing to select different messages depending on the value of\\nthe filter.\\n\\n- When the `min` value property isn\'t defined in the filter, you can show a message like\\n  `Less than $10` by using the `lessThan` prop, combined with the `{max}` placeholder.\\n- When the `max` value property isn\'t defined in the filter, you can show a message like\\n  `More than $300` by using the `from` prop, combined with the `{min}` placeholder.\\n- If both the `min` and `max` values of the filter are defined, you can show a message like\\n  `$10 - $300` by using the `fromTo` prop.\\n\\nThis component uses internally the `BaseCurrency` one, so you can pass the same props to configure\\nhow the price should look like.\\n\\n### Basic usage\\n\\n```vue\\n<template>\\n  <Facets>\\n    <template #price=\\"{ facet }\\">\\n      <Filters v-slot=\\"{ filter }\\" :filters=\\"facet.filters\\">\\n        <NumberRangeFilter :filter=\\"filter\\" v-slot=\\"{ filter }\\">\\n          <BasePriceFilterLabel\\n            :filter=\\"filter\\"\\n            format=\\"$i\\"\\n            lessThan=\\"Less than {max}\\"\\n            fromTo=\\"From {min} to {max}\\"\\n            from=\\"More than {min}\\"\\n          />\\n        </NumberRangeFilter>\\n      </Filters>\\n    </template>\\n  </Facets>\\n</template>\\n\\n<script>\\n  import { BasePriceFilterLabel } from \'@empathyco/x-components\';\\n  import { Filters, Facets, NumberRangeFilter } from \'@empathyco/x-components/facets\';\\n\\n  export default {\\n    name: \'MyFacets\',\\n    components: {\\n      Facets,\\n      Filters,\\n      NumberRangeFilter,\\n      BasePriceFilterLabel\\n    }\\n  };\\n<\/script>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);