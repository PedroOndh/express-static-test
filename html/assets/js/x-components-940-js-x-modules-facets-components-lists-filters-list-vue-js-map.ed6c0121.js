(window.webpackJsonp=window.webpackJsonp||[]).push([[1030],{1297:function(e,n){throw new Error('Module parse failed: Unexpected token (1:10)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> {"version":3,"file":"filters-list.vue.js","sources":["../../../../../../src/x-modules/facets/components/lists/filters-list.vue"],"sourcesContent":["<template>\\n  <component\\n    :is=\\"animation\\"\\n    v-if=\\"hasFiltersToRender\\"\\n    tag=\\"ul\\"\\n    class=\\"x-list x-filters\\"\\n    :class=\\"cssClasses\\"\\n    data-test=\\"base-filters\\"\\n  >\\n    <li\\n      v-for=\\"filter in renderedFilters\\"\\n      :key=\\"filter.id\\"\\n      class=\\"x-filters__item\\"\\n      data-test=\\"base-filters-item\\"\\n    >\\n      \x3c!--\\n        @slot (Required) Filter content\\n            @binding {Filter} filter - Search-types filter data.\\n      --\x3e\\n      <slot :filter=\\"filter\\" />\\n    </li>\\n  </component>\\n</template>\\n\\n<script lang=\\"ts\\">\\n  import Vue from \'vue\';\\n  import { mixins } from \'vue-class-component\';\\n  import { Component, Prop } from \'vue-property-decorator\';\\n  import { xComponentMixin } from \'../../../../components\';\\n  import { VueCSSClasses } from \'../../../../utils/types\';\\n  import { facetsXModule } from \'../../x-module\';\\n  import FiltersInjectionMixin from \'./filters-injection.mixin\';\\n\\n  /**\\n   * Renders a list with a list item per each\\n   * {@link @empathyco/x-types#BooleanFilter | BooleanFilter} in the filters prop array.\\n   * Each list item has a scoped slot, passing the filter as slot prop.\\n   *\\n   * @public\\n   */\\n  @Component({\\n    mixins: [xComponentMixin(facetsXModule)]\\n  })\\n  export default class FiltersList extends mixins(FiltersInjectionMixin) {\\n    /**\\n     * Animation component that will be used to animate the base filters.\\n     *\\n     * @public\\n     */\\n    @Prop({ default: \'ul\' })\\n    protected animation!: Vue | string;\\n\\n    /**\\n     * It handles if the filters should be rendered.\\n     *\\n     * @returns True if there are filters.\\n     *\\n     * @public\\n     */\\n    protected get hasFiltersToRender(): boolean {\\n      return this.renderedFilters?.length > 0;\\n    }\\n\\n    /**\\n     * Checks if at least one filter is selected.\\n     *\\n     * @returns True if at least one filter is selected. False otherwise.\\n     * @internal\\n     */\\n    protected get hasSelectedFilters(): boolean {\\n      return !!this.renderedFilters?.some(filter => filter.selected);\\n    }\\n\\n    /**\\n     * Dynamic CSS classes for the root element of this component.\\n     *\\n     * @returns An object containing the dynamic CSS classes and a boolean indicating if they should\\n     * be added or not.\\n     */\\n    protected get cssClasses(): VueCSSClasses {\\n      return {\\n        \'x-filters--has-selected-filters\': this.hasSelectedFilters\\n      };\\n    }\\n  }\\n<\/script>\\n\\n<style lang=\\"scss\\" scoped>\\n  .x-filters {\\n    list-style-type: none;\\n  }\\n</style>\\n\\n<docs lang=\\"mdx\\">\\n## Examples\\n\\nRenders a list with a list item per each filter in the filters prop array. Each list item has a\\nscoped slot, passing the filter as slot prop.\\n\\n### Important\\n\\nThe component has two ways of receive the filters list, it can be injected by another component or\\nbe send it as a prop. If the component doesnt have a parent component that receive and exposed a\\nfilters list to their children, it is mandatory to send it as prop.\\n\\n### Basic usage\\n\\nUsing default slot:\\n\\n```vue\\n<FiltersList :filters=\\"filters\\">\\n  <template #default=\\"{ filter }\\">\\n    <p>{{ filter.label }}</p>\\n  </template>\\n</FiltersList>\\n```\\n\\nUsing default slot abbreviated syntax:\\n\\n```vue\\n<FiltersList :filters=\\"filters\\" v-slot=\\"{ filter }\\">\\n  <p>{{ filter.label }}</p>\\n</FiltersList>\\n```\\n\\n> **Using injection**: It can receive the filters list by injection. It only works if it has a\\n> parent component that receives and exposes the filters list. Using the injection, It is not\\n> necessary to send the prop to the child components, it has to be send it in the parent component ,\\n> the rest of components will inject this list.\\n\\n```vue\\n<SlicedFilters :filters=\\"filters\\">\\n  <FiltersList v-slot=\\"{ filter }\\">\\n    <p>{{ filter.label }}</p>\\n  </FiltersList>\\n</SlicedFilters>\\n```\\n</docs>\\n"],"names":["const"],"mappings":";;;;;AAEAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}')}}]);